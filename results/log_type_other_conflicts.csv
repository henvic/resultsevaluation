/home/taes/taes/projects/jodd/revisions/rev_b308375_38b60c8/rev_b308375-38b60c8/jodd-http/src/main/java/jodd/http/HttpBrowser.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneType.java;<<<<<<< MINE
=======
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.elephantbird.examples.thrift;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;
public enum PhoneType implements TEnum{
    MOBILE(0),
    HOME(1),
    WORK(2);

  private static final Map<Integer, PhoneType> BY_VALUE = new HashMap<Integer,PhoneType>() {{
    for(PhoneType val : PhoneType.values()) {
      put(val.getValue(), val);
    }
  }};

  private final int value;

  private PhoneType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static PhoneType findByValue(int value) { 
    return BY_VALUE.get(value);
  }
}>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufBlockOutputFormat.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftB64LineInputFormat.java;<<<<<<< MINE

=======
  
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftB64LineInputFormat.java;<<<<<<< MINE
=======
  
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader.java;<<<<<<< MINE
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader.java;<<<<<<< MINE

=======
  
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/java/com/twitter/elephantbird/pig/load/LzoBaseLoadFunc.java;<<<<<<< MINE

=======
  
  /** same as incrCounter(pair.first, pair.second, incr). */
  protected void incrCounter(Pair<String, String> groupCounterPair, long incr) {
    counterHelper_.incrCounter(groupCounterPair.first, groupCounterPair.second, incr);
  }
  
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/java/com/twitter/elephantbird/pig/load/LzoProtobufBlockPigLoader.java;<<<<<<< MINE
  protected enum LzoProtobufBlockPigLoaderCounters { ProtobufsRead }
=======
  private Pair<String, String> protobufsRead;
  private Pair<String, String> protobufErrors;
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/java/com/twitter/elephantbird/pig/load/LzoProtobufB64LinePigLoader.java;<<<<<<< MINE
  protected enum LzoProtobufB64LinePigLoaderCounts { LinesRead, ProtobufsRead }
=======
  private Pair<String, String> linesRead;
  private Pair<String, String> protobufsRead;
  private Pair<String, String> protobufErrors;
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0/src/test/com/twitter/elephantbird/pig/piggybank/TestThriftToPig.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/util/Protobufs.java;<<<<<<< MINE
=======
  private static final String CLASS_CONF_PREFIX = "elephantbird.protobuf.class.for.";

  /**
   * Returns Protobuf class. The class name could be either normal name or
   * its canonical name (canonical name does not have a $ for inner classes).
   */
  public static Class<? extends Message> getProtobufClass(String protoClassName) {
    return getProtobufClass(null, protoClassName);
  }

  private static Class<? extends Message> getProtobufClass(Configuration conf, String protoClassName) {
    // Try both normal name and canonical name of the class.
    Class<?> protoClass = null;
    try {
      if (conf == null) {
        protoClass = Class.forName(protoClassName);
      } else {
        protoClass = conf.getClassByName(protoClassName);
      }
    } catch (ClassNotFoundException e) {
      // the class name might be canonical name.
      protoClass = getInnerProtobufClass(protoClassName);
    }

    return protoClass.asSubclass(Message.class);
  }

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/util/Protobufs.java;<<<<<<< MINE
  
  /**
   * Creates a Function to repeatedly convert byte arrays into Messages. Using such a function
   * is more efficient than the static <code>parseFrom</code> method, since it avoids some of the
   * reflection overhead of the static function.
   */
  public static <M extends Message> Function<byte[], M> getProtoConverter(final Class<M> protoClass) {
    //XXX Remove this.
    return new Function<byte[], M>() {
      private Message.Builder protoBuilder = null; 
      
      @SuppressWarnings("unchecked")
      @Override
      public M apply(byte[] bytes) {
        try {
          if (protoBuilder == null) {
            protoBuilder = Protobufs.getMessageBuilder(protoClass);
          }
          return  (M) protoBuilder.clone().mergeFrom(bytes).build();
        } catch (InvalidProtocolBufferException e) {
          LOG.error("Invalid Protocol Buffer exception building " + protoClass.getName(), e);
          return null;
        } catch(UninitializedMessageException ume) {
	  LOG.error("Uninitialized Message Exception in building " + protoClass.getName(), ume);
	  return null;
        }
      }
    };
  }
=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/util/Protobufs.java;<<<<<<< MINE
=======

  /**
   * Returns typeref for a Protobuf class
   */
  public static<M extends Message> TypeRef<M> getTypeRef(String protoClassName) {
    return new TypeRef<M>(getProtobufClass(protoClassName)){};
  }

  /**
   * Returns TypeRef for the Protobuf class that was set using setClass(jobConf);
   */
  public static<M extends Message> TypeRef<M> getTypeRef(Configuration jobConf, Class<?> genericClass) {
    String className = jobConf.get(CLASS_CONF_PREFIX + genericClass.getName());
    if (className == null) {
      throw new RuntimeException(CLASS_CONF_PREFIX + genericClass.getName() + " is not set");
    }
    return new TypeRef<M>(getProtobufClass(jobConf, className)){};
  }

  public static void setClassConf(Configuration jobConf, Class<?> genericClass,
      Class<? extends Message> protoClass) {
    jobConf.set(CLASS_CONF_PREFIX + genericClass.getName(), protoClass.getName());
  }
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufWritable.java;<<<<<<< MINE
=======

  /**
   * Returns a ThriftWritable for a given Thrift class.
   */
  public static <M extends Message> ProtobufWritable<M> newInstance(Class<M> tClass) {
    return new ProtobufWritable<M>(new TypeRef<M>(tClass){});
  }

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockWriter.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockWriter.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter.java;<<<<<<< MINE
=======

  /**
   * Returns a ProtobufConverter for a given Protobuf class.
   */
  public static <M extends Message> ProtobufConverter<M> newInstance(Class<M> protoClass) {
    return new ProtobufConverter<M>(new TypeRef<M>(protoClass){});
  }

  public static <M extends Message> ProtobufConverter<M> newInstance(TypeRef<M> typeRef) {
    return new ProtobufConverter<M>(typeRef);
  }

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/test/com/twitter/elephantbird/util/TestProtobufs.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/test/com/twitter/elephantbird/util/TestProtobufs.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9/src/test/com/twitter/elephantbird/util/TestProtobufs.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/util/Protobufs.java;<<<<<<< MINE
=======
  private static final String CLASS_CONF_PREFIX = "elephantbird.protobuf.class.for.";

  /**
   * Returns Protobuf class. The class name could be either normal name or
   * its canonical name (canonical name does not have a $ for inner classes).
   */
  public static Class<? extends Message> getProtobufClass(String protoClassName) {
    return getProtobufClass(null, protoClassName);
  }

  private static Class<? extends Message> getProtobufClass(Configuration conf, String protoClassName) {
    // Try both normal name and canonical name of the class.
    Class<?> protoClass = null;
    try {
      if (conf == null) {
        protoClass = Class.forName(protoClassName);
      } else {
        protoClass = conf.getClassByName(protoClassName);
      }
    } catch (ClassNotFoundException e) {
      // the class name might be canonical name.
      protoClass = getInnerProtobufClass(protoClassName);
    }

    return protoClass.asSubclass(Message.class);
  }

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/util/Protobufs.java;<<<<<<< MINE
  
  /**
   * Creates a Function to repeatedly convert byte arrays into Messages. Using such a function
   * is more efficient than the static <code>parseFrom</code> method, since it avoids some of the
   * reflection overhead of the static function.
   */
  public static <M extends Message> Function<byte[], M> getProtoConverter(final Class<M> protoClass) {
    //XXX Remove this.
    return new Function<byte[], M>() {
      private Message.Builder protoBuilder = null; 
      
      @SuppressWarnings("unchecked")
      @Override
      public M apply(byte[] bytes) {
        try {
          if (protoBuilder == null) {
            protoBuilder = Protobufs.getMessageBuilder(protoClass);
          }
          return  (M) protoBuilder.clone().mergeFrom(bytes).build();
        } catch (InvalidProtocolBufferException e) {
          LOG.error("Invalid Protocol Buffer exception building " + protoClass.getName(), e);
          return null;
        } catch(UninitializedMessageException ume) {
	  LOG.error("Uninitialized Message Exception in building " + protoClass.getName(), ume);
	  return null;
        }
      }
    };
  }
=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/util/Protobufs.java;<<<<<<< MINE
=======

  /**
   * Returns typeref for a Protobuf class
   */
  public static<M extends Message> TypeRef<M> getTypeRef(String protoClassName) {
    return new TypeRef<M>(getProtobufClass(protoClassName)){};
  }

  /**
   * Returns TypeRef for the Protobuf class that was set using setClass(jobConf);
   */
  public static<M extends Message> TypeRef<M> getTypeRef(Configuration jobConf, Class<?> genericClass) {
    String className = jobConf.get(CLASS_CONF_PREFIX + genericClass.getName());
    if (className == null) {
      throw new RuntimeException(CLASS_CONF_PREFIX + genericClass.getName() + " is not set");
    }
    return new TypeRef<M>(getProtobufClass(jobConf, className)){};
  }

  public static void setClassConf(Configuration jobConf, Class<?> genericClass,
      Class<? extends Message> protoClass) {
    jobConf.set(CLASS_CONF_PREFIX + genericClass.getName(), protoClass.getName());
  }
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufWritable.java;<<<<<<< MINE
=======

  /**
   * Returns a ThriftWritable for a given Thrift class.
   */
  public static <M extends Message> ProtobufWritable<M> newInstance(Class<M> tClass) {
    return new ProtobufWritable<M>(new TypeRef<M>(tClass){});
  }

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockWriter.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockWriter.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter.java;<<<<<<< MINE
=======

  /**
   * Returns a ProtobufConverter for a given Protobuf class.
   */
  public static <M extends Message> ProtobufConverter<M> newInstance(Class<M> protoClass) {
    return new ProtobufConverter<M>(new TypeRef<M>(protoClass){});
  }

  public static <M extends Message> ProtobufConverter<M> newInstance(TypeRef<M> typeRef) {
    return new ProtobufConverter<M>(typeRef);
  }

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/test/com/twitter/elephantbird/util/TestProtobufs.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/test/com/twitter/elephantbird/util/TestProtobufs.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574/src/test/com/twitter/elephantbird/util/TestProtobufs.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b87762a_3125301/rev_b87762a-3125301/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftB64LineOutputFormat.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b87762a_3125301/rev_b87762a-3125301/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftB64LineOutputFormat.java;<<<<<<< MINE
    
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b87762a_3125301/rev_b87762a-3125301/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftB64LineInputFormat.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_27ceb0c_4353485/rev_27ceb0c-4353485/src/java/com/twitter/elephantbird/mapreduce/output/LzoBinaryB64LineRecordWriter.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_27ceb0c_4353485/rev_27ceb0c-4353485/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter.java;<<<<<<< MINE
    
=======

>>>>>>> YOURS
/home/taes/taes/projects/ribbon/revisions/rev_a64b868_6e11c79/rev_a64b868-6e11c79/ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java;<<<<<<< MINE
=======
    
    
    /**
     * Get the default port of the target server given the scheme of vip address if it is available. 
     * Subclass should override it to provider protocol specific default port number if any.
     * 
     * @param scheme from the vip address. null if not present.
     * @return 80 if scheme is http, 443 if scheme is https, -1 else.
     */
    protected int getDefaultPortFromScheme(String scheme) {
        if (scheme == null) {
            return -1;
        }
        if (scheme.equals("http")) {
            return 80;
        } else if (scheme.equals("https")) {
            return 443;
        } else {
            return -1;
        }
    }

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_ed6d50d_1f0c02e/rev_ed6d50d-1f0c02e/src/java/com/twitter/elephantbird/util/Codecs.java;<<<<<<< MINE
        
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_ed6d50d_1f0c02e/rev_ed6d50d-1f0c02e/src/java/com/twitter/elephantbird/util/Codecs.java;<<<<<<< MINE
    
=======

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_f06548b_513c57a/rev_f06548b-513c57a/src/java/com/twitter/elephantbird/pig/load/LzoJsonLoader.java;<<<<<<< MINE
  public LzoJsonLoader() {
    LOG.debug("LzoJsonLoader creation");
  }

  public void skipToNextSyncPoint(boolean atFirstRecord) throws IOException {
    // Since we are not block aligned we throw away the first record of each split and count on a different
    // instance to read it.  The only split this doesn't work for is the first.
    if (!atFirstRecord) {
      getNext();
    }
  }
=======
  public LzoJsonLoader() {}
>>>>>>> YOURS
/home/taes/taes/projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/MultiDexConfig.java;<<<<<<< MINE
=======
    /**
     * dex çååä¸ªæ°ï¼ 0 è¡¨ç¤ºä¸è¿è¡éå¶ï¼ä¸å2æ¬¡merge
     */
    @Config(title = "dexçä¸ªæ°", message = "0è¡¨ç¤ºæ éå¶", order = 1, group = "atlas")
    private int dexCount;

    @Config(title = "dexåéçè§å", message = "a,b;c,d", order = 2, group = "atlas")
    private String dexSplitRules;
>>>>>>> YOURS
/home/taes/taes/projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0/ribbon-httpclient/src/main/java/com/netflix/http4/NFHttpClient.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6/src/java/com/twitter/elephantbird/pig/store/LzoTokenizedStorage.java;<<<<<<< MINE

  /**
   * Put an individual field in the tuple.
   * @param field the object to store.
   */
  @SuppressWarnings("unchecked")
  private String fieldToString(Object field) throws IOException {
    switch (DataType.findType(field)) {
    case DataType.NULL:
      return "";
    case DataType.BYTEARRAY: {
      byte[] b = ((DataByteArray)field).get();
      return String.valueOf(b);
    }
    case DataType.MAP:
      StringBuilder mapBuilder = new StringBuilder();
      boolean mapHasNext = false;
      Map<String, Object> m = (Map<String, Object>)field;
      mapBuilder.append(PigTokenHelper.MAP_BEGIN);
      for(String s: m.keySet()) {
        if(mapHasNext) {
          mapBuilder.append(fieldDel_);
        } else {
          mapHasNext = true;
        }
        mapBuilder.append(fieldToString(s));
        mapBuilder.append(PigTokenHelper.MAP_KV);
        mapBuilder.append(fieldToString(m.get(s)));
      }
      mapBuilder.append(PigTokenHelper.MAP_END);
      return mapBuilder.toString();

    case DataType.TUPLE:
      boolean tupleHasNext = false;
      Tuple t = (Tuple)field;
      StringBuilder tupleBuilder = new StringBuilder();
      tupleBuilder.append(PigTokenHelper.TUPLE_BEGIN);
      for(int i = 0; i < t.size(); ++i) {
        if(tupleHasNext) {
          tupleBuilder.append(fieldDel_);
        } else {
          tupleHasNext = true;
        }
        try {
          tupleBuilder.append(fieldToString(t.get(i)));
        } catch (ExecException ee) {
          throw ee;
        }
      }
      tupleBuilder.append(PigTokenHelper.TUPLE_END);
      return tupleBuilder.toString();

    case DataType.BAG:
      boolean bagHasNext = false;
      StringBuilder bagBuilder = new StringBuilder();
      bagBuilder.append(PigTokenHelper.BAG_BEGIN);
      Iterator<Tuple> tupleIter = ((DataBag)field).iterator();
      while(tupleIter.hasNext()) {
        if(bagHasNext) {
          bagBuilder.append(fieldDel_);
        } else {
          bagHasNext = true;
        }
        bagBuilder.append(fieldToString(tupleIter.next()));
      }
      bagBuilder.append(PigTokenHelper.BAG_END);
      return bagBuilder.toString();

    default:
      return field.toString();
   }
  }

  /**
   * Two LzoTokenizedStorage functions are equal if their delimiters are.
   */
  @Override
  public boolean equals(Object obj) {
    if (obj instanceof LzoTokenizedStorage) {
      LzoTokenizedStorage other = (LzoTokenizedStorage)obj;
      return fieldDel_ == other.fieldDel_;
    }
    return false;
  }

  @SuppressWarnings("rawtypes")
  @Override
  public OutputFormat getOutputFormat() {
      return new TextOutputFormat<WritableComparable, Text>();
  }

=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6/src/java/com/twitter/elephantbird/pig/load/LzoTokenizedLoader.java;<<<<<<< MINE

  /**
   * Break the next line into a delimited set of fields.  Note that this can and
   * does result in tuples with different numbers of fields, which is tracked by
   * a counter.
   */
  @Override
  public Tuple getNext() throws IOException {
    if (reader_ == null) {
      return null;
    }

    try {
      if(!reader_.nextKeyValue()) {
        return null;
      }
    } catch (InterruptedException e) {
      int errCode = 6018;
      String errMsg = "Error while reading input";
      throw new ExecException(errMsg, errCode,
          PigException.REMOTE_ENVIRONMENT, e);
    }

    Tuple t = null;
    buffer_.reset();
    try {
      Text line = (Text)reader_.getCurrentValue();
      if (line != null) {
        String lineStr = line.toString();
        int len = lineStr.length();
        for (int i= 0;i<len;i++) {
          int b = lineStr.charAt(i);
          prevByte_ = (byte)b;
          if (prevByte_ == fieldDel_) {
            readField();
          } else if (prevByte_ == recordDel_) {
            readField();
            t =  tupleFactory_.newTupleNoCopy(protoTuple_);
            protoTuple_ = null;
            break;
          } else if (b == -1) {
            // hit end of file
            break;
          } else {
            buffer_.write(b);
          }
        }
        readField();
        t =  tupleFactory_.newTupleNoCopy(protoTuple_);
        protoTuple_ = null;
      }
    } catch (InterruptedException e) {
      int errCode = 6018;
      String errMsg = "Error while reading input";
      throw new ExecException(errMsg, errCode,
          PigException.REMOTE_ENVIRONMENT, e);
    }

    if (t != null) {
      // Increment the per-tuple-size counters.
      incrCounter(getClass().getName(), getCounterName(t.size()), 1L);
    }

    return t;
  }




  public Tuple getSampledTuple() throws IOException {
    if(prevByte_ == null || prevByte_ == recordDel_) {
      // prevByte = null when this is called for the first time, in that case bindTo would have already
      // called getNext() if it was required.
      return getNext();
    } else {
      // We are in middle of record. So, we skip this and return the next one.
      getNext();
      return getNext();
    }
  }

  /**
   * Construct a field from the input buffer, which at this point should be
   * pointing at a single token.
   */
  private void readField() {
    if (protoTuple_ == null) {
      protoTuple_ = new ArrayList<Object>();
    }

    if (buffer_.size() == 0) {
      // NULL value
      protoTuple_.add(null);
    } else {
      byte[] array = buffer_.toByteArray();

      if (array.length == 0) {
        protoTuple_.add(null);
      } else {
        protoTuple_.add(new DataByteArray(array));
      }
    }
    buffer_.reset();
  }

  /**
   * An internal helper function to get a counter name.
   * @param i the number of fields
   */
  private String getCounterName(Integer i) {
    return "Tuples with " + i + " fields";
  }

  /**
   * LzoTokenizedLoaders are determined by their field delimiter.
   */
  @Override
  public boolean equals(Object obj) {
    if (obj instanceof LzoTokenizedLoader) {
      LzoTokenizedLoader other = (LzoTokenizedLoader)obj;
      return fieldDel_ == other.fieldDel_;
    }
    return false;
  }

  @Override
  public InputFormat getInputFormat() {
    return new LzoTextInputFormat();
  }

=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6/src/java/com/twitter/elephantbird/pig/load/LzoTextLoader.java;<<<<<<< MINE

  /**
   * Return every non-null line as a single-element tuple to Pig.
   */
  @Override
  public Tuple getNext() throws IOException {
	  if (reader_ == null) {
		  return null;
	  }
	  Tuple t = null;
	  try {
	    if ( reader_.nextKeyValue()) {
	      Object line = reader_.getCurrentValue();
	      if (line != null) {
	        incrCounter(LzoTextLoaderCounters.LinesRead, 1L);
	        t = tupleFactory_.newTuple(new DataByteArray(line.toString().getBytes()));
	      }
	    }
	  } catch (InterruptedException e) {
		  int errCode = 6018;
		  String errMsg = "Error while reading input";
		  throw new ExecException(errMsg, errCode,
				  PigException.REMOTE_ENVIRONMENT, e);
	  }
	  return t;
  }

  @Override
  public InputFormat getInputFormat() {
	  return new LzoTextInputFormat();
  }

=======
>>>>>>> YOURS
/home/taes/taes/projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/diff/DiffResExtractor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/taes/taes/projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/diff/DiffResExtractor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/taes/taes/projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/diff/DiffResExtractor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/taes/taes/projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c/ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java;<<<<<<< MINE

    protected String clientName = "default";          
    
    protected String vipAddresses;
    
    protected int maxAutoRetriesNextServer = DefaultClientConfigImpl.DEFAULT_MAX_AUTO_RETRIES_NEXT_SERVER;
    protected int maxAutoRetries = DefaultClientConfigImpl.DEFAULT_MAX_AUTO_RETRIES;


    boolean okToRetryOnAllOperations = DefaultClientConfigImpl.DEFAULT_OK_TO_RETRY_ON_ALL_OPERATIONS.booleanValue();
        
    private ILoadBalancer lb;
    protected volatile Timer tracer;

    
    public AbstractLoadBalancerAwareClient() {  
    }
=======
>>>>>>> YOURS
/home/taes/taes/projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c/ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java;<<<<<<< MINE
    private boolean isPresentAsCause(Throwable throwableToSearchIn,
            Class<? extends Throwable> throwableToSearchFor) {
        return isPresentAsCauseHelper(throwableToSearchIn, throwableToSearchFor) != null;
    }

    private Throwable isPresentAsCauseHelper(Throwable throwableToSearchIn,
            Class<? extends Throwable> throwableToSearchFor) {
        int infiniteLoopPreventionCounter = 10;
        while (throwableToSearchIn != null && infiniteLoopPreventionCounter > 0) {
            infiniteLoopPreventionCounter--;
            if (throwableToSearchIn.getClass().isAssignableFrom(
                    throwableToSearchFor)) {
                return throwableToSearchIn;
            } else {
                throwableToSearchIn = throwableToSearchIn.getCause();
            }
        }
        return null;
    }

    protected ClientException generateNIWSException(String uri, Throwable e){
        ClientException niwsClientException;
        if (isPresentAsCause(e, java.net.SocketTimeoutException.class)) {
            niwsClientException = generateTimeoutNIWSException(uri, e);
        }else if (e.getCause() instanceof java.net.UnknownHostException){
            niwsClientException = new ClientException(
                    ClientException.ErrorType.UNKNOWN_HOST_EXCEPTION,
                    "Unable to execute RestClient request for URI:" + uri,
                    e);
        }else if (e.getCause() instanceof java.net.ConnectException){
            niwsClientException = new ClientException(
                    ClientException.ErrorType.CONNECT_EXCEPTION,
                    "Unable to execute RestClient request for URI:" + uri,
                    e);
        }else if (e.getCause() instanceof java.net.NoRouteToHostException){
            niwsClientException = new ClientException(
                    ClientException.ErrorType.NO_ROUTE_TO_HOST_EXCEPTION,
                    "Unable to execute RestClient request for URI:" + uri,
                    e);
        }else if (e instanceof ClientException){
            niwsClientException = (ClientException)e;
        }else {
            niwsClientException = new ClientException(
                ClientException.ErrorType.GENERAL,
                "Unable to execute RestClient request for URI:" + uri,
                e);
        }
        return niwsClientException;
    }

    private boolean isPresentAsCause(Throwable throwableToSearchIn,
            Class<? extends Throwable> throwableToSearchFor, String messageSubStringToSearchFor) {
        Throwable throwableFound = isPresentAsCauseHelper(throwableToSearchIn, throwableToSearchFor);
        if(throwableFound != null) {
            return throwableFound.getMessage().contains(messageSubStringToSearchFor);
        }
        return false;
    }
    private ClientException generateTimeoutNIWSException(String uri, Throwable e){
        ClientException niwsClientException;
        if (isPresentAsCause(e, java.net.SocketTimeoutException.class,
                "Read timed out")) {
            niwsClientException = new ClientException(
                    ClientException.ErrorType.READ_TIMEOUT_EXCEPTION,
                    "Unable to execute RestClient request for URI:" + uri + ":"
                            + getDeepestCause(e).getMessage(), e);
        } else {
            niwsClientException = new ClientException(
                    ClientException.ErrorType.SOCKET_TIMEOUT_EXCEPTION,
                    "Unable to execute RestClient request for URI:" + uri + ":"
                            + getDeepestCause(e).getMessage(), e);
        }
        return niwsClientException;
    }

    protected int handleRetry(String uri, int retries, int numRetries,
            Exception e) throws ClientException {
        retries++;

        if (retries > numRetries) {
            throw new ClientException(ClientException.ErrorType.NUMBEROF_RETRIES_EXEEDED,
                    "NUMBEROFRETRIESEXEEDED :" + numRetries + " retries, while making a RestClient call for:" + uri,
                    e !=null? e: new RuntimeException());
        }
        logger.error("Exception while executing request which is deemed retry-able, retrying ..., SAME Server Retry Attempt#:" +
                retries +
                ", URI:" +
                uri);
        try {
            Thread.sleep((int) Math.pow(2.0, retries) * 100); 
        } catch (InterruptedException ex) {
        }
        return retries;
    }

    /**
     * This is called after a response is received or an exception is thrown from the {@link #execute(ClientRequest)}
     * to update related stats.  
     */
    protected void noteRequestCompletion(ServerStats stats, S task, IResponse response, Throwable e, long responseTime) {        
        try {
            if (stats != null) {
                stats.decrementActiveRequestsCount();
                stats.incrementNumRequests();
                stats.noteResponseTime(responseTime);
                if (response != null) {
                    stats.clearSuccessiveConnectionFailureCount();                    
                }
            }            
        } catch (Throwable ex) {
            logger.error("Unexpected exception", ex);
        }            
    }
       
    /**
     * Called just before {@link #execute(ClientRequest)} call.
     */
    protected void noteOpenConnection(ServerStats serverStats, S task) {
        if (serverStats == null) {
            return;
        }
        try {
            serverStats.incrementActiveRequestsCount();
        } catch (Throwable e) {
            logger.info("Unable to note Server Stats:", e);
        }
    }

=======
>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336/src/java/com/twitter/elephantbird/pig/load/LzoBaseLoadFunc.java;<<<<<<< MINE
=======
  /** UDF properties for this class based on context signature */
  protected Properties getUDFProperties() {
    return UDFContext.getUDFContext()
        .getUDFProperties(this.getClass(), new String[] {contextSignature});
  }

  @Override
  public void setUDFContextSignature(String signature) {
    this.contextSignature = signature;
  }

>>>>>>> YOURS
/home/taes/taes/projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336/src/java/com/twitter/elephantbird/pig/load/LzoBaseLoadFunc.java;<<<<<<< MINE
  // LoadPushDown implementation:

  @Override
  public List<OperatorSet> getFeatures() {
    return Arrays.asList(LoadPushDown.OperatorSet.PROJECTION);
  }

  @Override
  public RequiredFieldResponse pushProjection(
      RequiredFieldList requiredFieldList) throws FrontendException {
    // the default implementation disables the feature.
    // a projection needs to be explicitly supported by sub classes.
    return null;
  }

  /**
   * A helper method for implementing
   * {@link LoadPushDown#pushProjection(RequiredFieldList)}. <p>
   *
   * Stores requiredFieldList in context. The requiredFields are read from
   * context on the backend inside {@link #setLocation(String, Job)}.
   */
  protected RequiredFieldResponse pushProjectionHelper(
                                          RequiredFieldList requiredFieldList)
                                          throws FrontendException {
    try {
      getUDFProperties().setProperty(
                          contextSignature + projectionSuffix,
                          ObjectSerializer.serialize(requiredFieldList));
    } catch (IOException e) { // not expected
      throw new FrontendException(e);
    }

    return new RequiredFieldResponse(true);
  }

=======
  // LoadPushDown implementation:

  @Override
  public List<OperatorSet> getFeatures() {
    return Arrays.asList(LoadPushDown.OperatorSet.PROJECTION);
  }

  @Override
  public RequiredFieldResponse pushProjection(
      RequiredFieldList requiredFieldList) throws FrontendException {
    // the default implementation disables the feature.
    // a projection needs to be explicitly supported by sub classes.
    return null;
  }

  /**
   * A helper method for implementing
   * {@link LoadPushDown#pushProjection(RequiredFieldList)}. <p>
   *
   * Stores requiredFieldList in context. The requiredFields are read from
   * context on the backend (in side {@link #setLocation(String, Job)}).
   */
  protected RequiredFieldResponse pushProjectionHelper(
                                          RequiredFieldList requiredFieldList)
                                          throws FrontendException {
    try {
      getUDFProperties().setProperty(projectionKey,
                                     ObjectSerializer.serialize(requiredFieldList));
    } catch (IOException e) { // not expected
      throw new FrontendException(e);
    }

    return new RequiredFieldResponse(true);
  }

>>>>>>> YOURS
/home/taes/taes/projects/retrofit/revisions/rev_2ef7ca0_941ae85/rev_2ef7ca0-941ae85/retrofit/src/main/java/retrofit/http/Headers.java;<<<<<<< MINE
=======
// Copyright 2013 Square, Inc.
package retrofit.http;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

/**
 * Adds headers literally supplied in the {@code value}.
 *
 * <p/>
 * ex.
 *
 * <pre>
 * @Headers("Cache-Control: max-age=640000")
 * @GET("/")
 * ...
 *
 * @Headers({
 *   "X-Foo: Bar",
 *   "X-Ping: Pong"
 * })
 * @GET("/")
 * ...
 * </pre>
 *
 * @author Adrian Cole (adrianc@netflix.com)
 */
@Target(METHOD) @Retention(RUNTIME)
public @interface Headers {
  String[] value();
}>>>>>>> YOURS
/home/taes/taes/projects/retrofit/revisions/rev_2ef7ca0_941ae85/rev_2ef7ca0-941ae85/retrofit/src/main/java/retrofit/http/Header.java;<<<<<<< MINE
=======
// Copyright 2013 Square, Inc.
package retrofit.http;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

/**
 * Replaces the header with the the value of its target. If the target is null,
 * the header is removed.
 *
 * <p/>
 * ex.
 *
 * <pre>
 * @GET("/")
 * void foo(@Header("Auth-Token") String token, ..);
 * </pre>
 *
 * @author Adrian Cole (adrianc@netflix.com)
 */
@Retention(RUNTIME) @Target(PARAMETER)
public @interface Header {
  String value();
}>>>>>>> YOURS
