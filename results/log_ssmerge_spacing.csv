revision;file;methodsignature;leftbody;basebody;rightbody
/home/taes/taes//projects/jodd/revisions/rev_7d88093_1943bcf/rev_7d88093-1943bcf;/jodd-madvoc/src/testInt/java/jodd/madvoc/MyWebApplication2;MyWebApplication2();;;public MyWebApplication2() {
		LoggerFactory.setLoggerFactory(new SimpleLoggerFactory(Logger.Level.DEBUG));
	}
/home/taes/taes//projects/atlas/revisions/rev_c2e9822_9b24b0d/rev_c2e9822-9b24b0d;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/manifest/PostProcessManifestTask;execute(PostProcessManifestTask);            postProcessManifestsTask.bunldeBaseInfoFile = new File(variantContext.getScope()
                                                                       .getGlobalScope()
                                                                       .getProject()
                                                                       .getProjectDir(),;            postProcessManifestsTask.bunldeBaseInfoFile = new File(variantContext.getScope()
                                                                           .getGlobalScope()
                                                                           .getProject()
                                                                           .getProjectDir(),;            postProcessManifestsTask.bundleBaseInfoFile = new File(variantContext.getScope()
                                                                           .getGlobalScope()
                                                                           .getProject()
                                                                           .getProjectDir(),
/home/taes/taes//projects/jodd/revisions/rev_b308375_38b60c8/rev_b308375-38b60c8;/jodd-http/src/main/java/jodd/http/HttpBrowser;readCookies(HttpResponse);;;
/home/taes/taes//projects/jodd/revisions/rev_b308375_38b60c8/rev_b308375-38b60c8;/jodd-http/src/main/java/jodd/http/HttpBrowser;addCookies(HttpRequest);;;                
			    Integer maxAge = cookie.getMaxAge();
				if (maxAge != null && maxAge.intValue() == 0) {
				    continue;
				}
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/java/com/twitter/elephantbird/examples/ThriftMRExample;ThriftMRExample();;;private ThriftMRExample() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/java/com/twitter/elephantbird/examples/ThriftMRExample;map(LongWritable,Text,Context);;;@Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
      StringTokenizer line = new StringTokenizer(value.toString(), "\t\r\n");
      if (line.hasMoreTokens()
          && age.setName(line.nextToken()) != null
          && line.hasMoreTokens()
          && age.setAge(Integer.parseInt(line.nextToken())) != null) {
          tWritable.set(age);
          context.write(null, tWritable);
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/java/com/twitter/elephantbird/examples/ThriftMRExample;runTextToLzo(String[],Configuration);;;public int runTextToLzo(String[] args, Configuration conf) throws Exception {
    Job job = new Job(conf);
    job.setJobName("Thrift Example : Text to LzoB64Line");

    job.setJarByClass(getClass());
    job.setMapperClass(TextMapper.class);
    job.setNumReduceTasks(0);
    
    job.setInputFormatClass(TextInputFormat.class);
    if (conf.get("thrift.test.format", "B64Line").equals("Block")) {
      job.setOutputFormatClass(LzoThriftBlockOutputFormat.getOutputFormatClass(Age.class, job.getConfiguration()));
    } else { // assume B64Line
      job.setOutputFormatClass(LzoThriftB64LineOutputFormat.getOutputFormatClass(Age.class, job.getConfiguration()));
    }

    FileInputFormat.setInputPaths(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));

    return job.waitForCompletion(true) ? 0 : 1;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/java/com/twitter/elephantbird/examples/ThriftMRExample;map(LongWritable,ThriftWritable<Age>,Context);;;@Override
    protected void map(LongWritable key, ThriftWritable<Age> value, Context context) throws IOException, InterruptedException {
      Age age = value.get();
      context.write(null, new Text(age.getName() + "\t" + age.getAge()));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/java/com/twitter/elephantbird/examples/ThriftMRExample;runLzoToText(String[],Configuration);;;public int runLzoToText(String[] args, Configuration conf) throws Exception {
    Job job = new Job(conf);
    job.setJobName("Thrift Example : LzoB64Line to Text");

    job.setJarByClass(getClass());
    job.setMapperClass(LzoMapper.class);
    job.setNumReduceTasks(0);
    
    if (conf.get("thrift.test.format", "B64Line").equals("Block")) {
      job.setInputFormatClass(LzoThriftBlockInputFormat.getInputFormatClass(Age.class, job.getConfiguration()));
    } else {
      job.setInputFormatClass(LzoThriftB64LineInputFormat.getInputFormatClass(Age.class, job.getConfiguration()));      
    }
    job.setOutputFormatClass(TextOutputFormat.class);

    FileInputFormat.setInputPaths(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));

    return job.waitForCompletion(true) ? 0 : 1;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/java/com/twitter/elephantbird/examples/ThriftMRExample;main(String[]);;;public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    args = new GenericOptionsParser(conf, args).getRemainingArgs();
    ThriftMRExample runner = new ThriftMRExample();
    
    if (args.length != 2) {
      System.out.println("Usage: hadoop jar path/to/this.jar " + runner.getClass() + " <input dir> <output dir>");
      System.exit(1);
    }
    
    String test = conf.get("thrift.test", "lzoIn");
    
    if (test.equals("lzoIn"))
      System.exit(runner.runLzoToText(args, conf));
    if (test.equals("lzoOut"))
      System.exit(runner.runTextToLzo(args, conf));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/mapreduce/io/ProtobufPersonWritable;ProtobufPersonWritable(Person);;;public ProtobufPersonWritable(Person m) {
    super(m, new TypeRef<Person>(){});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/mapreduce/io/ProtobufAddressBookWritable;ProtobufAddressBookWritable(AddressBook);;;public ProtobufAddressBookWritable(AddressBook m) {
    super(m, new TypeRef<AddressBook>(){});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;AddressBook();;;public AddressBook() {
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;AddressBook(List<Person>);;;public AddressBook(
    List<Person> persons)
  {
    this();
    this.persons = persons;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;AddressBook(AddressBook);;;public AddressBook(AddressBook other) {
    if (other.isSetPersons()) {
      List<Person> __this__persons = new ArrayList<Person>();
      for (Person other_element : other.persons) {
        __this__persons.add(new Person(other_element));
      }
      this.persons = __this__persons;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;deepCopy();;;public AddressBook deepCopy() {
    return new AddressBook(this);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;clone();;;@Deprecated
  public AddressBook clone() {
    return new AddressBook(this);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;getPersonsSize();;;public int getPersonsSize() {
    return (this.persons == null) ? 0 : this.persons.size();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;getPersonsIterator();;;public java.util.Iterator<Person> getPersonsIterator() {
    return (this.persons == null) ? null : this.persons.iterator();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;addToPersons(Person);;;public void addToPersons(Person elem) {
    if (this.persons == null) {
      this.persons = new ArrayList<Person>();
    }
    this.persons.add(elem);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;getPersons();;;public List<Person> getPersons() {
    return this.persons;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;setPersons(List<Person>);;;public AddressBook setPersons(List<Person> persons) {
    this.persons = persons;
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;unsetPersons();;;public void unsetPersons() {
    this.persons = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;isSetPersons();;;public boolean isSetPersons() {
    return this.persons != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;setPersonsIsSet(boolean);;;public void setPersonsIsSet(boolean value) {
    if (!value) {
      this.persons = null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PERSONS:
      if (value == null) {
        unsetPersons();
      } else {
        setPersons((List<Person>)value);
      }
      break;

    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;setFieldValue(int,Object);;;public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    case PERSONS:
      return getPersons();

    }
    throw new IllegalStateException();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;getFieldValue(int);;;public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;isSet(_Fields);;;public boolean isSet(_Fields field) {
    switch (field) {
    case PERSONS:
      return isSetPersons();
    }
    throw new IllegalStateException();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;isSet(int);;;public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddressBook)
      return this.equals((AddressBook)that);
    return false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;equals(AddressBook);;;public boolean equals(AddressBook that) {
    if (that == null)
      return false;

    boolean this_present_persons = true && this.isSetPersons();
    boolean that_present_persons = true && that.isSetPersons();
    if (this_present_persons || that_present_persons) {
      if (!(this_present_persons && that_present_persons))
        return false;
      if (!this.persons.equals(that.persons))
        return false;
    }

    return true;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;hashCode();;;@Override
  public int hashCode() {
    return 0;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;compareTo(AddressBook);;;public int compareTo(AddressBook other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AddressBook typedOther = (AddressBook)other;

    lastComparison = Boolean.valueOf(isSetPersons()).compareTo(isSetPersons());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(persons, typedOther.persons);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;read(TProtocol);;;public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case PERSONS:
            if (field.type == TType.LIST) {
              {
                TList _list4 = iprot.readListBegin();
                this.persons = new ArrayList<Person>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  Person _elem6;
                  _elem6 = new Person();
                  _elem6.read(iprot);
                  this.persons.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;write(TProtocol);;;public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.persons != null) {
      oprot.writeFieldBegin(PERSONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.persons.size()));
        for (Person _iter7 : this.persons)
        {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddressBook(");
    boolean first = true;

    sb.append("persons:");
    if (this.persons == null) {
      sb.append("null");
    } else {
      sb.append(this.persons);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/AddressBook;validate();;;public void validate() throws TException {
    // check for required fields
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneType;PhoneType(int);;;private PhoneType(int value) {
    this.value = value;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneType;getValue();;;public int getValue() {
    return value;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneType;findByValue(int);;;public static PhoneType findByValue(int value) { 
    return BY_VALUE.get(value);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;Age();;;public Age() {
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;Age(String,int);;;public Age(
    String name,
    int age)
  {
    this();
    this.name = name;
    this.age = age;
    setAgeIsSet(true);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;Age(Age);;;public Age(Age other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.age = other.age;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;deepCopy();;;public Age deepCopy() {
    return new Age(this);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;clone();;;@Deprecated
  public Age clone() {
    return new Age(this);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;getName();;;public String getName() {
    return this.name;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;setName(String);;;public Age setName(String name) {
    this.name = name;
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;unsetName();;;public void unsetName() {
    this.name = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;isSetName();;;public boolean isSetName() {
    return this.name != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;setNameIsSet(boolean);;;public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;getAge();;;public int getAge() {
    return this.age;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;setAge(int);;;public Age setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;unsetAge();;;public void unsetAge() {
    __isset_bit_vector.clear(__AGE_ISSET_ID);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;isSetAge();;;public boolean isSetAge() {
    return __isset_bit_vector.get(__AGE_ISSET_ID);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;setAgeIsSet(boolean);;;public void setAgeIsSet(boolean value) {
    __isset_bit_vector.set(__AGE_ISSET_ID, value);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;setFieldValue(int,Object);;;public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case AGE:
      return new Integer(getAge());

    }
    throw new IllegalStateException();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;getFieldValue(int);;;public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;isSet(_Fields);;;public boolean isSet(_Fields field) {
    switch (field) {
    case NAME:
      return isSetName();
    case AGE:
      return isSetAge();
    }
    throw new IllegalStateException();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;isSet(int);;;public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Age)
      return this.equals((Age)that);
    return false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;equals(Age);;;public boolean equals(Age that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    return true;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;hashCode();;;@Override
  public int hashCode() {
    return 0;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;compareTo(Age);;;public int compareTo(Age other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Age typedOther = (Age)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(name, typedOther.name);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(age, typedOther.age);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;read(TProtocol);;;public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case AGE:
            if (field.type == TType.I32) {
              this.age = iprot.readI32();
              setAgeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;write(TProtocol);;;public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(AGE_FIELD_DESC);
    oprot.writeI32(this.age);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Age(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    sb.append(")");
    return sb.toString();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Age;validate();;;public void validate() throws TException {
    // check for required fields
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;Person();;;public Person() {
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;Person(String,int,String,List<PhoneNumber>);;;public Person(
    String name,
    int id,
    String email,
    List<PhoneNumber> phones)
  {
    this();
    this.name = name;
    this.id = id;
    setIdIsSet(true);
    this.email = email;
    this.phones = phones;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;Person(Person);;;public Person(Person other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.id = other.id;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPhones()) {
      List<PhoneNumber> __this__phones = new ArrayList<PhoneNumber>();
      for (PhoneNumber other_element : other.phones) {
        __this__phones.add(new PhoneNumber(other_element));
      }
      this.phones = __this__phones;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;deepCopy();;;public Person deepCopy() {
    return new Person(this);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;clone();;;@Deprecated
  public Person clone() {
    return new Person(this);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getName();;;public String getName() {
    return this.name;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setName(String);;;public Person setName(String name) {
    this.name = name;
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;unsetName();;;public void unsetName() {
    this.name = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;isSetName();;;public boolean isSetName() {
    return this.name != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setNameIsSet(boolean);;;public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getId();;;public int getId() {
    return this.id;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setId(int);;;public Person setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;unsetId();;;public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;isSetId();;;public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setIdIsSet(boolean);;;public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getEmail();;;public String getEmail() {
    return this.email;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setEmail(String);;;public Person setEmail(String email) {
    this.email = email;
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;unsetEmail();;;public void unsetEmail() {
    this.email = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;isSetEmail();;;public boolean isSetEmail() {
    return this.email != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setEmailIsSet(boolean);;;public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getPhonesSize();;;public int getPhonesSize() {
    return (this.phones == null) ? 0 : this.phones.size();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getPhonesIterator();;;public java.util.Iterator<PhoneNumber> getPhonesIterator() {
    return (this.phones == null) ? null : this.phones.iterator();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;addToPhones(PhoneNumber);;;public void addToPhones(PhoneNumber elem) {
    if (this.phones == null) {
      this.phones = new ArrayList<PhoneNumber>();
    }
    this.phones.add(elem);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getPhones();;;public List<PhoneNumber> getPhones() {
    return this.phones;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setPhones(List<PhoneNumber>);;;public Person setPhones(List<PhoneNumber> phones) {
    this.phones = phones;
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;unsetPhones();;;public void unsetPhones() {
    this.phones = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;isSetPhones();;;public boolean isSetPhones() {
    return this.phones != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setPhonesIsSet(boolean);;;public void setPhonesIsSet(boolean value) {
    if (!value) {
      this.phones = null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case PHONES:
      if (value == null) {
        unsetPhones();
      } else {
        setPhones((List<PhoneNumber>)value);
      }
      break;

    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;setFieldValue(int,Object);;;public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case ID:
      return new Integer(getId());

    case EMAIL:
      return getEmail();

    case PHONES:
      return getPhones();

    }
    throw new IllegalStateException();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;getFieldValue(int);;;public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;isSet(_Fields);;;public boolean isSet(_Fields field) {
    switch (field) {
    case NAME:
      return isSetName();
    case ID:
      return isSetId();
    case EMAIL:
      return isSetEmail();
    case PHONES:
      return isSetPhones();
    }
    throw new IllegalStateException();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;isSet(int);;;public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Person)
      return this.equals((Person)that);
    return false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;equals(Person);;;public boolean equals(Person that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_phones = true && this.isSetPhones();
    boolean that_present_phones = true && that.isSetPhones();
    if (this_present_phones || that_present_phones) {
      if (!(this_present_phones && that_present_phones))
        return false;
      if (!this.phones.equals(that.phones))
        return false;
    }

    return true;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;hashCode();;;@Override
  public int hashCode() {
    return 0;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;compareTo(Person);;;public int compareTo(Person other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Person typedOther = (Person)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(name, typedOther.name);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(id, typedOther.id);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(email, typedOther.email);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPhones()).compareTo(isSetPhones());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(phones, typedOther.phones);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;read(TProtocol);;;public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ID:
            if (field.type == TType.I32) {
              this.id = iprot.readI32();
              setIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EMAIL:
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PHONES:
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.phones = new ArrayList<PhoneNumber>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  PhoneNumber _elem2;
                  _elem2 = new PhoneNumber();
                  _elem2.read(iprot);
                  this.phones.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;write(TProtocol);;;public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI32(this.id);
    oprot.writeFieldEnd();
    if (this.email != null) {
      oprot.writeFieldBegin(EMAIL_FIELD_DESC);
      oprot.writeString(this.email);
      oprot.writeFieldEnd();
    }
    if (this.phones != null) {
      oprot.writeFieldBegin(PHONES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.phones.size()));
        for (PhoneNumber _iter3 : this.phones)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Person(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phones:");
    if (this.phones == null) {
      sb.append("null");
    } else {
      sb.append(this.phones);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/Person;validate();;;public void validate() throws TException {
    // check for required fields
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;PhoneNumber();;;public PhoneNumber() {
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;PhoneNumber(String);;;public PhoneNumber(
    String number)
  {
    this();
    this.number = number;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;PhoneNumber(PhoneNumber);;;public PhoneNumber(PhoneNumber other) {
    if (other.isSetNumber()) {
      this.number = other.number;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;deepCopy();;;public PhoneNumber deepCopy() {
    return new PhoneNumber(this);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;clone();;;@Deprecated
  public PhoneNumber clone() {
    return new PhoneNumber(this);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;getNumber();;;public String getNumber() {
    return this.number;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;setNumber(String);;;public PhoneNumber setNumber(String number) {
    this.number = number;
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;unsetNumber();;;public void unsetNumber() {
    this.number = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;isSetNumber();;;public boolean isSetNumber() {
    return this.number != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;setNumberIsSet(boolean);;;public void setNumberIsSet(boolean value) {
    if (!value) {
      this.number = null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;getType();;;public PhoneType getType() {
    return this.type;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;setType(PhoneType);;;public PhoneNumber setType(PhoneType type) {
    this.type = type;
    return this;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;unsetType();;;public void unsetType() {
    this.type = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;isSetType();;;public boolean isSetType() {
    return this.type != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;setTypeIsSet(boolean);;;public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((PhoneType)value);
      }
      break;

    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;setFieldValue(int,Object);;;public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER:
      return getNumber();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;getFieldValue(int);;;public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;isSet(_Fields);;;public boolean isSet(_Fields field) {
    switch (field) {
    case NUMBER:
      return isSetNumber();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;isSet(int);;;public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PhoneNumber)
      return this.equals((PhoneNumber)that);
    return false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;equals(PhoneNumber);;;public boolean equals(PhoneNumber that) {
    if (that == null)
      return false;

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (!this.number.equals(that.number))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;hashCode();;;@Override
  public int hashCode() {
    return 0;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;compareTo(PhoneNumber);;;public int compareTo(PhoneNumber other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PhoneNumber typedOther = (PhoneNumber)other;

    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(number, typedOther.number);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(type, typedOther.type);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;read(TProtocol);;;public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case NUMBER:
            if (field.type == TType.STRING) {
              this.number = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case TYPE:
            if (field.type == TType.I32) {
              this.type = PhoneType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;write(TProtocol);;;public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.number != null) {
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeString(this.number);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      if (isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(this.type.getValue());
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PhoneNumber(");
    boolean first = true;

    sb.append("number:");
    if (this.number == null) {
      sb.append("null");
    } else {
      sb.append(this.number);
    }
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        String type_name = type.name();
        if (type_name != null) {
          sb.append(type_name);
          sb.append(" (");
        }
        sb.append(this.type);
        if (type_name != null) {
          sb.append(")");
        }
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/examples/src/gen-java/com/twitter/elephantbird/examples/thrift/PhoneNumber;validate();;;public void validate() throws TException {
    // check for required fields
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/HadoopUtils;getCounter(JobContext,String,String);;;public static Counter getCounter(JobContext ctx, String group, String counter) {
    if (ctx instanceof TaskInputOutputContext<?, ?, ?, ?>) {
      return ((TaskInputOutputContext<?, ?, ?, ?>)ctx).getCounter(group, counter);
    }
    String name = group + ":" + counter;
    LOG.warn("Context is not a TaskInputOutputContext. "
        + "will return a dummy counter for '" + name + "'");
    return new Counter(name, name) {};
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/ThriftUtils;setClassConf(Configuration,Class<?>,Class<?extendsTBase<?>>);;;public static void setClassConf(Configuration jobConf, Class<?> genericClass,
                                  Class<? extends TBase<?>> thriftClass) {
    jobConf.set(CLASS_CONF_PREFIX + genericClass.getName(), thriftClass.getName());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/ThriftUtils;verifyAncestry(Class<?>);;;private static void verifyAncestry(Class<?> tClass) {
    if (!TBase.class.isAssignableFrom(tClass)) {
      throw new ClassCastException(tClass.getName() + " is not a Thrift class");
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/ThriftUtils;getTypeRef(Configuration,Class<?>);;;public static<M extends TBase<?>> TypeRef<M> getTypeRef(Configuration jobConf, Class<?> genericClass) {
    String className = jobConf.get(CLASS_CONF_PREFIX + genericClass.getName());
    if (className == null) {
      throw new RuntimeException(CLASS_CONF_PREFIX + genericClass.getName() + " is not set");
    }

    Class<?> tClass = null;
    try {
      tClass = jobConf.getClassByName(className);
    } catch (ClassNotFoundException e) {
      throw new RuntimeException(e);
    }

    verifyAncestry(tClass);

    return new TypeRef<M>(tClass){};
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/ThriftUtils;getTypeRef(String);;;public static<M extends TBase<?>> TypeRef<M> getTypeRef(String thriftClassName) {
    try {
      Class<?> tClass = Class.forName(thriftClassName);
      verifyAncestry(tClass);

      return new TypeRef<M>(tClass){};
    } catch (ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/ThriftUtils;getFieldValue(Object,String,Class<M>);;;public static <M> M getFieldValue(Object containingObject, String fieldName, Class<M> fieldClass) {
    return getFieldValue(containingObject.getClass(), containingObject, fieldName, fieldClass);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/ThriftUtils;getFieldValue(Class<?>,String,Class<M>);;;public static <M> M getFieldValue(Class<?> containingClass, String fieldName, Class<M> fieldClass) {
    return getFieldValue(containingClass, null, fieldName, fieldClass);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/ThriftUtils;getFieldValue(Class<?>,Object,String,Class<M>);;;private static <M> M getFieldValue(Class<?> containingClass, Object obj, String fieldName, Class<M> fieldClass) {
    try {
      Field field = containingClass.getDeclaredField(fieldName);
      return fieldClass.cast(field.get(obj));
    } catch (Exception e) {
      throw new RuntimeException("while trying to find " + fieldName + " in "
                                  +  containingClass.getName(), e);
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/util/Protobufs;getProtoConverter(Class<M>);;;    //XXX Remove this.
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftBlockOutputFormat;LzoThriftBlockOutputFormat();;;public LzoThriftBlockOutputFormat() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftBlockOutputFormat;getOutputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends TBase<?>> Class<LzoThriftBlockOutputFormat>
     getOutputFormatClass(Class<M> thriftClass, Configuration jobConf) {
    
    ThriftUtils.setClassConf(jobConf, LzoThriftBlockOutputFormat.class, thriftClass);
    return LzoThriftBlockOutputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftBlockOutputFormat;getRecordWriter(TaskAttemptContext);;;public RecordWriter<NullWritable, ThriftWritable<M>> getRecordWriter(TaskAttemptContext job)
      throws IOException, InterruptedException {
    
    TypeRef<M> typeRef = ThriftUtils.getTypeRef(job.getConfiguration(), LzoThriftBlockOutputFormat.class);  
    return new LzoBinaryBlockRecordWriter<M, ThriftWritable<M>>(
        new ThriftBlockWriter<M>(getOutputStream(job), typeRef.getRawClass()));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoBinaryBlockRecordWriter;LzoBinaryBlockRecordWriter(BinaryBlockWriter<M>);;;public LzoBinaryBlockRecordWriter(BinaryBlockWriter<M> writer) {
    writer_ = writer;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoBinaryBlockRecordWriter;write(NullWritable,W);;;public void write(NullWritable nullWritable, W protoWritable)
      throws IOException, InterruptedException {
    writer_.write(protoWritable.get());
    // the counters are not accessible
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoBinaryBlockRecordWriter;close(TaskAttemptContext);;;public void close(TaskAttemptContext taskAttemptContext)
      throws IOException, InterruptedException {
    writer_.finish();
    writer_.close();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoBinaryB64LineRecordWriter;LzoBinaryB64LineRecordWriter(BinaryConverter<M>,DataOutputStream);;;public LzoBinaryB64LineRecordWriter(BinaryConverter<M> converter, DataOutputStream out) {
    protoConverter_ = converter;
    out_ = out;
    base64_ = new Base64();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoBinaryB64LineRecordWriter;write(NullWritable,W);;;public void write(NullWritable nullWritable, W protobufWritable)
      throws IOException, InterruptedException {
    byte[] b64Bytes = base64_.encode(protoConverter_.toBytes(protobufWritable.get()));
    out_.write(b64Bytes);
    out_.write("\n".getBytes("UTF-8"));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoBinaryB64LineRecordWriter;close(TaskAttemptContext);;;public void close(TaskAttemptContext taskAttemptContext)
      throws IOException, InterruptedException {
    out_.close();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftB64LineOutputFormat;LzoThriftB64LineOutputFormat();;;public LzoThriftB64LineOutputFormat() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftB64LineOutputFormat;getOutputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends TBase<?>> Class<LzoThriftB64LineOutputFormat>
     getOutputFormatClass(Class<M> thriftClass, Configuration jobConf) {
    
    ThriftUtils.setClassConf(jobConf, LzoThriftB64LineOutputFormat.class, thriftClass);
    return LzoThriftB64LineOutputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoOutputFormat;getOutputStream(TaskAttemptContext);;;protected DataOutputStream getOutputStream(TaskAttemptContext job)
                  throws IOException, InterruptedException {
    Configuration conf = job.getConfiguration();
    LzopCodec codec = new LzopCodec();
    codec.setConf(conf);

    Path file = getDefaultWorkFile(job, codec.getDefaultExtension());
    FileSystem fs = file.getFileSystem(conf);
    FSDataOutputStream fileOut = fs.create(file, false);
    return new DataOutputStream(codec.createOutputStream(fileOut)); 
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryBlockRecordReader;LzoBinaryBlockRecordReader(TypeRef<M>,BinaryBlockReader<M>,W);;;public LzoBinaryBlockRecordReader(TypeRef<M> typeRef, BinaryBlockReader<M> reader, W binaryWritable) {
    key_ = new LongWritable();
    value_ = binaryWritable;
    reader_ = reader;
    typeRef_ = typeRef;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryBlockRecordReader;close();;;@Override
  public synchronized void close() throws IOException {
    if (reader_ != null) {
      reader_.close();
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryBlockRecordReader;getCurrentKey();;;@Override
  public LongWritable getCurrentKey() throws IOException, InterruptedException {
    return key_;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryBlockRecordReader;getCurrentValue();;;@Override
  public W getCurrentValue() throws IOException, InterruptedException {
    return value_;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryBlockRecordReader;createInputReader(InputStream,Configuration);;;@Override
  protected void createInputReader(InputStream input, Configuration conf) throws IOException {
    reader_.setInputStream(input);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryBlockRecordReader;initialize(InputSplit,TaskAttemptContext);;;@Override
  public void initialize(InputSplit genericSplit, TaskAttemptContext context)
                                     throws IOException, InterruptedException {
    String group = "LzoBlocks of " + typeRef_.getRawClass().getName();
    recordsReadCounter = HadoopUtils.getCounter(context, group, "Records Read");
    recordErrorsCounter = HadoopUtils.getCounter(context, group, "Errors");

    super.initialize(genericSplit, context);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryBlockRecordReader;skipToNextSyncPoint(boolean);;;@Override
  protected void skipToNextSyncPoint(boolean atFirstRecord) throws IOException {
    // No need to skip to the sync point here; the block reader will do it for us.
    LOG.debug("LzoProtobufBlockRecordReader.skipToNextSyncPoint called with atFirstRecord = " + atFirstRecord);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryBlockRecordReader;nextKeyValue();;;@Override
  public boolean nextKeyValue() throws IOException, InterruptedException {
    // If we are past the end of the file split, tell the reader not to read any more new blocks.
    // Then continue reading until the last of the reader's already-parsed values are used up.
    // The next split will start at the next sync point and no records will be missed.
    if (pos_ > end_) {
      reader_.markNoMoreNewBlocks();
    }
    if (reader_.readNext(value_)) {
      if (value_.get() == null) {
        recordErrorsCounter.increment(1);
      }
      recordsReadCounter.increment(1);
      key_.set(pos_);
      pos_ = getLzoFilePos();
      return true;
    }

    return false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftB64LineInputFormat;LzoThriftB64LineInputFormat();public LzoThriftB64LineInputFormat() {
  };;public LzoThriftB64LineInputFormat() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftB64LineInputFormat;getInputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends TBase<?>> Class<LzoThriftB64LineInputFormat>
     getInputFormatClass(Class<M> thriftClass, Configuration jobConf) {
    ThriftUtils.setClassConf(jobConf, LzoThriftB64LineInputFormat.class, thriftClass);
    return LzoThriftB64LineInputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftB64LineRecordReader;LzoThriftB64LineRecordReader(TypeRef<M>);;;public LzoThriftB64LineRecordReader(TypeRef<M> typeRef) {
    super(typeRef, new ThriftWritable<M>(typeRef), new ThriftConverter<M>(typeRef));
    LOG.info("LzoTProtoB64LineRecordReader, type is " + typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftBlockInputFormat;LzoThriftBlockInputFormat();;;public LzoThriftBlockInputFormat() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftBlockInputFormat;getInputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends TBase<?>> Class<LzoThriftBlockInputFormat>
     getInputFormatClass(Class<M> thriftClass, Configuration jobConf) {
    ThriftUtils.setClassConf(jobConf, LzoThriftBlockInputFormat.class, thriftClass);
    return LzoThriftBlockInputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftBlockInputFormat;createRecordReader(InputSplit,TaskAttemptContext);;;@Override
  public RecordReader<LongWritable, ThriftWritable<M>> createRecordReader(InputSplit split,
      TaskAttemptContext taskAttempt) throws IOException, InterruptedException {

    TypeRef<M> typeRef = ThriftUtils.getTypeRef(taskAttempt.getConfiguration(), LzoThriftBlockInputFormat.class);
    return new LzoThriftBlockRecordReader<M>(typeRef);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryB64LineRecordReader;LzoBinaryB64LineRecordReader(TypeRef<M>,W,BinaryConverter<M>);;;protected LzoBinaryB64LineRecordReader(TypeRef<M> typeRef, W protobufWritable, BinaryConverter<M> protoConverter) {
    typeRef_ = typeRef;
    converter_ = protoConverter;
    value_ = protobufWritable;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryB64LineRecordReader;close();;;@Override
  public synchronized void close() throws IOException {
    if (lineReader_ != null) {
      lineReader_.close();
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryB64LineRecordReader;getCurrentKey();;;@Override
  public LongWritable getCurrentKey() throws IOException, InterruptedException {
    return key_;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryB64LineRecordReader;getCurrentValue();;;@Override
  public W getCurrentValue() throws IOException, InterruptedException {
    return value_;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryB64LineRecordReader;createInputReader(InputStream,Configuration);;;@Override
  protected void createInputReader(InputStream input, Configuration conf) throws IOException {
    lineReader_ = new LineReader(input, conf);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryB64LineRecordReader;initialize(InputSplit,TaskAttemptContext);;;public void initialize(InputSplit genericSplit, TaskAttemptContext context)
                                      throws IOException, InterruptedException {
    String group = "LzoB64Lines of " + typeRef_.getRawClass().getName();
    linesReadCounter = HadoopUtils.getCounter(context, group, "Lines Read");
    recordsReadCounter = HadoopUtils.getCounter(context, group, "Records Read");
    recordErrorsCounter = HadoopUtils.getCounter(context, group, "Errors");

    super.initialize(genericSplit, context);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryB64LineRecordReader;skipToNextSyncPoint(boolean);;;@Override
  protected void skipToNextSyncPoint(boolean atFirstRecord) throws IOException {
    if (!atFirstRecord) {
      lineReader_.readLine(new Text());
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoBinaryB64LineRecordReader;nextKeyValue();;;@Override
  public boolean nextKeyValue() throws IOException, InterruptedException {
    // Since the lzop codec reads everything in lzo blocks, we can't stop if pos == end.
    // Instead we wait for the next block to be read in, when pos will be > end.
    while (pos_ <= end_) {
      key_.set(pos_);

      int newSize = lineReader_.readLine(line_);
      if (newSize == 0) {
        return false;
      }
      linesReadCounter.increment(1);

      pos_ = getLzoFilePos();
      byte[] lineBytes = line_.toString().getBytes("UTF-8");
      M protoValue = converter_.fromBytes(base64_.decode(lineBytes));
      recordsReadCounter.increment(1);

      if (protoValue == null) {
        recordErrorsCounter.increment(1);
        continue;
      }

      value_.set(protoValue);
      return true;
    }

    return false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftBlockRecordReader;LzoThriftBlockRecordReader(TypeRef<M>);;;public LzoThriftBlockRecordReader(TypeRef<M> typeRef) {
    // input stream for the reader will be set by LzoBinaryBlockRecordReader
    super(typeRef, new ThriftBlockReader<M>(null, typeRef), new ThriftWritable<M>(typeRef));
    LOG.info("LzoThriftBlockRecordReader, type args are " + typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftConverter;newInstance(Class<M>);;;public static <M extends TBase<?>> ThriftConverter<M> newInstance(Class<M> tClass) {
    return new ThriftConverter<M>(new TypeRef<M>(tClass){});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftConverter;newInstance(TypeRef<M>);;;public static <M extends TBase<?>> ThriftConverter<M> newInstance(TypeRef<M> typeRef) {
    return new ThriftConverter<M>(typeRef);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftConverter;ThriftConverter(TypeRef<M>);;;public ThriftConverter(TypeRef<M> typeRef) {
    this.typeRef = typeRef;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftConverter;fromBytes(byte[]);;;@Override
  public M fromBytes(byte[] messageBuffer) {
    if (deserializer == null)
      deserializer = new TDeserializer();
    try {
      M message = typeRef.safeNewInstance();
      deserializer.deserialize(message, messageBuffer);
      return message;
    } catch (TException e) {
      // print a warning?
      return null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftConverter;toBytes(M);;;@Override
  public byte[] toBytes(M message) {
    if (serializer == null)
      serializer = new TSerializer();
    try {
      return serializer.serialize(message);
    } catch (TException e) {
      return null;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftConverter;equals(Object);;;@Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    try {
      return typeRef.getType().equals(((ThriftConverter<?>)obj).typeRef.getType());
    } catch (ClassCastException e) {
      return false;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftBlockReader;ThriftBlockReader(InputStream,TypeRef<M>);;;public ThriftBlockReader(InputStream in, TypeRef<M> typeRef) {
    super(in, new ThriftConverter<M>(typeRef));
    LOG.info("ThriftBlockReader, my typeClass is " + typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryWritable;BinaryWritable(M,BinaryConverter<M>);;;protected BinaryWritable(M message, BinaryConverter<M> converter) {
    this.message = message;
    this.converter = converter;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryWritable;get();;;public M get() {
    return message;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryWritable;clear();;;public void clear() {
    message = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryWritable;set(M);;;public void set(M message) {
    this.message = message;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryWritable;write(DataOutput);;;public void write(DataOutput out) throws IOException {
    byte[] bytes = null;
    if (message != null) {
      bytes = converter.toBytes(message);
      if (bytes == null) {
        // should we throw an IOException instead?
        LOG.warn("Could not serialize " + message.getClass());
      }
    }
    if (bytes != null) {
      out.writeInt(bytes.length);
      out.write(bytes, 0, bytes.length);
    } else {
      out.writeInt(0);
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryWritable;readFields(DataInput);;;public void readFields(DataInput in) throws IOException {
    int size = in.readInt();
    if (size > 0) {
      byte[] messageBytes = new byte[size];
      in.readFully(messageBytes, 0, size);
      message = converter.fromBytes(messageBytes);
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryWritable;compareTo(BinaryWritable<M>);;;@Override
  public int compareTo(BinaryWritable<M> other) {
    byte[] bytes = converter.toBytes(message);
    byte[] otherBytes = converter.toBytes(other.get());
    return BytesWritable.Comparator.compareBytes(bytes, 0, bytes.length, otherBytes, 0, otherBytes.length);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryWritable;equals(Object);;;@Override
  public boolean equals(Object obj) {
    if (obj == null)
      return false;

    BinaryWritable<?> other;
    try {
      other = (BinaryWritable<?>)obj;
    } catch (ClassCastException e) {
      return false;
    }
    if (message != null)
      return message.equals(other.message);
    if (other.message == null) // contained objects in both writables are null.
      return converter.equals(other.converter);

    return false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;BinaryBlockWriter(OutputStream,Class<M>,BinaryConverter<M>,int);;;protected BinaryBlockWriter(OutputStream out, Class<M> protoClass, BinaryConverter<M> protoConverter, int numRecordsPerBlock) {
    out_ = out;
    numRecordsPerBlock_ = numRecordsPerBlock;
    protobufClass_ = protoClass;
    protoConverter_ = protoConverter;
    
    builder_ = reinitializeBlockBuilder();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;write(M);;;public void write(M message) throws IOException {
    if (message instanceof Message) {
      //a small hack to avoid extra copy, since we need a ByteString anyway.
      builder_.addProtoBlobs(((Message)message).toByteString());
    } else {
      builder_.addProtoBlobs(ByteString.copyFrom(protoConverter_.toBytes(message)));
    }
    
    numRecordsWritten_++;

    if (builder_.getProtoBlobsCount() == numRecordsPerBlock_) {
      serialize();
      builder_ = reinitializeBlockBuilder();
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;reinitializeBlockBuilder();;;public SerializedBlock.Builder reinitializeBlockBuilder() {
    return SerializedBlock.newBuilder()
                          .setVersion(1)
                          .setProtoClassName(protobufClass_.getCanonicalName());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;finish();;;public void finish() throws IOException {
    if (builder_.getProtoBlobsCount() > 0) {
      serialize();
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;close();;;public void close() throws IOException {
    out_.close();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;serialize();;;protected void serialize() throws IOException {
    SerializedBlock block = builder_.build();
    out_.write(Protobufs.KNOWN_GOOD_POSITION_MARKER);
    writeRawLittleEndian32(block.getSerializedSize());
    block.writeTo(out_);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;writeRawLittleEndian32(int);;;private void writeRawLittleEndian32(int size) throws IOException {
     out_.write((size) & 0xFF);
     out_.write((size >> 8) & 0xFF);
     out_.write((size >> 16) & 0xFF);
     out_.write((size >> 24) & 0xFF);
   }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftBlockWriter;ThriftBlockWriter(OutputStream,Class<M>);;;public ThriftBlockWriter(OutputStream out, Class<M> protoClass) {
    super(out, protoClass, new ThriftConverter<M>(new TypeRef<M>(protoClass){}), DEFAULT_NUM_RECORDS_PER_BLOCK);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftBlockWriter;ThriftBlockWriter(OutputStream,Class<M>,int);;;public ThriftBlockWriter(OutputStream out, Class<M> protoClass, int numRecordsPerBlock) {
    super(out, protoClass, new ThriftConverter<M>(new TypeRef<M>(protoClass){}), numRecordsPerBlock);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;BinaryBlockReader(InputStream,BinaryConverter<M>);;;protected BinaryBlockReader(InputStream in, BinaryConverter<M> protoConverter) {
    in_ = in;
    protoConverter_ = protoConverter;
    searcher_ = new StreamSearcher(Protobufs.KNOWN_GOOD_POSITION_MARKER);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;close();;;public void close() throws IOException {
    if (in_ != null)
      in_.close();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;setInputStream(InputStream);;;public void setInputStream(InputStream in) {
    in_ = in; // not closing existing in_, normally it is null
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;readNext();;;public M readNext() throws IOException {
    byte[] blob = readNextProtoBytes();
    return blob == null ?
        null : protoConverter_.fromBytes(blob);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;readNext(BinaryWritable<M>);;;public boolean readNext(BinaryWritable<M> writable) throws IOException {
    byte[] blob = readNextProtoBytes();
    if (blob != null) {
      writable.set(protoConverter_.fromBytes(blob));
      return true;
    }
    return false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;readNextProtoBytes();;;public byte[] readNextProtoBytes() throws IOException {
    if (!setupNewBlockIfNeeded()) {
      return null;
    }

    int blobIndex = curBlock_.getProtoBlobsCount() - numLeftToReadThisBlock_;
    numLeftToReadThisBlock_--;
    return curBlock_.getProtoBlobs(blobIndex).toByteArray();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;readNextProtoBytes(BytesWritable);;;public boolean readNextProtoBytes(BytesWritable writable) throws IOException {
    byte[] blob = readNextProtoBytes();
    if (blob != null) {
      writable.set(blob, 0, blob.length);
      return true;
    }
    return false;  
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;markNoMoreNewBlocks();;;public void markNoMoreNewBlocks() {
    readNewBlocks_ = false;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;skipToNextSyncPoint();;;public boolean skipToNextSyncPoint() throws IOException {
    return searcher_.search(in_);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;parseNextBlock();;;public SerializedBlock parseNextBlock() throws IOException {
    LOG.debug("BlockReader: none left to read, skipping to sync point");
    if (!skipToNextSyncPoint()) {
      LOG.debug("BlockReader: SYNC point eof");
      // EOF if there are no more sync markers.
      return null;
    }

    int blockSize = readInt();
    LOG.debug("BlockReader: found sync point, next block has size " + blockSize);
    if (blockSize < 0) {
      LOG.debug("ProtobufReader: reading size after sync point eof");
      // EOF if the size cannot be read.
      return null;
    }

    byte[] byteArray = new byte[blockSize];
    IOUtils.readFully(in_, byteArray, 0, blockSize);
    SerializedBlock block = SerializedBlock.parseFrom(byteArray);

    numLeftToReadThisBlock_ = block.getProtoBlobsCount();
    LOG.debug("ProtobufReader: number in next block is " + numLeftToReadThisBlock_);
    return block;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;setupNewBlockIfNeeded();;;private boolean setupNewBlockIfNeeded() throws IOException {
    if (numLeftToReadThisBlock_ == 0) {
      if (!readNewBlocks_) {
        // If the reader has been told not to read more blocks, stop.
        // This happens when a map boundary has been crossed in a map job, for example.
        // The goal then is to finsh reading what has been parsed, but let the next split
        // handle everything starting at the next sync point.
        return false;
      }
      curBlock_ = parseNextBlock();
      if (curBlock_ == null) {
        // If there is nothing, it likely means EOF. Signal that processing is done.
        return false;
      }
    }

    return true;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;readInt();;;private int readInt() throws IOException {
    int b = in_.read();
    if (b == -1) {
      return -1;
    }

    return b | (in_.read() << 8) | (in_.read() << 16) | (in_.read() << 24);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftWritable;newInstance(Class<M>);;;public static <M extends TBase<?>> ThriftWritable<M> newInstance(Class<M> tClass) {
    return new ThriftWritable<M>(new TypeRef<M>(tClass){});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftWritable;ThriftWritable(TypeRef<M>);;;public ThriftWritable(TypeRef<M> typeRef) {
    this(null, typeRef);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ThriftWritable;ThriftWritable(M,TypeRef<M>);;;public ThriftWritable(M message, TypeRef<M> typeRef) {
    super(message, new ThriftConverter<M>(typeRef));
    LOG.debug("TProtoWritable, typeClass is " + typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryConverter;fromBytes(byte[]);;;M fromBytes(byte[] messageBuffer);
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryConverter;toBytes(M);;;byte[] toBytes(M message);
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockWriter;ProtobufBlockWriter(OutputStream,Class<M>);;;public ProtobufBlockWriter(OutputStream out, Class<M> protoClass) {
    super(out, protoClass, new ProtobufConverter<M>(new TypeRef<M>(protoClass){}), DEFAULT_NUM_RECORDS_PER_BLOCK);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockWriter;ProtobufBlockWriter(OutputStream,Class<M>,int);;;public ProtobufBlockWriter(OutputStream out, Class<M> protoClass, int numRecordsPerBlock) {
    super(out, protoClass, new ProtobufConverter<M>(new TypeRef<M>(protoClass){}), numRecordsPerBlock);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter;ProtobufConverter(TypeRef<M>);;;public ProtobufConverter(TypeRef<M> typeRef) {
    this.typeRef = typeRef;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter;fromBytes(byte[]);;;@SuppressWarnings("unchecked")
  @Override
  public M fromBytes(byte[] messageBuffer) {
    try {
      if (protoBuilder == null) {
        protoBuilder = Protobufs.getMessageBuilder(typeRef.getRawClass());
      }
      return  (M) protoBuilder.clone().mergeFrom(messageBuffer).build();
    } catch (InvalidProtocolBufferException e) {
      LOG.error("Invalid Protocol Buffer exception building " + typeRef.getRawClass().getName(), e);
    } catch(UninitializedMessageException ume) {
      LOG.error("Uninitialized Message Exception in building " + typeRef.getRawClass().getName(), ume);
    }
    return null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter;toBytes(M);;;@Override
  public byte[] toBytes(M message) {
    return message.toByteArray();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter;equals(Object);;;@Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    try {
      return typeRef.getType().equals(((ProtobufConverter<?>)obj).typeRef.getType());
    } catch (ClassCastException e) {
      return false;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufBlockReader;ProtobufBlockReader(InputStream,TypeRef<M>);;;    super(in, new ProtobufConverter<M>(typeRef));
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftB64LinePigLoader;LzoThriftB64LinePigLoader(String);;;public LzoThriftB64LinePigLoader(String thriftClassName) {
    typeRef_ = ThriftUtils.getTypeRef(thriftClassName);
    converter_ = ThriftConverter.newInstance(typeRef_);
    thriftToPig_ =  ThriftToPig.newInstance(typeRef_);

    String group = "LzoB64Lines of " + typeRef_.getRawClass().getName();
    linesRead = new Pair<String, String>(group, "Lines Read");
    thriftStructsRead = new Pair<String, String>(group, "Thrift Structs");
    thriftErrors = new Pair<String, String>(group, "Errors");

    setLoaderSpec(getClass(), new String[]{thriftClassName});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftB64LinePigLoader;skipToNextSyncPoint(boolean);;;public void skipToNextSyncPoint(boolean atFirstRecord) throws IOException {
    // Since we are not block aligned we throw away the first record of each split and count on a different
    // instance to read it.  The only split this doesn't work for is the first.
    if (!atFirstRecord) {
      getNext();
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftB64LinePigLoader;verifyStream();;;@Override
  protected boolean verifyStream() throws IOException {
    return is_ != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftB64LinePigLoader;getNext();;;public Tuple getNext() throws IOException {
    if (!verifyStream()) {
      return null;
    }

    String line;
    Tuple t = null;
    while ((line = is_.readLine(UTF8, RECORD_DELIMITER)) != null) {
      incrCounter(linesRead, 1L);
      M value = converter_.fromBytes(base64_.decode(line.getBytes("UTF-8")));
      if (value != null) {
        try {
          t = thriftToPig_.getPigTuple(value);
          incrCounter(thriftStructsRead, 1L);
          break;
        } catch (TException e) {
          incrCounter(thriftErrors, 1L);
          LOG.warn("ThriftToTuple error :", e); // may be struct mismatch
        }
      }
    }

    return t;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftB64LinePigLoader;determineSchema(String,ExecType,DataStorage);;;@Override
  public Schema determineSchema(String filename, ExecType execType, DataStorage store) throws IOException {
    return ThriftToPig.toSchema(typeRef_.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftBlockPigLoader;LzoThriftBlockPigLoader(String);;;public LzoThriftBlockPigLoader(String thriftClassName) {
    typeRef_ = ThriftUtils.getTypeRef(thriftClassName);
    thriftToPig_ =  ThriftToPig.newInstance(typeRef_);

    String group = "LzoBlocks of " + typeRef_.getRawClass().getName();
    thriftStructsRead = new Pair<String, String>(group, "Thrift Structs Read");
    thriftErrors = new Pair<String, String>(group, "Errors");

    setLoaderSpec(getClass(), new String[]{thriftClassName});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftBlockPigLoader;postBind();;;@Override
  public void postBind() throws IOException {
    reader_ = new ThriftBlockReader<M>(is_, typeRef_);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftBlockPigLoader;skipToNextSyncPoint(boolean);;;@Override
  public void skipToNextSyncPoint(boolean atFirstRecord) throws IOException {
    // We want to explicitly not do any special syncing here, because the reader_
    // handles this automatically.
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftBlockPigLoader;verifyStream();;;@Override
  protected boolean verifyStream() throws IOException {
    return is_ != null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftBlockPigLoader;getNext();;;public Tuple getNext() throws IOException {
    if (!verifyStream()) {
      return null;
    }

    // If we are past the end of the file split, tell the reader not to read any more new blocks.
    // Then continue reading until the last of the reader's already-parsed values are used up.
    // The next split will start at the next sync point and no records will be missed.
    if (is_.getPosition() > end_) {
      reader_.markNoMoreNewBlocks();
    }

    M value;
    while ((value = reader_.readNext()) != null) {
      try {
        Tuple t = thriftToPig_.getPigTuple(value);
        incrCounter(thriftStructsRead, 1L);
        return t;
      } catch (TException e) {
        incrCounter(thriftErrors, 1L);
        LOG.warn("ThriftToTuple error :", e); // may be corrupt data.
        // try next
      }
    }
    return null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoThriftBlockPigLoader;determineSchema(String,ExecType,DataStorage);;;@Override
  public Schema determineSchema(String filename, ExecType execType, DataStorage store) throws IOException {
    return ThriftToPig.toSchema(typeRef_.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoBaseLoadFunc;incrCounter(Pair<String,String>,long);;;protected void incrCounter(Pair<String, String> groupCounterPair, long incr) {
    counterHelper_.incrCounter(groupCounterPair.first, groupCounterPair.second, incr);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufBlockPigLoader;setTypeRef(TypeRef<M>);;;    String group = "LzoBlocks of " + typeRef_.getRawClass().getName();
    protobufsRead = new Pair<String, String>(group, "Protobufs Read");
    protobufErrors = new Pair<String, String>(group, "Errors");
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufBlockPigLoader;getNext();;;      if (value_.get() == null) {
        incrCounter(protobufErrors, 1);
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufB64LinePigLoader;setTypeRef(TypeRef<M>);;;    String group = "LzoB64Lines of " + typeRef_.getRawClass().getName();
    linesRead = new Pair<String, String>(group, "Lines Read");
    protobufsRead = new Pair<String, String>(group, "Protobufs Read");
    protobufErrors = new Pair<String, String>(group, "Errors");
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufB64LinePigLoader;getNext();;;      } else {
        incrCounter(protobufErrors, 1L);
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getContents();;;public abstract Object getContents();
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;add(Object);;;public abstract void add(Object o) throws TException;
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;setCurField(TField);;;public void setCurField(TField tField) throws TException {
      if (structDesc != null) {
        curFieldDesc = structDesc.fieldMap.get(tField.id);
        if (curFieldDesc == null) {
          throw new TException("Unexpected TField " + tField + " for " + tClass_.getName());
        }
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;TupleWrap(int);;;public TupleWrap(int size) {
      t = tupleFactory_.newTuple(size);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getContents();;;public Object getContents() { return t; }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;add(Object);;;public void add(Object o) throws TException {
      if (curFieldDesc == null) {
        throw new TException("Internal Error. curFieldDesc is not set");
      }
      if (curFieldDesc.enumMap != null && // map enum to string
          (o = curFieldDesc.enumMap.get(o)) == null) {
        throw new TException("cound not find Enum string");
      }
      try {
        t.set(curFieldDesc.tupleIdx, o);
       } catch (ExecException e) {
          throw new TException(e);
       }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;BagWrap(int);;;public BagWrap(int size) {
      tuples =  Lists.newArrayListWithCapacity(size);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;add(Object);;;@Override
    public void add(Object o) throws TException {
      // Pig bags contain tuples of objects, so we must wrap a tuple around
      // everything we get.
      if (o instanceof Tuple) {
        tuples.add((Tuple) o);
      } else {
        tuples.add(tupleFactory_.newTuple(o));
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getContents();;;@Override
    public Object getContents() {
      return bagFactory_.newDefaultBag(tuples);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;MapWrap(int);;;public MapWrap(int size) {
      map = new HashMap<String, Object>(size);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;add(Object);;;@Override
    public void add(Object o) throws TException {
      //we alternate between String keys and (converted) DataByteArray values.
      if (currKey == null) {
        try {
          currKey = (String) o;
        } catch (ClassCastException e) {
          throw new TException("Only String keys are allowed in maps.");
        }
      } else {
        map.put(currKey, o);
        currKey = null;
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getContents();;;@Override
    public Object getContents() {
      return map;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;pushContainer(PigContainer);;;private void pushContainer(PigContainer c) {
    containerStack_.addLast(c);
    curContainer_ = c;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;popContainer();;;private PigContainer popContainer() throws TException {
    PigContainer c = containerStack_.removeLast();
    curContainer_ = containerStack_.peekLast();
    if (curContainer_ == null) { // All done!
      curTuple_ = (Tuple) c.getContents();
    } else {
      curContainer_.add(c.getContents());
    }
    return c;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;newInstance(Class<M>);;;public static <M extends TBase<?>> ThriftToPig<M> newInstance(Class<M> tClass) {
    return new ThriftToPig<M>(tClass);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;newInstance(TypeRef<M>);;;public static <M extends TBase<?>> ThriftToPig<M> newInstance(TypeRef<M> typeRef) {
    return new ThriftToPig<M>(typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;ThriftToPig(Class<M>);;;public ThriftToPig(Class<M> tClass) {
    this.tClass_ = tClass;
    structMap = Maps.newHashMap();
    updateStructMap(tClass_);
    structMap = ImmutableMap.copyOf(structMap);
    reset();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;reset();;;public void reset() {
    containerStack_.clear();
    curContainer_ = null;
    curTuple_ = null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getPigTuple(M);;;public Tuple getPigTuple(M thriftObj) throws TException {
    reset();
    thriftObj.write(tProtocol_);
    if (curTuple_ != null) {
      return curTuple_;
    }
    // unexpected
    throw new TException("Internal error. tuple is not set");
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;extractEnumMap(FieldValueMetaData);;;static private Map<Integer, String> extractEnumMap(FieldValueMetaData field) {
    MetaData f = new MetaData(field);
    if (!f.isEnum()) {
      return null;
    }
    Map<Integer, String> map = Maps.newHashMap();
    for(TEnum e : f.getEnumClass().getEnumConstants()) {
      map.put(e.getValue(), e.toString());
    }
    return ImmutableMap.copyOf(map);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;StructDescriptor(Class<?extendsTBase<?>>);;;public StructDescriptor(Class<? extends TBase<?>> tClass) {
      fieldMap = Maps.newHashMap();
      int idx = 0;
      for (Entry<? extends TFieldIdEnum, FieldMetaData> e : FieldMetaData.getStructMetaDataMap(tClass).entrySet()) {
        FieldDescriptor desc = new FieldDescriptor();
        desc.fieldEnum = e.getKey();
        desc.tupleIdx = idx++;
        if (e.getValue().valueMetaData.type == TType.ENUM) {
          desc.enumMap = extractEnumMap(e.getValue().valueMetaData);
        }
        fieldMap.put(desc.fieldEnum.getThriftFieldId(), desc);
      }
      fieldMap = ImmutableMap.copyOf(fieldMap);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;updateStructMap(Class<?extendsTBase<?>>);;;private void updateStructMap(Class<? extends TBase<?>> tClass) {
    final TStruct tStruct = getStructDesc(tClass);

    if (structMap.get(tStruct) != null) {
      return;
    }

    StructDescriptor desc = new StructDescriptor(tClass);
    LOG.debug("adding struct descriptor for " + tClass.getName()
        + " with " + desc.fieldMap.size() + " fields");
    structMap.put(tStruct, desc);
    // recursively add any referenced classes.
    for (FieldMetaData field : FieldMetaData.getStructMetaDataMap(tClass).values()) {
      updateStructMap(field.valueMetaData);
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;updateStructMap(FieldValueMetaData);;;private void updateStructMap(FieldValueMetaData field) {
    MetaData f = new MetaData(field);

    if (f.isStruct()) {
      updateStructMap(f.getStructClass());
    }

    if (f.isList()) {
      updateStructMap(f.getListElem());
    }

    if (f.isMap()) {
      if (f.getMapKey().type != TType.STRING) {
        throw new IllegalArgumentException("Pig does not support maps with non-string keys "
            + "while initializing ThriftToPig for " + tClass_.getName());
      }
      updateStructMap(f.getMapKey());
      updateStructMap(f.getMapValue());
    }

    if (f.isSet()) {
      updateStructMap(f.getSetElem());
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;ThriftProtocol();;;ThriftProtocol() {
      super(null); // this protocol is not used for transport.
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeBinary(byte[]);;;@Override
    public void writeBinary(byte[] bin) throws TException {
      curContainer_.add(new DataByteArray(bin));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeBool(boolean);;;@Override
    public void writeBool(boolean b) throws TException {
      curContainer_.add(Integer.valueOf(b ? 1 : 0));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeByte(byte);;;@Override
    public void writeByte(byte b) throws TException {
      curContainer_.add(Integer.valueOf(b));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeDouble(double);;;@Override
    public void writeDouble(double dub) throws TException {
      curContainer_.add(Double.valueOf(dub));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeFieldBegin(TField);;;@Override
    public void writeFieldBegin(TField field) throws TException {
      curContainer_.setCurField(field);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeFieldEnd();;;@Override
    public void writeFieldEnd() throws TException {
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeFieldStop();;;@Override
    public void writeFieldStop() throws TException {
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeI16(short);;;@Override
    public void writeI16(short i16) throws TException {
      curContainer_.add(Integer.valueOf(i16));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeI32(int);;;@Override
    public void writeI32(int i32) throws TException {
      curContainer_.add(i32);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeI64(long);;;@Override
    public void writeI64(long i64) throws TException {
      curContainer_.add(i64);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeListBegin(TList);;;@Override
    public void writeListBegin(TList list) throws TException {
      pushContainer(new BagWrap(list.size));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeListEnd();;;@Override
    public void writeListEnd() throws TException {
      popContainer();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeMapBegin(TMap);;;@Override
    public void writeMapBegin(TMap map) throws TException {
      pushContainer(new MapWrap(map.size));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeMapEnd();;;@Override
    public void writeMapEnd() throws TException {
      popContainer();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeSetBegin(TSet);;;@Override
    public void writeSetBegin(TSet set) throws TException {
      pushContainer(new BagWrap(set.size));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeSetEnd();;;@Override
    public void writeSetEnd() throws TException {
      popContainer();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeString(String);;;@Override
    public void writeString(String str) throws TException {
      curContainer_.add(str);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeStructBegin(TStruct);;;@Override
    public void writeStructBegin(TStruct struct) throws TException {
      StructDescriptor desc = structMap.get(struct);
      if (desc == null) {
        throw new TException("Unexpected TStruct " + struct.name + " for " + tClass_.getName());
      }
      PigContainer c = new TupleWrap(desc.fieldMap.size());
      c.structDesc = desc;
      pushContainer(c);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeStructEnd();;;@Override
    public void writeStructEnd() throws TException {
      popContainer();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeMessageBegin(TMessage);;;@Override
    public void writeMessageBegin(TMessage message) throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeMessageEnd();;;@Override
    public void writeMessageEnd() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readBinary();;;@Override
    public byte[] readBinary() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readBool();;;@Override
    public boolean readBool() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readByte();;;@Override
    public byte readByte() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readDouble();;;@Override
    public double readDouble() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readFieldBegin();;;@Override
    public TField readFieldBegin() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readFieldEnd();;;@Override
    public void readFieldEnd() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readI16();;;@Override
    public short readI16() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readI32();;;@Override
    public int readI32() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readI64();;;@Override
    public long readI64() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readListBegin();;;@Override
    public TList readListBegin() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readListEnd();;;@Override
    public void readListEnd() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readMapBegin();;;@Override
    public TMap readMapBegin() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readMapEnd();;;@Override
    public void readMapEnd() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readMessageBegin();;;@Override
    public TMessage readMessageBegin() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readMessageEnd();;;@Override
    public void readMessageEnd() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readSetBegin();;;@Override
    public TSet readSetBegin() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readSetEnd();;;@Override
    public void readSetEnd() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readString();;;@Override
    public String readString() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readStructBegin();;;@Override
    public TStruct readStructBegin() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;readStructEnd();;;@Override
    public void readStructEnd() throws TException {
      throw new TException("method not implemented.");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;MetaData(FieldValueMetaData);;;MetaData(FieldValueMetaData field) {
      this.field = field;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getField();;;FieldValueMetaData getField() {
      return field;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;isList();;;boolean isList() {
      return field instanceof ListMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getListElem();;;FieldValueMetaData getListElem() {
      return ((ListMetaData)field).elemMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;isEnum();;;boolean isEnum() {
      return field instanceof EnumMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getEnumClass();;;Class<? extends TEnum> getEnumClass() {
      return ((EnumMetaData)field).enumClass;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;isMap();;;boolean isMap() {
      return field instanceof MapMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getMapKey();;;FieldValueMetaData getMapKey() {
      return ((MapMetaData)field).keyMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getMapValue();;;FieldValueMetaData getMapValue() {
      return ((MapMetaData)field).valueMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;isSet();;;boolean isSet() {
      return field instanceof SetMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getSetElem();;;FieldValueMetaData getSetElem() {
      return ((SetMetaData)field).elemMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;isStruct();;;boolean isStruct() {
      return field instanceof StructMetaData;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getStructClass();;;@SuppressWarnings("unchecked")
    Class<? extends TBase<?>> getStructClass() {
      return (Class <? extends TBase<?>>)((StructMetaData)field).structClass;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;toSchema(Class<?extendsTBase<?>>);;;public static Schema toSchema(Class<? extends TBase<?>> tClass) {
    Schema schema = new Schema();

    try {
      for (Entry<? extends TFieldIdEnum, FieldMetaData> e : FieldMetaData.getStructMetaDataMap(tClass).entrySet()) {
        FieldMetaData meta = e.getValue();
        FieldValueMetaData field = e.getValue().valueMetaData;
        MetaData fm = new MetaData(field);
        if (fm.isStruct()) {
          schema.add(new FieldSchema(meta.fieldName, toSchema(fm.getStructClass()), DataType.TUPLE));
        } else if (fm.isEnum()) { // enums in Structs are strings (enums in containers are not, yet)
          schema.add(new FieldSchema(meta.fieldName, null, DataType.CHARARRAY));
        } else {
          schema.add(singleFieldToFieldSchema(meta.fieldName, field));
        }
      }
    } catch (FrontendException t) {
      throw new RuntimeException(t);
    }

    return schema;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;singleFieldToFieldSchema(String,FieldValueMetaData);;;private static FieldSchema singleFieldToFieldSchema(String fieldName, FieldValueMetaData field) throws FrontendException {

    MetaData fm = new MetaData(field);

    switch (field.type) {
      case TType.LIST:
        return new FieldSchema(fieldName, singleFieldToTupleSchema(fieldName + "_tuple", fm.getListElem()), DataType.BAG);
      case TType.SET:
        return new FieldSchema(fieldName, singleFieldToTupleSchema(fieldName + "_tuple", fm.getSetElem()), DataType.BAG);
      case TType.MAP:
        // can not specify types for maps in Pig.
        return new FieldSchema(fieldName, null, DataType.MAP);
      default:
        return new FieldSchema(fieldName, null, getPigDataType(field));
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;singleFieldToTupleSchema(String,FieldValueMetaData);;;private static Schema singleFieldToTupleSchema(String fieldName, FieldValueMetaData field) throws FrontendException {
    MetaData fm = new MetaData(field);
    FieldSchema fieldSchema = null;

    switch (field.type) {
      case TType.STRUCT:
        fieldSchema = new FieldSchema(fieldName, toSchema(fm.getStructClass()), DataType.TUPLE);
        break;
      case TType.LIST:
        fieldSchema = singleFieldToFieldSchema(fieldName, fm.getListElem());
        break;
      case TType.SET:
        fieldSchema = singleFieldToFieldSchema(fieldName, fm.getSetElem());
        break;
      default:
        fieldSchema = new FieldSchema(fieldName, null, getPigDataType(fm.getField()));
    }

    Schema schema = new Schema();
    schema.add(fieldSchema);
    return schema;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getPigDataType(FieldValueMetaData);;;private static byte getPigDataType(FieldValueMetaData field) {
    switch (field.type) {
      case TType.BOOL:
      case TType.BYTE:
      case TType.I16:
      case TType.I32:
      case TType.ENUM: // will revisit this once Enums in containers are also strings.
        return DataType.INTEGER;
      case TType.I64:
        return DataType.LONG;
      case TType.STRING:
        return DataType.CHARARRAY;
      default:
        throw new IllegalArgumentException("Unexpected type where a simple type is expected : " + field.type);
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;toPigScript(Class<?extendsTBase<?>>,Class<?extendsLoadFunc>);;;public static String toPigScript(Class<? extends TBase<?>> thriftClass,
                                   Class<? extends LoadFunc> pigLoader) {
    StringBuilder sb = new StringBuilder();
    /* we are commenting out explicit schema specification. The schema is 
     * included mainly to help the readers of the pig script. Pig learns the 
     * schema directly from the loader. 
     * If explicit schema is not commented, we might have surprising results
     * when a Thrift class (possibly in control of another team) changes, 
     * but the Pig script is not updated. Commenting it out work around this. 
     */
    StringBuilder prefix = new StringBuilder("       --  ");
    sb.append("raw_data = load '$INPUT_FILES' using ")
      .append(pigLoader.getName())
      .append("('")
      .append(thriftClass.getName())
      .append("');\n")
      .append(prefix)
      .append("as ");
    prefix.append("   ");

    try {
      stringifySchema(sb, toSchema(thriftClass), DataType.TUPLE, prefix);
    } catch (FrontendException e) {
      throw new RuntimeException(e);
    }

    sb.append("\n");
    return sb.toString();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;stringifySchema(StringBuilder,Schema,byte,StringBuilder);;;public static void stringifySchema(StringBuilder sb,
                                     Schema schema,
                                     byte type,
                                     StringBuilder prefix)
                                          throws FrontendException{
      // this is a modified version of {@link Schema#stringifySchema(StringBuilder, Schema, byte)}
      if (type == DataType.TUPLE) {
          sb.append("(") ;
      }
      else if (type == DataType.BAG) {
          sb.append("{") ;
      }

      prefix.append("  ");
      sb.append("\n").append(prefix);

      if (schema == null) {
          sb.append("null") ;
      }
      else {
          boolean isFirst = true ;
          for (int i=0; i< schema.size() ;i++) {

              if (!isFirst) {
                  sb.append(",\n").append(prefix);
              }
              else {
                  isFirst = false ;
              }

              FieldSchema fs = schema.getField(i) ;

              if(fs == null) {
                  sb.append("null");
                  continue;
              }

              if (fs.alias != null) {
                  sb.append(fs.alias);
                  sb.append(": ");
              }

              if (DataType.isAtomic(fs.type)) {
                  sb.append(DataType.findTypeName(fs.type)) ;
              }
              else if ( (fs.type == DataType.TUPLE) ||
                        (fs.type == DataType.BAG) ) {
                  // safety net
                  if (schema != fs.schema) {
                      stringifySchema(sb, fs.schema, fs.type, prefix) ;
                  }
                  else {
                      throw new AssertionError("Schema refers to itself "
                                               + "as inner schema") ;
                  }
              } else if (fs.type == DataType.MAP) {
                  sb.append(DataType.findTypeName(fs.type) + "[ ]") ;
              } else {
                  sb.append(DataType.findTypeName(fs.type)) ;
              }
          }
      }

      prefix.setLength(prefix.length()-2);
      sb.append("\n").append(prefix);

      if (type == DataType.TUPLE) {
          sb.append(")") ;
      }
      else if (type == DataType.BAG) {
          sb.append("}") ;
      }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;writeStructBegin(TStruct);;;public void writeStructBegin(TStruct struct) throws TException {
      structDesc = struct;
      throw new TException("expected");
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;getStructDesc(Class<?extendsTBase<?>>);;;private TStruct getStructDesc(Class<? extends TBase<?>> tClass) {
    // hack to get hold of STRUCT_DESC of a thrift class :
    // writeStructBegin() uses this descriptor.
    TProtoForStruct proto = new TProtoForStruct();
    try {
      tClass.newInstance().write(proto);
    } catch (TException e) {
    } catch (Throwable t) {
      throw new RuntimeException(t);
    }
    return proto.structDesc;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;main(String[]);;;public static void main(String[] args) throws Exception {
    if (args.length > 0) {
      Class<? extends TBase<?>> tClass = ThriftUtils.getTypeRef(args[0]).getRawClass();
      System.out.println(args[0] + " : " + toSchema(tClass).toString());
      System.out.println(toPigScript(tClass, LzoThriftB64LinePigLoader.class));
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/java/com/twitter/elephantbird/pig/piggybank/BytesToThriftTuple;setTypeRef(TypeRef<T>);;;    thriftToTuple_ = ThriftToPig.newInstance(typeRef);
/home/taes/taes//projects/elephant-bird/revisions/rev_8eed34e_cebd3d0/rev_8eed34e-cebd3d0;/src/test/com/twitter/elephantbird/pig/piggybank/TestThriftToPig;toTuple(M);;;static <M extends TBase<?>> Tuple toTuple(M obj) throws TException {
    // it is very inefficient to create one ThriftToPig for each Thrift object,
    // but good enough for unit testing.
    return ThriftToPig.newInstance(new TypeRef<M>(obj.getClass()){}).getPigTuple(obj);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;ProtobufMRExample();;;private ProtobufMRExample() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;map(LongWritable,Text,Context);;;@Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
      StringTokenizer line = new StringTokenizer(value.toString(), "\t\r\n");
      String name;

      if (line.hasMoreTokens()
          && (name = line.nextToken()) != null
          && line.hasMoreTokens()) {
          protoWritable.set(Age.newBuilder()
                              .setName(name)
                              .setAge(Integer.parseInt(line.nextToken()))
                              .build());
          context.write(null, protoWritable);
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;runTextToLzo(String[],Configuration);;;public int runTextToLzo(String[] args, Configuration conf) throws Exception {
    Job job = new Job(conf);
    job.setJobName("Protobuf Example : Text to LzoB64Line");

    job.setJarByClass(getClass());
    job.setMapperClass(TextMapper.class);
    job.setNumReduceTasks(0);

    job.setInputFormatClass(TextInputFormat.class);
    if (conf.get("proto.test.format", "B64Line").equals("Block")) {
      job.setOutputFormatClass(LzoProtobufBlockOutputFormat.getOutputFormatClass(Age.class, job.getConfiguration()));
    } else { // assume B64Line
      job.setOutputFormatClass(LzoProtobufB64LineOutputFormat.getOutputFormatClass(Age.class, job.getConfiguration()));
    }

    FileInputFormat.setInputPaths(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));

    return job.waitForCompletion(true) ? 0 : 1;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;map(LongWritable,ProtobufWritable<Age>,Context);;;@Override
    protected void map(LongWritable key, ProtobufWritable<Age> value, Context context) throws IOException, InterruptedException {
      Age age = value.get();
      System.err.println("XXXXXXXXX got here!!");
      context.write(null, new Text(age.getName() + "\t" + age.getAge()));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;runLzoToText(String[],Configuration);;;public int runLzoToText(String[] args, Configuration conf) throws Exception {
    Job job = new Job(conf);
    job.setJobName("Protobuf Example : LzoB64Line to Text");

    job.setJarByClass(getClass());
    job.setMapperClass(LzoMapper.class);
    job.setNumReduceTasks(0);

    if (conf.get("proto.test.format", "B64Line").equals("Block")) {
      job.setInputFormatClass(LzoProtobufBlockInputFormat.getInputFormatClass(Age.class, job.getConfiguration()));
    } else {
      job.setInputFormatClass(LzoProtobufB64LineInputFormat.getInputFormatClass(Age.class, job.getConfiguration()));
    }
    job.setOutputFormatClass(TextOutputFormat.class);

    FileInputFormat.setInputPaths(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));

    return job.waitForCompletion(true) ? 0 : 1;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;main(String[]);;;public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    args = new GenericOptionsParser(conf, args).getRemainingArgs();
    ProtobufMRExample runner = new ProtobufMRExample();

    if (args.length != 2) {
      System.out.println("Usage: hadoop jar path/to/this.jar " + runner.getClass() + " <input dir> <output dir>");
      System.exit(1);
    }

    String test = conf.get("proto.test", "lzoIn");

    if (test.equals("lzoIn"))
      System.exit(runner.runLzoToText(args, conf));
    if (test.equals("lzoOut"))
      System.exit(runner.runTextToLzo(args, conf));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;Examples();;;private Examples() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;registerAllExtensions(com.google.protobuf.ExtensionRegistry);;;public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;Age();;;private Age() {
      initFields();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;Age(boolean);;;private Age(boolean noInit) {}
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDefaultInstance();;;public static Age getDefaultInstance() {
      return defaultInstance;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDefaultInstanceForType();;;public Age getDefaultInstanceForType() {
      return defaultInstance;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDescriptor();;;public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.twitter.elephantbird.examples.proto.Examples.internal_static_com_twitter_elephantbird_examples_proto_Age_descriptor;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;internalGetFieldAccessorTable();;;protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.twitter.elephantbird.examples.proto.Examples.internal_static_com_twitter_elephantbird_examples_proto_Age_fieldAccessorTable;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;hasName();;;public boolean hasName() { return hasName; }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getName();;;public java.lang.String getName() { return name_; }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;hasAge();;;public boolean hasAge() { return hasAge; }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getAge();;;public int getAge() { return age_; }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;initFields();;;private void initFields() {
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;isInitialized();;;public final boolean isInitialized() {
      return true;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;writeTo(com.google.protobuf.CodedOutputStream);;;public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasAge()) {
        output.writeInt32(2, getAge());
      }
      getUnknownFields().writeTo(output);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getSerializedSize();;;public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasAge()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getAge());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(com.google.protobuf.ByteString);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(byte[]);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(byte[],com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(java.io.InputStream);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseDelimitedFrom(java.io.InputStream);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(com.google.protobuf.CodedInputStream);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;newBuilder();;;public static Builder newBuilder() { return Builder.create(); }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;newBuilderForType();;;public Builder newBuilderForType() { return newBuilder(); }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;newBuilder(com.twitter.elephantbird.examples.proto.Examples.Age);;;public static Builder newBuilder(com.twitter.elephantbird.examples.proto.Examples.Age prototype) {
      return newBuilder().mergeFrom(prototype);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;toBuilder();;;public Builder toBuilder() { return newBuilder(this); }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;Builder();;;private Builder() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;create();;;private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.twitter.elephantbird.examples.proto.Examples.Age();
        return builder;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;internalGetResult();;;protected com.twitter.elephantbird.examples.proto.Examples.Age internalGetResult() {
        return result;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;clear();;;public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.twitter.elephantbird.examples.proto.Examples.Age();
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;clone();;;public Builder clone() {
        return create().mergeFrom(result);
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDescriptorForType();;;public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.twitter.elephantbird.examples.proto.Examples.Age.getDescriptor();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDefaultInstanceForType();;;public com.twitter.elephantbird.examples.proto.Examples.Age getDefaultInstanceForType() {
        return com.twitter.elephantbird.examples.proto.Examples.Age.getDefaultInstance();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;isInitialized();;;public boolean isInitialized() {
        return result.isInitialized();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;build();;;public com.twitter.elephantbird.examples.proto.Examples.Age build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;buildParsed();;;private com.twitter.elephantbird.examples.proto.Examples.Age buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;buildPartial();;;public com.twitter.elephantbird.examples.proto.Examples.Age buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.twitter.elephantbird.examples.proto.Examples.Age returnMe = result;
        result = null;
        return returnMe;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;mergeFrom(com.google.protobuf.Message);;;public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.twitter.elephantbird.examples.proto.Examples.Age) {
          return mergeFrom((com.twitter.elephantbird.examples.proto.Examples.Age)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;mergeFrom(com.twitter.elephantbird.examples.proto.Examples.Age);;;public Builder mergeFrom(com.twitter.elephantbird.examples.proto.Examples.Age other) {
        if (other == com.twitter.elephantbird.examples.proto.Examples.Age.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasAge()) {
          setAge(other.getAge());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 16: {
              setAge(input.readInt32());
              break;
            }
          }
        }
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;hasName();;;public boolean hasName() {
        return result.hasName();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getName();;;public java.lang.String getName() {
        return result.getName();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;setName(java.lang.String);;;public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;clearName();;;public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;hasAge();;;public boolean hasAge() {
        return result.hasAge();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getAge();;;public int getAge() {
        return result.getAge();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;setAge(int);;;public Builder setAge(int value) {
        result.hasAge = true;
        result.age_ = value;
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;clearAge();;;public Builder clearAge() {
        result.hasAge = false;
        result.age_ = 0;
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDescriptor();;;public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;internalForceInit();;;public static void internalForceInit() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/util/Protobufs;getProtobufClass(String);;;public static Class<? extends Message> getProtobufClass(String protoClassName) {
    return getProtobufClass(null, protoClassName);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/util/Protobufs;getProtobufClass(Configuration,String);;;private static Class<? extends Message> getProtobufClass(Configuration conf, String protoClassName) {
    // Try both normal name and canonical name of the class.
    Class<?> protoClass = null;
    try {
      if (conf == null) {
        protoClass = Class.forName(protoClassName);
      } else {
        protoClass = conf.getClassByName(protoClassName);
      }
    } catch (ClassNotFoundException e) {
      // the class name might be canonical name.
      protoClass = getInnerProtobufClass(protoClassName);
    }

    return protoClass.asSubclass(Message.class);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/util/Protobufs;getTypeRef(String);;;public static<M extends Message> TypeRef<M> getTypeRef(String protoClassName) {
    return new TypeRef<M>(getProtobufClass(protoClassName)){};
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/util/Protobufs;getTypeRef(Configuration,Class<?>);;;public static<M extends Message> TypeRef<M> getTypeRef(Configuration jobConf, Class<?> genericClass) {
    String className = jobConf.get(CLASS_CONF_PREFIX + genericClass.getName());
    if (className == null) {
      throw new RuntimeException(CLASS_CONF_PREFIX + genericClass.getName() + " is not set");
    }
    return new TypeRef<M>(getProtobufClass(jobConf, className)){};
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/util/Protobufs;setClassConf(Configuration,Class<?>,Class<?extendsMessage>);;;public static void setClassConf(Configuration jobConf, Class<?> genericClass,
      Class<? extends Message> protoClass) {
    jobConf.set(CLASS_CONF_PREFIX + genericClass.getName(), protoClass.getName());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufBlockOutputFormat;LzoProtobufBlockOutputFormat();;;public LzoProtobufBlockOutputFormat() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufBlockOutputFormat;getOutputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends Message> Class<LzoProtobufBlockOutputFormat>
     getOutputFormatClass(Class<M> protoClass, Configuration jobConf) {

    Protobufs.setClassConf(jobConf, LzoProtobufBlockOutputFormat.class, protoClass);
    return LzoProtobufBlockOutputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufB64LineOutputFormat;LzoProtobufB64LineOutputFormat();;;public LzoProtobufB64LineOutputFormat() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufB64LineOutputFormat;getOutputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends Message> Class<LzoProtobufB64LineOutputFormat>
     getOutputFormatClass(Class<M> protoClass, Configuration jobConf) {

    Protobufs.setClassConf(jobConf, LzoProtobufB64LineOutputFormat.class, protoClass);
    return LzoProtobufB64LineOutputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufB64LineInputFormat;getInputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends Message> Class<LzoProtobufB64LineInputFormat>
     getInputFormatClass(Class<M> protoClass, Configuration jobConf) {
    Protobufs.setClassConf(jobConf, LzoProtobufB64LineInputFormat.class, protoClass);
    return LzoProtobufB64LineInputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufBlockInputFormat;getInputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends Message> Class<LzoProtobufBlockInputFormat>
     getInputFormatClass(Class<M> protoClass, Configuration jobConf) {
    Protobufs.setClassConf(jobConf, LzoProtobufBlockInputFormat.class, protoClass);
    return LzoProtobufBlockInputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufBlockRecordReader;LzoProtobufBlockRecordReader(TypeRef<M>);;;public LzoProtobufBlockRecordReader(TypeRef<M> typeRef) {
    // input stream for the reader will be set by LzoBinaryBlockRecordReader
    super(typeRef, new ProtobufBlockReader<M>(null, typeRef), new ProtobufWritable<M>(typeRef));
    LOG.info("LzoProtobufBlockRecordReader, type args are " + typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufB64LineRecordReader;LzoProtobufB64LineRecordReader(TypeRef<M>);;;public LzoProtobufB64LineRecordReader(TypeRef<M> typeRef) {
    super(typeRef, new ProtobufWritable<M>(typeRef), ProtobufConverter.newInstance(typeRef));
    LOG.info("LzoProtobufB64LineRecordReader, type args are " + typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufWritable;newInstance(Class<M>);;;public static <M extends Message> ProtobufWritable<M> newInstance(Class<M> tClass) {
    return new ProtobufWritable<M>(new TypeRef<M>(tClass){});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter;newInstance(Class<M>);;;public static <M extends Message> ProtobufConverter<M> newInstance(Class<M> protoClass) {
    return new ProtobufConverter<M>(new TypeRef<M>(protoClass){});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter;newInstance(TypeRef<M>);;;public static <M extends Message> ProtobufConverter<M> newInstance(TypeRef<M> typeRef) {
    return new ProtobufConverter<M>(typeRef);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufBlockPigLoader;LzoProtobufBlockPigLoader(String);;;public LzoProtobufBlockPigLoader(String protoClassName) {
    TypeRef<M> typeRef = Protobufs.getTypeRef(protoClassName);
    setTypeRef(typeRef);
    setLoaderSpec(getClass(), new String[]{protoClassName});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufB64LinePigLoader;LzoProtobufB64LinePigLoader(String);;;public LzoProtobufB64LinePigLoader(String protoClassName) {
    TypeRef<M> typeRef = Protobufs.getTypeRef(protoClassName);
    setTypeRef(typeRef);
    setLoaderSpec(getClass(), new String[]{protoClassName});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b0d7a3e_6abbab9/rev_b0d7a3e-6abbab9;/src/test/com/twitter/elephantbird/util/TestProtobufs;testConverterParsing();@Test ;;@Test
/home/taes/taes//projects/jodd/revisions/rev_fa133ef_2e3ee1e/rev_fa133ef-2e3ee1e;/jodd-core/src/main/java/jodd/util/Wildcard;match(CharSequence,CharSequence);;;public static boolean match(CharSequence string, CharSequence pattern) {
		return match(string, pattern, 0, 0);
	}
/home/taes/taes//projects/jodd/revisions/rev_fa133ef_2e3ee1e/rev_fa133ef-2e3ee1e;/jodd-core/src/main/java/jodd/util/Wildcard;equalsOrMatch(CharSequence,CharSequence);;;public static boolean equalsOrMatch(CharSequence string, CharSequence pattern) {
		if (string.equals(pattern) == true) {
			return true;
		}
		return match(string, pattern, 0, 0);
	}
/home/taes/taes//projects/jodd/revisions/rev_fa133ef_2e3ee1e/rev_fa133ef-2e3ee1e;/jodd-core/src/main/java/jodd/util/Wildcard;match(CharSequence,CharSequence,int,int);;;private static boolean match(CharSequence string, CharSequence pattern, int sNdx, int pNdx) {
		int pLen = pattern.length();
		if (pLen == 1) {
			if (pattern.charAt(0) == '*') {     // speed-up
				return true;
			}
		}
		int sLen = string.length();
		boolean nextIsNotWildcard = false;

		while (true) {

			// check if end of string and/or pattern occurred
			if ((sNdx >= sLen) == true) {		// end of string still may have pending '*' in pattern
				while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) {
					pNdx++;
				}
				return pNdx >= pLen;
			}
			if (pNdx >= pLen) {					// end of pattern, but not end of the string
				return false;
			}
			char p = pattern.charAt(pNdx);		// pattern char

			// perform logic
			if (nextIsNotWildcard == false) {

				if (p == '\\') {
					pNdx++;
					nextIsNotWildcard =  true;
					continue;
				}
				if (p == '?') {
					sNdx++; pNdx++;
					continue;
				}
				if (p == '*') {
					char pNext = 0;						// next pattern char
					if (pNdx + 1 < pLen) {
						pNext = pattern.charAt(pNdx + 1);
					}
					if (pNext == '*') {					// double '*' have the same effect as one '*'
						pNdx++;
						continue;
					}
					int i;
					pNdx++;

					// find recursively if there is any substring from the end of the
					// line that matches the rest of the pattern !!!
					for (i = string.length(); i >= sNdx; i--) {
						if (match(string, pattern, i, pNdx) == true) {
							return true;
						}
					}
					return false;
				}
			} else {
				nextIsNotWildcard = false;
			}

			// check if pattern char and string char are equals
			if (p != string.charAt(sNdx)) {
				return false;
			}

			// everything matches for now, continue
			sNdx++; pNdx++;
		}
	}
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;ProtobufMRExample();;;private ProtobufMRExample() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;map(LongWritable,Text,Context);;;@Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
      StringTokenizer line = new StringTokenizer(value.toString(), "\t\r\n");
      String name;

      if (line.hasMoreTokens()
          && (name = line.nextToken()) != null
          && line.hasMoreTokens()) {
          protoWritable.set(Age.newBuilder()
                              .setName(name)
                              .setAge(Integer.parseInt(line.nextToken()))
                              .build());
          context.write(null, protoWritable);
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;runTextToLzo(String[],Configuration);;;public int runTextToLzo(String[] args, Configuration conf) throws Exception {
    Job job = new Job(conf);
    job.setJobName("Protobuf Example : Text to LzoB64Line");

    job.setJarByClass(getClass());
    job.setMapperClass(TextMapper.class);
    job.setNumReduceTasks(0);

    job.setInputFormatClass(TextInputFormat.class);
    if (conf.get("proto.test.format", "B64Line").equals("Block")) {
      job.setOutputFormatClass(LzoProtobufBlockOutputFormat.getOutputFormatClass(Age.class, job.getConfiguration()));
    } else { // assume B64Line
      job.setOutputFormatClass(LzoProtobufB64LineOutputFormat.getOutputFormatClass(Age.class, job.getConfiguration()));
    }

    FileInputFormat.setInputPaths(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));

    return job.waitForCompletion(true) ? 0 : 1;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;map(LongWritable,ProtobufWritable<Age>,Context);;;@Override
    protected void map(LongWritable key, ProtobufWritable<Age> value, Context context) throws IOException, InterruptedException {
      Age age = value.get();
      System.err.println("XXXXXXXXX got here!!");
      context.write(null, new Text(age.getName() + "\t" + age.getAge()));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;runLzoToText(String[],Configuration);;;public int runLzoToText(String[] args, Configuration conf) throws Exception {
    Job job = new Job(conf);
    job.setJobName("Protobuf Example : LzoB64Line to Text");

    job.setJarByClass(getClass());
    job.setMapperClass(LzoMapper.class);
    job.setNumReduceTasks(0);

    if (conf.get("proto.test.format", "B64Line").equals("Block")) {
      job.setInputFormatClass(LzoProtobufBlockInputFormat.getInputFormatClass(Age.class, job.getConfiguration()));
    } else {
      job.setInputFormatClass(LzoProtobufB64LineInputFormat.getInputFormatClass(Age.class, job.getConfiguration()));
    }
    job.setOutputFormatClass(TextOutputFormat.class);

    FileInputFormat.setInputPaths(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));

    return job.waitForCompletion(true) ? 0 : 1;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/java/com/twitter/elephantbird/examples/ProtobufMRExample;main(String[]);;;public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    args = new GenericOptionsParser(conf, args).getRemainingArgs();
    ProtobufMRExample runner = new ProtobufMRExample();

    if (args.length != 2) {
      System.out.println("Usage: hadoop jar path/to/this.jar " + runner.getClass() + " <input dir> <output dir>");
      System.exit(1);
    }

    String test = conf.get("proto.test", "lzoIn");

    if (test.equals("lzoIn"))
      System.exit(runner.runLzoToText(args, conf));
    if (test.equals("lzoOut"))
      System.exit(runner.runTextToLzo(args, conf));
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;Examples();;;private Examples() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;registerAllExtensions(com.google.protobuf.ExtensionRegistry);;;public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;Age();;;private Age() {
      initFields();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;Age(boolean);;;private Age(boolean noInit) {}
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDefaultInstance();;;public static Age getDefaultInstance() {
      return defaultInstance;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDefaultInstanceForType();;;public Age getDefaultInstanceForType() {
      return defaultInstance;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDescriptor();;;public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.twitter.elephantbird.examples.proto.Examples.internal_static_com_twitter_elephantbird_examples_proto_Age_descriptor;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;internalGetFieldAccessorTable();;;protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.twitter.elephantbird.examples.proto.Examples.internal_static_com_twitter_elephantbird_examples_proto_Age_fieldAccessorTable;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;hasName();;;public boolean hasName() { return hasName; }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getName();;;public java.lang.String getName() { return name_; }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;hasAge();;;public boolean hasAge() { return hasAge; }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getAge();;;public int getAge() { return age_; }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;initFields();;;private void initFields() {
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;isInitialized();;;public final boolean isInitialized() {
      return true;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;writeTo(com.google.protobuf.CodedOutputStream);;;public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasAge()) {
        output.writeInt32(2, getAge());
      }
      getUnknownFields().writeTo(output);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getSerializedSize();;;public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasAge()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getAge());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(com.google.protobuf.ByteString);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(byte[]);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(byte[],com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(java.io.InputStream);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseDelimitedFrom(java.io.InputStream);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(com.google.protobuf.CodedInputStream);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;parseFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public static com.twitter.elephantbird.examples.proto.Examples.Age parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;newBuilder();;;public static Builder newBuilder() { return Builder.create(); }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;newBuilderForType();;;public Builder newBuilderForType() { return newBuilder(); }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;newBuilder(com.twitter.elephantbird.examples.proto.Examples.Age);;;public static Builder newBuilder(com.twitter.elephantbird.examples.proto.Examples.Age prototype) {
      return newBuilder().mergeFrom(prototype);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;toBuilder();;;public Builder toBuilder() { return newBuilder(this); }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;Builder();;;private Builder() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;create();;;private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.twitter.elephantbird.examples.proto.Examples.Age();
        return builder;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;internalGetResult();;;protected com.twitter.elephantbird.examples.proto.Examples.Age internalGetResult() {
        return result;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;clear();;;public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.twitter.elephantbird.examples.proto.Examples.Age();
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;clone();;;public Builder clone() {
        return create().mergeFrom(result);
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDescriptorForType();;;public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.twitter.elephantbird.examples.proto.Examples.Age.getDescriptor();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDefaultInstanceForType();;;public com.twitter.elephantbird.examples.proto.Examples.Age getDefaultInstanceForType() {
        return com.twitter.elephantbird.examples.proto.Examples.Age.getDefaultInstance();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;isInitialized();;;public boolean isInitialized() {
        return result.isInitialized();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;build();;;public com.twitter.elephantbird.examples.proto.Examples.Age build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;buildParsed();;;private com.twitter.elephantbird.examples.proto.Examples.Age buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;buildPartial();;;public com.twitter.elephantbird.examples.proto.Examples.Age buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.twitter.elephantbird.examples.proto.Examples.Age returnMe = result;
        result = null;
        return returnMe;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;mergeFrom(com.google.protobuf.Message);;;public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.twitter.elephantbird.examples.proto.Examples.Age) {
          return mergeFrom((com.twitter.elephantbird.examples.proto.Examples.Age)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;mergeFrom(com.twitter.elephantbird.examples.proto.Examples.Age);;;public Builder mergeFrom(com.twitter.elephantbird.examples.proto.Examples.Age other) {
        if (other == com.twitter.elephantbird.examples.proto.Examples.Age.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasAge()) {
          setAge(other.getAge());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 16: {
              setAge(input.readInt32());
              break;
            }
          }
        }
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;hasName();;;public boolean hasName() {
        return result.hasName();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getName();;;public java.lang.String getName() {
        return result.getName();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;setName(java.lang.String);;;public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;clearName();;;public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;hasAge();;;public boolean hasAge() {
        return result.hasAge();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getAge();;;public int getAge() {
        return result.getAge();
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;setAge(int);;;public Builder setAge(int value) {
        result.hasAge = true;
        result.age_ = value;
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;clearAge();;;public Builder clearAge() {
        result.hasAge = false;
        result.age_ = 0;
        return this;
      }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;getDescriptor();;;public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/examples/src/gen-java/com/twitter/elephantbird/examples/proto/Examples;internalForceInit();;;public static void internalForceInit() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/util/Protobufs;getProtobufClass(String);;;public static Class<? extends Message> getProtobufClass(String protoClassName) {
    return getProtobufClass(null, protoClassName);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/util/Protobufs;getProtobufClass(Configuration,String);;;private static Class<? extends Message> getProtobufClass(Configuration conf, String protoClassName) {
    // Try both normal name and canonical name of the class.
    Class<?> protoClass = null;
    try {
      if (conf == null) {
        protoClass = Class.forName(protoClassName);
      } else {
        protoClass = conf.getClassByName(protoClassName);
      }
    } catch (ClassNotFoundException e) {
      // the class name might be canonical name.
      protoClass = getInnerProtobufClass(protoClassName);
    }

    return protoClass.asSubclass(Message.class);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/util/Protobufs;getTypeRef(String);;;public static<M extends Message> TypeRef<M> getTypeRef(String protoClassName) {
    return new TypeRef<M>(getProtobufClass(protoClassName)){};
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/util/Protobufs;getTypeRef(Configuration,Class<?>);;;public static<M extends Message> TypeRef<M> getTypeRef(Configuration jobConf, Class<?> genericClass) {
    String className = jobConf.get(CLASS_CONF_PREFIX + genericClass.getName());
    if (className == null) {
      throw new RuntimeException(CLASS_CONF_PREFIX + genericClass.getName() + " is not set");
    }
    return new TypeRef<M>(getProtobufClass(jobConf, className)){};
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/util/Protobufs;setClassConf(Configuration,Class<?>,Class<?extendsMessage>);;;public static void setClassConf(Configuration jobConf, Class<?> genericClass,
      Class<? extends Message> protoClass) {
    jobConf.set(CLASS_CONF_PREFIX + genericClass.getName(), protoClass.getName());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufBlockOutputFormat;LzoProtobufBlockOutputFormat();;;public LzoProtobufBlockOutputFormat() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufBlockOutputFormat;getOutputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends Message> Class<LzoProtobufBlockOutputFormat>
     getOutputFormatClass(Class<M> protoClass, Configuration jobConf) {

    Protobufs.setClassConf(jobConf, LzoProtobufBlockOutputFormat.class, protoClass);
    return LzoProtobufBlockOutputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufB64LineOutputFormat;LzoProtobufB64LineOutputFormat();;;public LzoProtobufB64LineOutputFormat() {}
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufB64LineOutputFormat;getOutputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends Message> Class<LzoProtobufB64LineOutputFormat>
     getOutputFormatClass(Class<M> protoClass, Configuration jobConf) {

    Protobufs.setClassConf(jobConf, LzoProtobufB64LineOutputFormat.class, protoClass);
    return LzoProtobufB64LineOutputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufB64LineInputFormat;getInputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends Message> Class<LzoProtobufB64LineInputFormat>
     getInputFormatClass(Class<M> protoClass, Configuration jobConf) {
    Protobufs.setClassConf(jobConf, LzoProtobufB64LineInputFormat.class, protoClass);
    return LzoProtobufB64LineInputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufBlockInputFormat;getInputFormatClass(Class<M>,Configuration);;;@SuppressWarnings("unchecked")
  public static <M extends Message> Class<LzoProtobufBlockInputFormat>
     getInputFormatClass(Class<M> protoClass, Configuration jobConf) {
    Protobufs.setClassConf(jobConf, LzoProtobufBlockInputFormat.class, protoClass);
    return LzoProtobufBlockInputFormat.class;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufBlockRecordReader;LzoProtobufBlockRecordReader(TypeRef<M>);;;public LzoProtobufBlockRecordReader(TypeRef<M> typeRef) {
    // input stream for the reader will be set by LzoBinaryBlockRecordReader
    super(typeRef, new ProtobufBlockReader<M>(null, typeRef), new ProtobufWritable<M>(typeRef));
    LOG.info("LzoProtobufBlockRecordReader, type args are " + typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufB64LineRecordReader;LzoProtobufB64LineRecordReader(TypeRef<M>);;;public LzoProtobufB64LineRecordReader(TypeRef<M> typeRef) {
    super(typeRef, new ProtobufWritable<M>(typeRef), ProtobufConverter.newInstance(typeRef));
    LOG.info("LzoProtobufB64LineRecordReader, type args are " + typeRef.getRawClass());
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufWritable;newInstance(Class<M>);;;public static <M extends Message> ProtobufWritable<M> newInstance(Class<M> tClass) {
    return new ProtobufWritable<M>(new TypeRef<M>(tClass){});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter;newInstance(Class<M>);;;public static <M extends Message> ProtobufConverter<M> newInstance(Class<M> protoClass) {
    return new ProtobufConverter<M>(new TypeRef<M>(protoClass){});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/mapreduce/io/ProtobufConverter;newInstance(TypeRef<M>);;;public static <M extends Message> ProtobufConverter<M> newInstance(TypeRef<M> typeRef) {
    return new ProtobufConverter<M>(typeRef);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufBlockPigLoader;LzoProtobufBlockPigLoader(String);;;public LzoProtobufBlockPigLoader(String protoClassName) {
    TypeRef<M> typeRef = Protobufs.getTypeRef(protoClassName);
    setTypeRef(typeRef);
    setLoaderSpec(getClass(), new String[]{protoClassName});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufB64LinePigLoader;LzoProtobufB64LinePigLoader(String);;;public LzoProtobufB64LinePigLoader(String protoClassName) {
    TypeRef<M> typeRef = Protobufs.getTypeRef(protoClassName);
    setTypeRef(typeRef);
    setLoaderSpec(getClass(), new String[]{protoClassName});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_1416fa5_839a574/rev_1416fa5-839a574;/src/test/com/twitter/elephantbird/util/TestProtobufs;testConverterParsing();@Test ;;@Test
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/TestUtils;stringWithLength(int);;;public static String stringWithLength(int length) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < length; i++) {
            stringBuilder.append((char) (i + 65));
        }
        return stringBuilder.toString();
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/ValidationConstraintContextTest;testConstructor();;;@Test
    public void testConstructor() throws Exception {
        Vtor vtor = mock(Vtor.class);
        Object target = new Object();
        ValidationConstraintContext context = new ValidationConstraintContext(vtor, target, "niceConstraint");
        assertEquals(context.getName(), "niceConstraint");
        assertEquals(context.getTarget(), target);
        assertEquals(context.getValidator(), vtor);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/ValidationConstraintContextTest;testValidateWithin();;;@Test
    public void testValidateWithin() throws Exception {
        Vtor vtor = mock(Vtor.class);
        Object target = new Object();
        ValidationConstraintContext context = new ValidationConstraintContext(vtor, target, "niceConstraint");

        ValidationContext vctx = mock(ValidationContext.class);
        Object value = new Object();
        //when
        context.validateWithin(vctx, value);
        //then
        verify(vtor).validate(eq(vctx), eq(value), eq("niceConstraint"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorExceptionTest;testConstructor1();;;@Test
    public void testConstructor1() {
        //given
        RuntimeException cause = new RuntimeException("test");
        //when
        VtorException vtorException = new VtorException(cause);
        //then
        assertEquals("created instance must have the same cause as was given to its constructor", vtorException.getCause(), cause);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorExceptionTest;testConstructor2();;;@Test
    public void testConstructor2() {
        //given
        String message = "test";
        //when
        VtorException vtorException = new VtorException(message);
        //then
        assertEquals("created instance must have the same message as was given to its constructor", vtorException.getMessage(), message);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorExceptionTest;testConstructor3();;;@Test
    public void testConstructor3() {
        //given
        String message = "test";
        RuntimeException cause = new RuntimeException();
        //when
        VtorException vtorException = new VtorException(message, cause);
        //then
        assertEquals("created instance must return message with cause details when create instance with message and some cause", vtorException.getMessage(), message+"; <--- java.lang.RuntimeException");
        assertEquals("created instance must have the same cause as was given to its constructor", vtorException.getCause(), cause);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesWithResetedProfilesTest;setup();;;@Before
    public void setup() {
        //given
        vtor = new Vtor();
        vtor.resetProfiles();
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesWithResetedProfilesTest;testValidateAllProfilesByDefaultIsTrue();;;@Test
    public void testValidateAllProfilesByDefaultIsTrue() {
        vtor.setValidateAllProfilesByDefault(true);
        assertTrue("any profile must match when property ValidateAllProfilesByDefault is active",
                vtor.matchProfiles(new String[]{"testProfile"}));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesWithResetedProfilesTest;testNullProfiles();;;@Test
    public void testNullProfiles() {
        assertTrue("result mast be true when match null value instead of profiles",
                vtor.matchProfiles(null));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesWithResetedProfilesTest;testEmptyListOfProfiles();;;@Test
    public void testEmptyListOfProfiles() {
        assertTrue("result mast be true when match an empty list of profiles",
                vtor.matchProfiles(new String[]{}));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesWithResetedProfilesTest;testOneProfileIsEmpty();;;@Test
    public void testOneProfileIsEmpty() {
        assertTrue("result mast be true when match a list with an empty profile",
                vtor.matchProfiles(new String[]{"", "testProfile"}));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesWithResetedProfilesTest;testOneProfileIsDefault();;;@Test
    public void testOneProfileIsDefault() {
        assertTrue("result mast be true when match a list with a default profile",
                vtor.matchProfiles(new String[]{Vtor.DEFAULT_PROFILE, "testProfile"}));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesWithResetedProfilesTest;testNonSpecialProfiles();;;@Test
    public void testNonSpecialProfiles(){
        assertFalse("result must be false when match non special profiles",
                vtor.matchProfiles(new String[]{"testProfile1", "testProfile2"}));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorTestSupport;createCheckWithProfile(String,String,ValidationConstraint);;;protected Check createCheckWithProfile(String name, String profile, ValidationConstraint constraint) {
        Check check = new Check(name, constraint);
        check.setProfiles(profile);
        return check;
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorTestSupport;mockValidationContext(Map<String,List<Check>>);;;protected ValidationContext mockValidationContext(Map<String, List<Check>> constraints) {
        ValidationContext res = new ValidationContext();
        res.map.putAll(constraints);
        return res;
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesTest;setup();;;@Before
    public void setup() {
        vtor = new Vtor();
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesTest;testAllProfiles();;;@Test
    public void testAllProfiles() {
        assertTrue("result must be true when match a list with one element which is *", vtor.matchProfiles(new String[]{Vtor.ALL_PROFILES}));
        assertFalse("result must be false when match a list with many elements", vtor.matchProfiles(new String[]{Vtor.ALL_PROFILES, "someProfile"}));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesTest;testMatchProfilesAgainstSomeProfile();;;@Test
    public void testMatchProfilesAgainstSomeProfile() {
        //when
        vtor.useProfile("testProfile1");

        //then
        assertFalse("result must be false when match null value",
                vtor.matchProfiles(null));

        assertFalse("result must be false when match list of profiles without any assigned profiles",
                vtor.matchProfiles(new String[]{"testProfile2", "testProfile3"}));

        assertTrue("result must be true when match list of profiles with one assigned profile",
                vtor.matchProfiles(new String[]{"testProfile1", "testProfile2", "testProfile3"}));

        assertTrue("result must be true when match list of profiles with one assigned profile",
                vtor.matchProfiles(new String[]{"testProfile1", "testProfile2", "testProfile3"}));

        assertTrue("result must be true when match list of profiles with one assigned profile",
                vtor.matchProfiles(new String[]{"testProfile1", "testProfile2", "testProfile3"}));

        assertTrue("result must be true when match list of profiles with one assigned profile",
                vtor.matchProfiles(new String[]{"testProfile1", "testProfile2", "testProfile3"}));

        assertTrue("result must be true when match unordered list of profiles with one assigned profile",
                vtor.matchProfiles(new String[]{"testProfile2", "testProfile1", "testProfile3"}));

        assertFalse("result must be false when match a list of profiles with one wrong mandatory profile",
                vtor.matchProfiles(new String[]{"+testProfile2", "testProfile1", "testProfile3"}));

        assertFalse("result must be false when match a list of profiles with one assigned profile which was marked as optional",
                vtor.matchProfiles(new String[]{"testProfile2", "-testProfile1", "testProfile3"}));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/VtorMatchProfilesTest;testDefaultProfile();;;@Test
    public void testDefaultProfile() {
        //when
        vtor.useProfile(Vtor.DEFAULT_PROFILE);

        //then
        assertTrue("result must be true when match null value", vtor.matchProfiles(null));
        assertTrue("result must be true when match a list with empty profile", vtor.matchProfiles(new String[]{"testProfile2", "", "testProfile3"}));
        assertFalse("result must be false when match a list without empty profile", vtor.matchProfiles(new String[]{"testProfile2", "testProfile3"}));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/ViolationTest;testConstructor1();;;@Test
    public void testConstructor1() throws Exception {
        //given
        Object validatedObject = new Object();
        Object invalidValue = new Object();

        //when
        Violation violation = new Violation("niceViolation", validatedObject, invalidValue);

        //then
        assertEquals("validatedObject must be equal to a validatedObject which was given to constructor", violation.getValidatedObject(), validatedObject);
        assertEquals("invalidValue must be equal to a invalidValue which was given to constructor", violation.getInvalidValue(), invalidValue);
        assertNull("violation must be null", violation.getCheck());
        assertNull("constraint must be null", violation.getConstraint());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/ViolationTest;testConstructor2();;;@Test
    public void testConstructor2() throws Exception {
        //given
        Object validatedObject = new Object();
        Object invalidValue = new Object();
        ValidationConstraint constr = mock(ValidationConstraint.class);
        Check niceCheck = new Check("niceCheck", constr);

        //when
        Violation violation = new Violation("niceViolation", validatedObject, invalidValue, niceCheck);

        //then
        assertEquals("name must be equal to a name of violation which was given to constructor", violation.getName(), "niceViolation");
        assertEquals("ValidatedObject must be equal to a ValidatedObject which was given to constructor", violation.getValidatedObject(), validatedObject);
        assertEquals("InvalidValue must be equal to a InvalidValue which was given to constructor", violation.getInvalidValue(), invalidValue);
        assertEquals("Check must be equal to a Check which was given to constructor", violation.getCheck(), niceCheck);
        assertEquals("Constraint must be equal to a Constraint which was given to constructor", violation.getConstraint(), constr);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/ViolationTest;testToString();;;@Test
    public void testToString() throws Exception {
        //given
        Object validatedObject = new Object();
        Object invalidValue = new Object();
        Violation violation = new Violation("niceViolation", validatedObject, invalidValue, new Check("niceCheck", new TestValidationConstraint()));

        //when
        String toString = violation.toString();

        //then
        assertEquals(toString, "Violation{niceViolation:jodd.vtor.ViolationTest$TestValidationConstraint}");
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/ViolationTest;configure(Annotation);;;@Override
        public void configure(Annotation annotation) {

        }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/ViolationTest;isValid(ValidationConstraintContext,Object);;;@Override
        public boolean isValid(ValidationConstraintContext vcc, Object value) {
            return false;
        }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/ManualTest;testManualConfig();;;		assertNull(v.getCheck().getMessage());
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinLengthConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        MinLengthConstraint minLengthConstraint = new MinLengthConstraint();
        assertEquals("value must be default", minLengthConstraint.getMin(), 0);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinLengthConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        MinLengthConstraint minLengthConstraint = new MinLengthConstraint(10);
        assertEquals("value must be the same as was given to constructor", minLengthConstraint.getMin(), 10);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinLengthConstraintTest;testSetMin();;;@Test
    public void testSetMin() {
        MinLengthConstraint minLengthConstraint = new MinLengthConstraint();
        minLengthConstraint.setMin(10);
        assertEquals("min value must be the same as was given to set method", minLengthConstraint.getMin(), 10);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinLengthConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        MinLengthConstraint minLengthConstraint = new MinLengthConstraint();
        MinLength annotation = mock(MinLength.class);
        stub(annotation.value()).toReturn(10);

        minLengthConstraint.configure(annotation);
        assertEquals("min value must be the same as was set to annotation when configure", minLengthConstraint.getMin(), 10);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinLengthConstraintTest;testValidate_WithNullValue();;;@Test
    public void testValidate_WithNullValue() {
        assertTrue("result must be true when validate a null value", MinLengthConstraint.validate(null, 1));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinLengthConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        int min = 3;
        MinLengthConstraint minLengthConstraint = new MinLengthConstraint(min);
        assertTrue("result must be true when validate string with length greater than min", minLengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(min)));
        assertTrue("result must be true when validate string with length equal to min", minLengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(min)));
        assertFalse("result must be false when validate string with length less than min", minLengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(min - 1)));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/AssertValidConstraintTest;testIsValid_withNullValue();;;@Test
    public void testIsValid_withNullValue() {
        //given
        ValidationContext targetValidationContext = mock(ValidationContext.class);
        AssertValidConstraint assertValidConstraint = new AssertValidConstraint(targetValidationContext);
        ValidationConstraintContext vcc = mockContext();

        //when
        boolean valid = assertValidConstraint.isValid(vcc, null);

        //then
        assertTrue("result must be true when validate null value", valid);
        verify(vcc, never()).validateWithin(eq(targetValidationContext), isNull());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/AssertValidConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        //given
        ValidationContext targetValidationContext = mock(ValidationContext.class);
        AssertValidConstraint assertValidConstraint = new AssertValidConstraint(targetValidationContext);
        ValidationConstraintContext vcc = mockContext();
        Object someValue = new Object();
        //this method is empty so nothing to check
        assertValidConstraint.configure(null);

        //when validate some value
        boolean valid = assertValidConstraint.isValid(vcc, someValue);

        //then validateWithin must be called for validated value
        assertTrue("result must be true when validate not value", valid);
        //validateWithin must be called for validated value
        verify(vcc).validateWithin(eq(targetValidationContext), eq(someValue));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/NotNullConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        NotNullConstraint notNullConstraint = new NotNullConstraint();
        //this is an empty method nothing can be verified
        notNullConstraint.configure(null);

        assertTrue("result must be true when validate not null value", notNullConstraint.isValid(mockContext(), new Object()));
        assertFalse("result must be false when validate null value", notNullConstraint.isValid(mockContext(), null));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/RangeConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        RangeConstraint rangeConstraint = new RangeConstraint();
        assertEquals("value must be default", rangeConstraint.getMin(), 0.0, 0.01);
        assertEquals("value must be default", rangeConstraint.getMax(), 0.0, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/RangeConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        RangeConstraint rangeConstraint = new RangeConstraint(1.1, 10.1);
        assertEquals("min value must be the same as was given to constructor", rangeConstraint.getMin(), 1.1, 0.01);
        assertEquals("max value must be the same as was given to constructor", rangeConstraint.getMax(), 10.1, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/RangeConstraintTest;testSetMinMax();;;@Test
    public void testSetMinMax() {
        RangeConstraint rangeConstraint = new RangeConstraint();
        rangeConstraint.setMin(1.1);
        rangeConstraint.setMax(10.1);
        assertEquals("method must return the same value as was given to set method", rangeConstraint.getMin(), 1.1, 0.01);
        assertEquals("method must return the same value as was given to set method", rangeConstraint.getMax(), 10.1, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/RangeConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        RangeConstraint rangeConstraint = new RangeConstraint();
        Range annotation = mock(Range.class);
        stub(annotation.min()).toReturn(1.1);
        stub(annotation.max()).toReturn(10.1);

        rangeConstraint.configure(annotation);
        assertEquals("method must return the same value as was set to annotation when configure", rangeConstraint.getMin(), 1.1, 0.01);
        assertEquals("method must return the same value as was set to annotation when configure", rangeConstraint.getMax(), 10.1, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/RangeConstraintTest;testValidate_WithValIsNull();;;@Test
    public void testValidate_WithValIsNull() {
        assertTrue("result must be true when validate null value", RangeConstraint.validate(null, 1, 2));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/RangeConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        assertFalse("result must be false when validate value less than min", new RangeConstraint(1.1, 2.0).isValid(mockContext(), "1.0"));
        assertFalse("result must be false when validate value grater than max", new RangeConstraint(1.1, 3.0).isValid(mockContext(), "3.1"));
        assertTrue("result must be true when validate value grater than min and less than max", new RangeConstraint(2.0, 3.0).isValid(mockContext(), "2.8"));
        assertTrue("result must be true when validate value equal to min", new RangeConstraint(2.1, 3.0).isValid(mockContext(), "2.1"));
        assertTrue("result must be true when validate value equal to max", new RangeConstraint(1.0, 2.1).isValid(mockContext(), "2.1"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardMatchConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        WildcardMatchConstraint wildcardMatchConstraint = new WildcardMatchConstraint();
        assertNull("pattern value must be null by default", wildcardMatchConstraint.getPattern());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardMatchConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        String pattern = "foo";
        WildcardMatchConstraint wildcardMatchConstraint = new WildcardMatchConstraint(pattern);
        assertEquals("pattern must be the same as was given to constructor", wildcardMatchConstraint.getPattern(), pattern);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardMatchConstraintTest;testSetPattern();;;@Test
    public void testSetPattern() {
        WildcardMatchConstraint wildcardMatchConstraint = new WildcardMatchConstraint();
        String pattern = "foo";
        wildcardMatchConstraint.setPattern(pattern);
        assertEquals("method must return the same pattern as was given to set method", wildcardMatchConstraint.getPattern(), pattern);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardMatchConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        WildcardMatchConstraint wildcardMatchConstraint = new WildcardMatchConstraint();
        WildcardMatch annotation = mock(WildcardMatch.class);
        String pattern = "foo";
        stub(annotation.value()).toReturn(pattern);
        wildcardMatchConstraint.configure(annotation);
        assertEquals("method must return the same pattern as was set to annotation when configure", wildcardMatchConstraint.getPattern(), pattern);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardMatchConstraintTest;testValidate_WithValIsNull();;;@Test
    public void testValidate_WithValIsNull() {
        assertTrue("result must be true when validate null value", WildcardMatchConstraint.validate(null, "*"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardMatchConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        assertTrue(new WildcardMatchConstraint("a?c").isValid(mockContext(), "abc"));
        assertFalse(new WildcardMatchConstraint("axc").isValid(mockContext(), "abc"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/AssertTrueConstraintTest;testAssertTrue();;;@Test
    public void testAssertTrue() {
        AssertTrueConstraint assertTrueConstraint = new AssertTrueConstraint();
        //this is an empty method nothing can be verified
        assertTrueConstraint.configure(null);
        assertTrue(assertTrueConstraint.isValid(mockContext(), "on"));
        assertTrue(assertTrueConstraint.isValid(mockContext(), null));
        assertTrue(assertTrueConstraint.isValid(mockContext(), Boolean.TRUE));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;testValidate_withNullValue();;;@Test
    public void testValidate_withNullValue() {
        assertTrue("result must be true when validate null value",
                EqualToDeclaredFieldConstraint.validate(new Object(), null, "someField"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;testConstructor();;;@Test
    public void testConstructor() {
        EqualToDeclaredFieldConstraint equalToDeclaredFieldConstraint = new EqualToDeclaredFieldConstraint();
        assertNull(equalToDeclaredFieldConstraint.getFieldName());
        String fieldName = "testField";
        equalToDeclaredFieldConstraint = new EqualToDeclaredFieldConstraint(fieldName);
        assertEquals("field name must be the same as was given to constructor", equalToDeclaredFieldConstraint.getFieldName(), fieldName);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;testSetFieldName();;;@Test
    public void testSetFieldName() {
        EqualToDeclaredFieldConstraint equalToDeclaredFieldConstraint = new EqualToDeclaredFieldConstraint();
        String fieldName = "someField";
        equalToDeclaredFieldConstraint.setFieldName(fieldName);
        assertEquals("value must be the same as was given to set method", equalToDeclaredFieldConstraint.getFieldName(), fieldName);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        EqualToDeclaredFieldConstraint equalToDeclaredFieldConstraint = new EqualToDeclaredFieldConstraint();
        //set a field name through an annotation
        EqualToDeclaredField fldAnnotation = mock(EqualToDeclaredField.class);
        String field = "anotherField";
        stub(fldAnnotation.value()).toReturn(field);

        equalToDeclaredFieldConstraint.configure(fldAnnotation);
        assertEquals("field name must be the same as was set to annotation when configure",
                equalToDeclaredFieldConstraint.getFieldName(), field);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;testIsValid_forEqualValues();;;@Test
    public void testIsValid_forEqualValues() {
        EqualToDeclaredFieldConstraint equalToDeclaredFieldConstraint = new EqualToDeclaredFieldConstraint("testField");
        ValidationConstraintContext cvv = mockContext();
        stub(cvv.getTarget()).toReturn(new TestValue("someValue"));

        assertTrue("result must be true when field and value are equals",  equalToDeclaredFieldConstraint.isValid(cvv, "someValue"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;testIsValid_forDifferentValues();;;@Test
    public void testIsValid_forDifferentValues() {
        EqualToDeclaredFieldConstraint equalToDeclaredFieldConstraint = new EqualToDeclaredFieldConstraint("testField");
        ValidationConstraintContext cvv = mockContext();
        stub(cvv.getTarget()).toReturn(new TestValue("someValue"));

        assertFalse("result must be false when validated field and value are different",  equalToDeclaredFieldConstraint.isValid(cvv, "wrongValue"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;testValidate_FieldNotFound();;;@Test(expected = VtorException.class)
    public void testValidate_FieldNotFound() {
        TestValue testVal = new TestValue("someValue");
        EqualToDeclaredFieldConstraint.validate(testVal, "someValue", "wrongField");
        fail("EqualToDeclaredFieldConstraint should throw VtorException when receive nonexistent field name");
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;testValidate_FieldValueIsNull();;;@Test
    public void testValidate_FieldValueIsNull() {
        TestValue testVal = new TestValue(null);
        assertFalse("result must be false when field value is null", EqualToDeclaredFieldConstraint.validate(testVal, "someValue", "testField"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToDeclaredFieldConstraintTest;TestValue(String);;;public TestValue(String testField) {
            this.testField = testField;
        }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeBeforeConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        TimeBeforeConstraint timeBeforeConstraint = new TimeBeforeConstraint();
        assertNull("time value must be null by default", timeBeforeConstraint.getTime());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeBeforeConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        JDateTime time = new JDateTime();
        TimeBeforeConstraint timeBeforeConstraint = new TimeBeforeConstraint(time);
        assertEquals("time must be the same as was given to constructor", timeBeforeConstraint.getTime(), time);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeBeforeConstraintTest;testSetTime();;;@Test
    public void testSetTime() {
        TimeBeforeConstraint timeBeforeConstraint = new TimeBeforeConstraint();
        JDateTime time = new JDateTime();
        timeBeforeConstraint.setTime(time);
        assertEquals("method must return the same time as was given to set method", timeBeforeConstraint.getTime(), time);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeBeforeConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        TimeBeforeConstraint timeBeforeConstraint = new TimeBeforeConstraint();
        JDateTime time = new JDateTime();
        timeBeforeConstraint.setTime(time);
        TimeBefore annotation = mock(TimeBefore.class);
        stub(annotation.value()).toReturn(JDateTimeDefault.formatter.convert(time, JDateTimeDefault.format));

        timeBeforeConstraint.configure(annotation);
        assertEquals("method must return the same time as was set to annotation when configure", timeBeforeConstraint.getTime(), time);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeBeforeConstraintTest;testValidate_WithValIsNull();;;@Test
    public void testValidate_WithValIsNull() {
        assertTrue("result must be true when validate null value", TimeBeforeConstraint.validate(null, new JDateTime("2011-05-01 10:11:12.344")));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeBeforeConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        JDateTime time = new JDateTime("2011-05-01 10:11:12.344");
        TimeBeforeConstraint constraint = new TimeBeforeConstraint(time.clone());

        assertFalse("result must be true when validate time which is equal to constraint time", constraint.isValid(mockContext(), time.clone()));
        assertTrue("result must be false when validate time which is less than constraint time", constraint.isValid(mockContext(), time.clone().subMinute(1)));
        assertFalse("result must be true when validate time which is greater than constraint time", constraint.isValid(mockContext(), time.clone().addMinute(1)));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/AssertFalseConstraintTest;testAssertFalse();;;@Test
    public void testAssertFalse() {
        AssertFalseConstraint assertFalseConstraint = new AssertFalseConstraint();
        //this is an empty method nothing can be verified
        assertFalseConstraint.configure(null);
        ValidationConstraintContext vc = mockContext();
        assertTrue(assertFalseConstraint.isValid(mockContext(), "false"));
        assertTrue(assertFalseConstraint.isValid(vc, null));
        assertTrue(assertFalseConstraint.isValid(vc, Boolean.FALSE));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/AssertFalseConstraintTest;testAssertTrue();;;@Test
    public void testAssertTrue() {
        AssertFalseConstraint assertFalseConstraint = new AssertFalseConstraint();
        //this is an empty method nothing can be verified
        assertFalseConstraint.configure(null);
        ValidationConstraintContext vc = mockContext();
        assertFalse(assertFalseConstraint.isValid(mockContext(), "true"));
        assertFalse(assertFalseConstraint.isValid(vc, Boolean.TRUE));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/LengthConstraintTest;testValidate_WithNullValue();;;@Test
    public void testValidate_WithNullValue() {
        assertTrue("result must be true when validate a null value", LengthConstraint.validate(null, 1, 2));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/LengthConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        LengthConstraint lengthConstraint = new LengthConstraint();
        assertEquals("value must be default", lengthConstraint.getMin(), 0);
        assertEquals("value must be default", lengthConstraint.getMax(), 0);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/LengthConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        LengthConstraint lengthConstraint = new LengthConstraint(5, 10);
        assertEquals("min value must be the same as was given to constructor", lengthConstraint.getMin(), 5);
        assertEquals("max value must be the same as was given to constructor", lengthConstraint.getMax(), 10);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/LengthConstraintTest;testSetMinMax();;;@Test
    public void testSetMinMax() {
        LengthConstraint lengthConstraint = new LengthConstraint();
        lengthConstraint.setMin(5);
        lengthConstraint.setMax(10);
        assertEquals("min value must be the same as was given to set method", lengthConstraint.getMin(), 5);
        assertEquals("max value must be the same as was given to set method", lengthConstraint.getMax(), 10);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/LengthConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        LengthConstraint lengthConstraint = new LengthConstraint();
        Length annotation = mock(Length.class);
        stub(annotation.min()).toReturn(5);
        stub(annotation.max()).toReturn(10);

        lengthConstraint.configure(annotation);
        assertEquals("min value must be the same as was set to annotation when configure", lengthConstraint.getMin(), 5);
        assertEquals("max value must be the same as was set to annotation when configure", lengthConstraint.getMax(), 10);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/LengthConstraintTest;testLengthConstraint();;;@Test
    public void testLengthConstraint() {
        LengthConstraint lengthConstraint = new LengthConstraint(4, 6);
        assertFalse("result must be false when validate string with length 7 ", lengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(7)));
        assertFalse("result must be false when validate string with length 3", lengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(3)));
        assertTrue("result must be true when validate string with length 4", lengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(4)));
        assertTrue("result must be true when validate string with length 6", lengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(6)));
        assertTrue("result must be true when validate string with length 5", lengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(5)));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/ConstraintTestBase;mockContext();;;protected ValidationConstraintContext mockContext() {
        return mock(ValidationConstraintContext.class);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardPathMatchConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        WildcardPathMatchConstraint wildcardPathMatchConstraint = new WildcardPathMatchConstraint();
        assertNull(wildcardPathMatchConstraint.getPattern());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardPathMatchConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        WildcardPathMatchConstraint wildcardPathMatchConstraint = new WildcardPathMatchConstraint("foo");
        assertEquals(wildcardPathMatchConstraint.getPattern(), "foo");
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardPathMatchConstraintTest;testSetPattern();;;@Test
    public void testSetPattern() {
        WildcardPathMatchConstraint wildcardPathMatchConstraint = new WildcardPathMatchConstraint();
        String pattern = "foo";
        wildcardPathMatchConstraint.setPattern(pattern);

        assertEquals("method must return the same pattern as was given to set method", wildcardPathMatchConstraint.getPattern(), pattern);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardPathMatchConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        WildcardPathMatchConstraint wildcardPathMatchConstraint = new WildcardPathMatchConstraint();
        WildcardPathMatch annotation = mock(WildcardPathMatch.class);
        String pattern = "foo";
        stub(annotation.value()).toReturn(pattern);

        wildcardPathMatchConstraint.configure(annotation);
        assertEquals("method must return the same pattern as was set to annotation when configure", wildcardPathMatchConstraint.getPattern(), pattern);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardPathMatchConstraintTest;testValidate_WithValIsNull();;;@Test
    public void testValidate_WithValIsNull() {
        assertTrue(WildcardPathMatchConstraint.validate(null, "*"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/WildcardPathMatchConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        assertTrue(new WildcardPathMatchConstraint("/dir/**").isValid(mockContext(), "/dir/abc"));
        assertFalse(new WildcardPathMatchConstraint("/dir/abz").isValid(mockContext(), "/dir/abc"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        String someStr = "someStr";
        HasSubstringConstraint hasSubstringConstraint = new HasSubstringConstraint(someStr, true);
        assertEquals("string must be the same as was given to constructor", hasSubstringConstraint.getSubstring(), someStr);
        assertTrue(hasSubstringConstraint.isIgnoreCase());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        HasSubstringConstraint hasSubstringConstraint = new HasSubstringConstraint();
        assertNull(hasSubstringConstraint.getSubstring());
        assertFalse(hasSubstringConstraint.isIgnoreCase());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        HasSubstringConstraint hasSubstringConstraint = new HasSubstringConstraint();
        HasSubstring annotation = mock(HasSubstring.class);
        String substring = "testString";
        boolean ignoreCase = true;
        stub(annotation.value()).toReturn(substring);
        stub(annotation.ignoreCase()).toReturn(ignoreCase);

        hasSubstringConstraint.configure(annotation);
        assertEquals("substring must be the same as was set to annotation when configure",
                hasSubstringConstraint.getSubstring(), substring);

        assertEquals("ignoreCase must be the same as was set to annotation when configure",
                hasSubstringConstraint.isIgnoreCase(), ignoreCase);

    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest;testSetSubstring();;;@Test
    public void testSetSubstring() {
        HasSubstringConstraint hasSubstringConstraint = new HasSubstringConstraint();
        String someStr = "someStr";
        hasSubstringConstraint.setSubstring(someStr);
        assertEquals("string must be the same as was given to set method", hasSubstringConstraint.getSubstring(), someStr);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest;testSetIgnoreCase();;;@Test
    public void testSetIgnoreCase() {
        HasSubstringConstraint hasSubstringConstraint = new HasSubstringConstraint();
        hasSubstringConstraint.setIgnoreCase(true);
        assertTrue("IgnoreCase must be the same as was given to set method", hasSubstringConstraint.isIgnoreCase());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest;testValidate_WithNullValue();;;@Test
    public void testValidate_WithNullValue() {
        HasSubstringConstraint hasSubstringConstraint = new HasSubstringConstraint();
        assertTrue("result must be true when validate a null value", hasSubstringConstraint.isValid(mockContext(), null));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest;testIgnoreCase_False();;;@Test
    public void testIgnoreCase_False() {
        HasSubstringConstraint hasSubstringConstraint = new HasSubstringConstraint();
        hasSubstringConstraint.setSubstring("al");
        hasSubstringConstraint.setIgnoreCase(false);

        assertTrue("result mast be true when validate low case string", hasSubstringConstraint.isValid(mockContext(), "value"));
        assertFalse("result mast be false when validate upper case string", hasSubstringConstraint.isValid(mockContext(), "VALUE"));
        assertFalse("result must be false when validate string without substring", hasSubstringConstraint.isValid(mockContext(), "FOO"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/HasSubstringConstraintTest;testIgnoreCase_True();;;@Test
    public void testIgnoreCase_True() {
        HasSubstringConstraint hasSubstringConstraint = new HasSubstringConstraint();
        hasSubstringConstraint.setSubstring("al");
        hasSubstringConstraint.setIgnoreCase(true);

        assertTrue("result mast be true when validate low case string", hasSubstringConstraint.isValid(mockContext(), "value"));
        assertTrue("result mast be true when validate upper case string", hasSubstringConstraint.isValid(mockContext(), "VALUE"));
        assertFalse("result must be false when validate string without substring", hasSubstringConstraint.isValid(mockContext(), "FOO"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeAfterConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        TimeAfterConstraint timeAfterConstraint = new TimeAfterConstraint();
        assertNull("time value must be null by default", timeAfterConstraint.getTime());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeAfterConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        JDateTime time = new JDateTime();
        TimeAfterConstraint timeAfterConstraint = new TimeAfterConstraint(time);
        assertEquals("time must be the same as was given to constructor", timeAfterConstraint.getTime(), time);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeAfterConstraintTest;testSetTime();;;@Test
    public void testSetTime() {
        TimeAfterConstraint timeAfterConstraint = new TimeAfterConstraint();
        JDateTime time = new JDateTime();
        timeAfterConstraint.setTime(time);
        assertEquals("method must return the same time as was given to set method", timeAfterConstraint.getTime(), time);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeAfterConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        TimeAfterConstraint timeAfterConstraint = new TimeAfterConstraint();
        JDateTime time = new JDateTime();
        TimeAfter annotation = mock(TimeAfter.class);
        stub(annotation.value()).toReturn(JDateTimeDefault.formatter.convert(time, JDateTimeDefault.format));

        timeAfterConstraint.configure(annotation);
        assertEquals("method must return the same time as was set to annotation when configure", timeAfterConstraint.getTime(), time);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeAfterConstraintTest;testValidate_WithValIsNull();;;@Test
    public void testValidate_WithValIsNull() {
        assertTrue("result must be true when validate null value", TimeAfterConstraint.validate(null, new JDateTime("2011-05-01 10:11:12.344")));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/TimeAfterConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        JDateTime time = new JDateTime("2011-05-01 10:11:12.344");
        TimeAfterConstraint constraint = new TimeAfterConstraint(time.clone());

        assertFalse("result must be true when validate time which is equal to constraint time", constraint.isValid(mockContext(), time.clone()));
        assertFalse("result must be false when validate time which is less than constraint time", constraint.isValid(mockContext(), time.clone().subMinute(1)));
        assertTrue("result must be true when validate time which is greater than constraint time", constraint.isValid(mockContext(), time.clone().addMinute(1)));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/NotBlankConstraintTest;testValidate_WithNullValue();;;@Test
    public void testValidate_WithNullValue() {
        assertTrue("result must be true when validate a null value", NotBlankConstraint.validate(null));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/NotBlankConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        NotBlankConstraint notBlankConstraint = new NotBlankConstraint();
        //this is an empty method nothing can be verified
        notBlankConstraint.configure(null);

        assertTrue("result must be true when validate not empty string", notBlankConstraint.isValid(mockContext(), "abc"));
        assertTrue("result must be true when validate string with space at the beginning", notBlankConstraint.isValid(mockContext(), " abc"));
        assertFalse("result must be false when validate string with space", notBlankConstraint.isValid(mockContext(), " "));
        assertFalse("result must be false when validate empty", notBlankConstraint.isValid(mockContext(), ""));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        MaxConstraint maxConstraint = new MaxConstraint();
        assertEquals("value must be default", maxConstraint.getMax(), 0.0, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        MaxConstraint maxConstraint = new MaxConstraint(0.1);
        assertEquals("max value must be the same as was given to constructor", maxConstraint.getMax(), 0.1, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxConstraintTest;testSetMax();;;@Test
    public void testSetMax() {
        MaxConstraint maxConstraint = new MaxConstraint();
        maxConstraint.setMax(0.1);
        assertEquals("max value must be the same as was given to set method", maxConstraint.getMax(), 0.1, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        MaxConstraint maxConstraint = new MaxConstraint();
        Max annotation = mock(Max.class);
        stub(annotation.value()).toReturn(0.1);

        maxConstraint.configure(annotation);
        assertEquals("max value must be the same as was set to annotation when configure", maxConstraint.getMax(), 0.1, 0.01);    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxConstraintTest;testValidate_WithNullValue();;;@Test
    public void testValidate_WithNullValue() {
        assertTrue("result must be true when validate a null value", MaxConstraint.validate(null, 12.1));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        assertTrue("result must be true when validated value is less than max", new MaxConstraint(12.5).isValid(mockContext(), "12.1"));
        assertFalse("result must be true when validated value is grater than max", new MaxConstraint(12.5).isValid(mockContext(), "12.6"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        MinConstraint minConstraint = new MinConstraint();
        assertEquals("value must be default", minConstraint.getMin(), 0.0, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        MinConstraint minConstraint = new MinConstraint(10.0);
        assertEquals("max value must be the same as was given to constructor", minConstraint.getMin(), 10.0, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinConstraintTest;testSetMin();;;@Test
    public void testSetMin() {
        MinConstraint minConstraint = new MinConstraint();
        minConstraint.setMin(10);
        assertEquals("method must return the same value as was given to set method", minConstraint.getMin(), 10.0, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        MinConstraint minConstraint = new MinConstraint();
        Min annotation = mock(Min.class);
        stub(annotation.value()).toReturn(10.0);

        minConstraint.configure(annotation);
        assertEquals("method must return the same value as was set to annotation when configure", minConstraint.getMin(), 10.0, 0.01);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinConstraintTest;testIsValid();;;@Test
    public void testIsValid() {
        MinConstraint minConstraint = new MinConstraint(12.5);
        assertTrue("result must be true when validate a value which is greater than minValue", minConstraint.isValid(mockContext(), "12.6"));
        assertFalse("result must be false when validate a value which is less than minValue", minConstraint.isValid(mockContext(), "12.1"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MinConstraintTest;testValidate_WithValIsNull();;;@Test
    public void testValidate_WithValIsNull() {
        assertTrue("result must be true when validate null value", MinConstraint.validate(null, 12.5));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testValidate_withNullValue();;;@Test
    public void testValidate_withNullValue() {
        assertTrue("result must be true when validate null value",
                EqualToFieldConstraint.validate(new Object(), null, "someField"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        EqualToFieldConstraint equalToFieldConstraint = new EqualToFieldConstraint();
        assertNull(equalToFieldConstraint.getFieldName());
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        String fieldName = "testField";
        EqualToFieldConstraint equalToFieldConstraint = new EqualToFieldConstraint(fieldName);
        assertEquals("field name must be the same as was given to constructor", equalToFieldConstraint.getFieldName(), fieldName);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testSetFieldName();;;@Test
    public void testSetFieldName() {
        EqualToFieldConstraint equalToFieldConstraint = new EqualToFieldConstraint();
        String fieldName = "someField";
        equalToFieldConstraint.setFieldName(fieldName);
        assertEquals("value must be the same as was given to set method", equalToFieldConstraint.getFieldName(), fieldName);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        EqualToFieldConstraint equalToFieldConstraint = new EqualToFieldConstraint();
        //set a field name through an annotation
        EqualToField fldAnnotation = mock(EqualToField.class);
        String fieldName = "anotherField";
        stub(fldAnnotation.value()).toReturn(fieldName);

        equalToFieldConstraint.configure(fldAnnotation);
        assertEquals("field name must be the same as was set to annotation when configure",
                equalToFieldConstraint.getFieldName(), fieldName);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testIsValid_forEqualValues();;;@Test
    public void testIsValid_forEqualValues() {
        EqualToFieldConstraint equalToDeclaredFieldConstraint = new EqualToFieldConstraint("testField");
        ValidationConstraintContext cvv = mockContext();
        stub(cvv.getTarget()).toReturn(new TestBean("someValue"));

        assertTrue("result must be true when field and value are equals", equalToDeclaredFieldConstraint.isValid(cvv, "someValue"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testIsValid_forDifferentValues();;;@Test
    public void testIsValid_forDifferentValues() {
        EqualToFieldConstraint equalToDeclaredFieldConstraint = new EqualToFieldConstraint("testField");
        ValidationConstraintContext cvv = mockContext();
        stub(cvv.getTarget()).toReturn(new TestBean("someValue"));
        assertFalse("result must be false when validated field and value are different", equalToDeclaredFieldConstraint.isValid(cvv, "wrongValue"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testValidate_FieldNotFound();;;@Test(expected = VtorException.class)
    public void testValidate_FieldNotFound() {
        TestBean testVal = new TestBean("someValue");
        EqualToFieldConstraint.validate(testVal, "someValue", "wrongField");
        fail("EqualToFieldConstraint should throw VtorException when receive nonexistent field name");
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;testValidate_FieldValueIsNull();;;@Test
    public void testValidate_FieldValueIsNull() {
        TestBean testVal = new TestBean(null);
        assertFalse("result must be false when field value is null", EqualToFieldConstraint.validate(testVal, "someValue", "testField"));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;TestBean(String);;;public TestBean(String testField) {
            this.testField = testField;
        }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;getTestField();;;public String getTestField() {
            return testField;
        }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/EqualToFieldConstraintTest;setTestField(String);;;public void setTestField(String testField) {
            this.testField = testField;
        }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxLengthConstraintTest;testConstructor1();;;@Test
    public void testConstructor1() {
        MaxLengthConstraint maxLengthConstraint = new MaxLengthConstraint();
        assertEquals("value must be default", maxLengthConstraint.getMax(), 0);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxLengthConstraintTest;testConstructor2();;;@Test
    public void testConstructor2() {
        MaxLengthConstraint maxLengthConstraint = new MaxLengthConstraint(10);
        assertEquals("max value must be the same as was given to constructor", maxLengthConstraint.getMax(), 10);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxLengthConstraintTest;testSetMax();;;@Test
    public void testSetMax() {
        MaxLengthConstraint maxLengthConstraint = new MaxLengthConstraint();
        int maxValue = 100;
        maxLengthConstraint.setMax(maxValue);
        assertEquals("method must return the same value as was given to set method", maxLengthConstraint.getMax(), maxValue);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxLengthConstraintTest;testConfigure();;;@Test
    public void testConfigure() {
        MaxLengthConstraint maxLengthConstraint = new MaxLengthConstraint();
        MaxLength annotation = mock(MaxLength.class);
        int maxValue = 100;
        stub(annotation.value()).toReturn(maxValue);

        maxLengthConstraint.configure(annotation);
        assertEquals("method must return the same value as was set to annotation when configure", maxLengthConstraint.getMax(), maxValue);
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxLengthConstraintTest;testValidate_WithValIsNull();;;@Test
    public void testValidate_WithValIsNull() {
        assertTrue("result must be true when validate null value", MaxLengthConstraint.validate(null, 1));
    }
/home/taes/taes//projects/jodd/revisions/rev_7afb21f_a3241cf/rev_7afb21f-a3241cf;/jodd-vtor/src/test/java/jodd/vtor/constraint/MaxLengthConstraintTest;testMaxLengthConstraint();;;@Test
    public void testMaxLengthConstraint() {
        MaxLengthConstraint maxLengthConstraint = new MaxLengthConstraint(3);
        assertTrue("result must be true when validate a string with size less than maxValue", maxLengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(3)));
        assertFalse("result must be false when validate a string with size greater than maxValue", maxLengthConstraint.isValid(mockContext(), TestUtils.stringWithLength(4)));
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_8d0b4a1_811f95b/rev_8d0b4a1-811f95b;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufB64LineInputFormat;LzoProtobufB64LineInputFormat(TypeRef<M>);;;public LzoProtobufB64LineInputFormat(TypeRef<M> typeRef) {
    super();
    this.typeRef_ = typeRef;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_8d0b4a1_811f95b/rev_8d0b4a1-811f95b;/src/java/com/twitter/elephantbird/mapreduce/input/LzoProtobufB64LineInputFormat;newInstance(TypeRef<M>);;;public static<M extends Message> LzoProtobufB64LineInputFormat<M> newInstance(TypeRef<M> typeRef) {
    return new LzoProtobufB64LineInputFormat<M>(typeRef);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_6c5529a_64bb16e/rev_6c5529a-64bb16e;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;toPigScript(Class<?extendsTBase<?>>,Class<?extendsLoadFunc>);    /* we are commenting out explicit schema specification. The schema is 
     * included mainly to help the readers of the pig script. Pig learns the 
     * schema directly from the loader. ;;    /* we are commenting out explicit schema specification. The schema is
     * included mainly to help the readers of the pig script. Pig learns the
     * schema directly from the loader.
/home/taes/taes//projects/elephant-bird/revisions/rev_6c5529a_64bb16e/rev_6c5529a-64bb16e;/src/java/com/twitter/elephantbird/pig/piggybank/ThriftToPig;toPigScript(Class<?extendsTBase<?>>,Class<?extendsLoadFunc>);     * when a Thrift class (possibly in control of another team) changes, 
     * but the Pig script is not updated. Commenting it out work around this. ;;     * when a Thrift class (possibly in control of another team) changes,
     * but the Pig script is not updated. Commenting it out work around this.
/home/taes/taes//projects/elephant-bird/revisions/rev_b87762a_3125301/rev_b87762a-3125301;/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftB64LineOutputFormat;getOutputFormatClass(Class<M>,Configuration);    ;;
/home/taes/taes//projects/elephant-bird/revisions/rev_b87762a_3125301/rev_b87762a-3125301;/src/java/com/twitter/elephantbird/mapreduce/output/LzoThriftB64LineOutputFormat;getRecordWriter(TaskAttemptContext);    
    TypeRef<M> typeRef = ThriftUtils.getTypeRef(job.getConfiguration(), LzoThriftB64LineOutputFormat.class);  ;;
    TypeRef<M> typeRef = ThriftUtils.getTypeRef(job.getConfiguration(), LzoThriftB64LineOutputFormat.class);
/home/taes/taes//projects/elephant-bird/revisions/rev_b87762a_3125301/rev_b87762a-3125301;/src/java/com/twitter/elephantbird/mapreduce/input/LzoThriftB64LineInputFormat;createRecordReader(InputSplit,TaskAttemptContext);    if (typeRef_ == null) {
      typeRef_ = ThriftUtils.getTypeRef(taskAttempt.getConfiguration(), LzoThriftB64LineInputFormat.class);
    }
    return new LzoThriftB64LineRecordReader<M>(typeRef_);;    
    TypeRef<M> typeRef = ThriftUtils.getTypeRef(taskAttempt.getConfiguration(), LzoThriftB64LineInputFormat.class); 
    return new LzoThriftB64LineRecordReader<M>(typeRef);;
    TypeRef<M> typeRef = ThriftUtils.getTypeRef(taskAttempt.getConfiguration(), LzoThriftB64LineInputFormat.class);
    return new LzoThriftB64LineRecordReader<M>(typeRef);
/home/taes/taes//projects/curator/revisions/rev_1ee1673_859a623/rev_1ee1673-859a623;/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/queue/TestQueueSharder;testDistribution();;;            timing.sleepABit(); // let queue clear
/home/taes/taes//projects/curator/revisions/rev_1ee1673_859a623/rev_1ee1673-859a623;/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/queue/TestQueueSharder;testSharderWatchSync();;;            timing.sleepABit(); // let queues clear
/home/taes/taes//projects/elephant-bird/revisions/rev_27ceb0c_4353485/rev_27ceb0c-4353485;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;BinaryBlockWriter(OutputStream,Class<M>,BinaryConverter<M>,int);    innerClass_ = protoClass;
    binaryConverter_ = binaryConverter;;    protobufClass_ = protoClass;
    protoConverter_ = protoConverter;
    ;    protobufClass_ = protoClass;
    protoConverter_ = protoConverter;
/home/taes/taes//projects/elephant-bird/revisions/rev_27ceb0c_4353485/rev_27ceb0c-4353485;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;write(M);    ;;
/home/taes/taes//projects/ribbon/revisions/rev_a64b868_6e11c79/rev_a64b868-6e11c79;/ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient;getDefaultPortFromScheme(String);;;protected int getDefaultPortFromScheme(String scheme) {
        if (scheme == null) {
            return -1;
        }
        if (scheme.equals("http")) {
            return 80;
        } else if (scheme.equals("https")) {
            return 443;
        } else {
            return -1;
        }
    }
/home/taes/taes//projects/ribbon/revisions/rev_a64b868_6e11c79/rev_a64b868-6e11c79;/ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient;getDefaultPortFromScheme(String);;;@Override
    protected int getDefaultPortFromScheme(String scheme) {        
        int port = super.getDefaultPortFromScheme(scheme);
        if (port < 0) {
            return 80;
        } else {
            return port;
        }
    }
/home/taes/taes//projects/retrofit/revisions/rev_35b7257_838711b/rev_35b7257-838711b;/http/src/main/java/retrofit/http/RestAdapter;create(RestAdapter,Class<T>);;;@SuppressWarnings("unchecked")
  public static <T> T create(RestAdapter restAdapter, Class<T> type) {
    RestAdapter.RestHandler handler = restAdapter.new RestHandler();
    return (T) Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[]{type}, handler);
  }
/home/taes/taes//projects/retrofit/revisions/rev_35b7257_838711b/rev_35b7257-838711b;/http/src/test/java/retrofit/http/RestAdapterTest;setUp();;;    mockProfiler   = createMock(HttpProfiler.class);
/home/taes/taes//projects/retrofit/revisions/rev_35b7257_838711b/rev_35b7257-838711b;/http/src/test/java/retrofit/http/RestAdapterTest;setUp();;;            bind(HttpProfiler.class).toInstance(HttpProfiler.NONE);
/home/taes/taes//projects/elephant-bird/revisions/rev_ed6d50d_1f0c02e/rev_ed6d50d-1f0c02e;/src/java/com/twitter/elephantbird/util/Codecs;Codecs();        ;;
/home/taes/taes//projects/elephant-bird/revisions/rev_ed6d50d_1f0c02e/rev_ed6d50d-1f0c02e;/src/java/com/twitter/elephantbird/util/Codecs;createStandardBase64();;;      /* with constructor Base64() in commons-codec-1.4
       * encode() inserts a newline after every 76 characters.
       * Base64(0) disables that incompatibility.
       */
/home/taes/taes//projects/atlas/revisions/rev_a504c52_dd98861/rev_a504c52-dd98861;/atlas-core/src/main/java/android/taobao/atlas/framework/bundlestorage/BundleArchive;purge(String,long);;;                Log.e("BundleArchive","purge "+bundleDir +" : "+dir.getName());
/home/taes/taes//projects/atlas/revisions/rev_a504c52_dd98861/rev_a504c52-dd98861;/atlas-core/src/main/java/android/taobao/atlas/bundleInfo/BundleListing;findBundleTransitivelyInternal(String,List<String>,String);;;private void findBundleTransitivelyInternal(String location,List<String> bundlesListForInstall,final String root){
//            //打断循环依赖
            if(!bundlesListForInstall.contains(location)) {
                bundlesListForInstall.add(0,location);
            }else{
                if(!location.equals(root)) {
                    bundlesListForInstall.remove(location);
                    bundlesListForInstall.add(0, location);
                }
                return;
            }

            List<String> singleLevelDependencies = AtlasBundleInfoManager.instance().getDependencyForBundle(location);
            if(singleLevelDependencies!=null){
                for(String dependepcy : singleLevelDependencies){
                    if(dependepcy!=null){
                        findBundleTransitivelyInternal(dependepcy,bundlesListForInstall,root);
                    }
                }
            }
        }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/MultiDexConfig;getDexCount();;;public int getDexCount() {
        return dexCount;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/MultiDexConfig;setDexCount(int);;;public void setDexCount(int dexCount) {
        this.dexCount = dexCount;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/MultiDexConfig;getDexSplitRules();;;public String getDexSplitRules() {
        return dexSplitRules;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/MultiDexConfig;setDexSplitRules(String);;;public void setDexSplitRules(String dexSplitRules) {
        this.dexSplitRules = dexSplitRules;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager;runTask();;;                }

                try {
                    hookFastDex(appVariantContext);
                    hookFastMultiDex(appVariantContext);
                } catch (Exception e) {
                    throw new GradleException(e.getMessage(), e);
                }

                for (final BaseVariantOutputData vod : baseVariantOutputDataList) {
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager;hookFastMultiDex(AppVariantContext);;;                if (appVariantContext.getBuildType().getDexConfig()!= null && appVariantContext.getBuildType().getDexConfig().isUseMyDex()){
                    dexOptions.getAdditionalParameters().add("--useMyDex");
                }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager;hookFastDex(AppVariantContext);;;private void hookFastDex(AppVariantContext appVariantContext) throws Exception {

        if (appVariantContext.getAtlasExtension().getTBuildConfig().isFastProguard()) {

            List<TransformTask> list = TransformManager.findTransformTaskByTransformType(appVariantContext,
                                                                                         DexTransform.class);
            for (TransformTask transformTask : list) {

                DefaultDexOptions dexOptions = (DefaultDexOptions)ReflectUtils.getField(transformTask.getTransform(),
                                                                                        "dexOptions");
                dexOptions.setPreDexLibraries(false);
            }
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/FileNameUtils;getUniqueFileName(String,String);;;public static String getUniqueFileName(String name, String type) {
        String outFileName = name.replace(".jar","") + "_" + type;
        if (outFileNames.contains(outFileName)) {
            outFileName = outFileName + index.incrementAndGet();
        }
        outFileNames.add(outFileName);
        return outFileName;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/BundleItemRunner;execute(BundleItem);;;public void execute(BundleItem bundleItem);
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileLockUtils;lock(File,Runnable);;;public static boolean lock(File file, Runnable runnable) {
        try {

            File lockFile = file;
            if (lockFile.isDirectory()) {
                lockFile = new File(lockFile, ".atlaslock");
            }
            RandomAccessFile randomAccessFile;
            FileLock fileLock ;
            try {
                randomAccessFile = new RandomAccessFile(lockFile, "rw");
                fileLock = randomAccessFile.getChannel().tryLock();
            } catch (Exception e) {
                throw new GradleException(e.getMessage(),e);
            }
            if (fileLock != null) {
                File finalLockFile = lockFile;
                Runtime.getRuntime().addShutdownHook(new Thread() {
                    @Override
                    public void run() {
                        try {
                            fileLock.release();
                            randomAccessFile.close();
                            finalLockFile.delete();
                        } catch (Exception e) {
                            log.error("Unable to remove lock file: " + file.getAbsolutePath(), e);
                        }
                    }
                });

                runnable.run();

                lockFile.delete();
                return true;
            }

        } finally {

        }
        return false;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleLocalCache;cacheFile(String,String,File);;;@Override
    public void cacheFile(String type, String key, File file) throws FileCacheException {
        if (StringUtils.isEmpty(key)) {
            throw new FileCacheException("cache key is empty ");
        }
        File cacheFile = getLocalCacheFile(type, key);
        if (cacheFile.exists()) {
            throw new FileCacheException("file cache alerady exist:" + cacheFile.getAbsolutePath());
        }

        try {

            cacheFile.getParentFile().mkdirs();

            if (file.isFile()) {
                FileUtils.copyFile(file, cacheFile);
            } else {

                cacheFile.mkdirs();

                FileLockUtils.lock(cacheFile, new Runnable() {
                    @Override
                    public void run() {
                        try {
                            FileUtils.copyDirectory(file, cacheFile);
                        } catch (Throwable e) {
                            try {
                                FileUtils.forceDelete(cacheFile);
                            } catch (IOException e1) {
                                e1.printStackTrace();
                            }
                            throw new RuntimeException(e.getMessage(), e);
                        }
                    }
                });
            }
        } catch (Throwable e) {
            throw new FileCacheException(e.getMessage(), e);
        }

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleLocalCache;fetchFile(String,String,File,boolean);;;@Override
    public boolean fetchFile(String type, String key, File localFile, boolean folder) throws FileCacheException {

        if (StringUtils.isEmpty(key)) {
            throw new FileCacheException("cache key is empty ");
        }

        File cacheFile = getLocalCacheFile(type, key);

        try {
            if (cacheFile.exists() && cacheFile.length() > 0) {
                if (cacheFile.isDirectory()) {
                    FileUtils.copyDirectory(cacheFile, localFile);
                } else {
                    FileUtils.copyFile(cacheFile, localFile);
                }
            }
        } catch (IOException e) {
            throw new FileCacheException(e.getMessage(), e);
        }

        return true;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleLocalCache;getLocalCacheFile(String,String);;;@NotNull
    public File getLocalCacheFile(String type, String key) {
        return new File(cacheDir, type + "/" + key);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleNetworkCache;SimpleNetworkCache(NetworkProtocol);;;public SimpleNetworkCache(NetworkProtocol networkProtocol) {
        this.networkProtocol = networkProtocol;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleNetworkCache;cacheFile(String,String,File);;;@Override
    public void cacheFile(String type, String key, File file) throws FileCacheException {

        File toUploadFile = file;
        if (file.isDirectory()){
            toUploadFile = new File(file.getParentFile(),toUploadFile.getName()+"_tmp.zip");
            try {
                BetterZip.zipDirectory(file,toUploadFile);
            } catch (IOException e) {
                throw new FileCacheException(e.getMessage(),e);
            }
        }

        try {
            if (!networkProtocol.uploadFile(type + "/" + key, toUploadFile)) {
                throw new FileCacheException("upload file failed");
            }
        }finally {
            //删除文件夹
            if(toUploadFile.getName().endsWith("_tmp.zip")){
                toUploadFile.delete();
            }
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleNetworkCache;fetchFile(String,String,File,boolean);;;@Override
    public boolean fetchFile(String type, String key, File localFile, boolean folder) throws FileCacheException {

        boolean succss = networkProtocol.downloadFile(type + "/" + key, localFile);

        if (!succss){
            return false;
        }

        if (folder){

            //解压文件
            File current = new File(localFile.getAbsolutePath());
            File zipFile = new File(localFile.getParentFile(),localFile.getName()+"_tmp.zip");
            localFile.renameTo(zipFile);

            try {
                BetterZip.unzipDirectory(zipFile,current);
                zipFile.delete();
            } catch (IOException e) {
                throw new FileCacheException(e.getMessage(),e);
            }

        }

        return true;

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleNetworkCache;getLocalCacheFile(String,String);;;@Override
    public File getLocalCacheFile(String type, String key) {
        return null;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleNetworkCache;downloadFile(String,File);;;boolean downloadFile(String key, File localFile);
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/SimpleNetworkCache;uploadFile(String,File);;;boolean uploadFile(String key, File file);
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCacheCenter;cacheFile(String,String,File,boolean);;;public static void cacheFile(String type, String key, File file, boolean remote) throws FileCacheException {

        if (!BUILD_CACHE_ENABLED){
            return;
        }

        localCache.cacheFile(type, key, file);

        logger.log(type + "." + key + " cache " + file.getAbsolutePath() + " to local success");

        if (null != networkCache && remote) {
            networkCache.cacheFile(type, key, file);
            logger.log(type + "." + key + " cache " + file.getAbsolutePath() + " to network success");
        }

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCacheCenter;queryFile(String,String,boolean,boolean);;;public static File queryFile(String type, String key, boolean folder, boolean remote) throws FileCacheException {

        if (!BUILD_CACHE_ENABLED){
            return null;
        }

        File localCacheFile = localCache.getLocalCacheFile(type, key);
        if (localCacheFile.exists()) {

            if (folder != localCacheFile.isDirectory()) {
                try {
                    FileUtils.forceDelete(localCacheFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                throw new FileCacheException("local dir is folder " + folder);
            }

            logger.log(type + "." + key + " query local cache  " + localCacheFile.getAbsolutePath() + " success");
            return localCacheFile;
        }else {
            logger.log(type + "." + key + " miss local cache  " + localCacheFile.getAbsolutePath());
        }

        if (null == networkCache || !remote) {
            return localCacheFile;
        }

        try {

            boolean success = networkCache.fetchFile(type, key, localCacheFile, folder);

            logger.log(type + "." + key + " fetch remote cache  " + localCacheFile.getAbsolutePath() + success);

            if (success) {
                return localCacheFile;
            }

        } catch (Throwable e) {

            logger.log(type + "." + key + " fetch remote cache  " + localCacheFile.getAbsolutePath() + " exception");
            e.printStackTrace();
        }

        logger.log(type + "." + key + " get cache file failed  " + localCacheFile.getAbsolutePath());
        try {
            FileUtils.forceDelete(localCacheFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return localCacheFile;

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCacheCenter;fetchFile(String,String,boolean,boolean,File);;;public static void fetchFile(String type, String key, boolean folder, boolean remote, File dest) throws FileCacheException {

        if (!BUILD_CACHE_ENABLED){
            return;
        }

        File cacheFile = queryFile(type,key,folder,remote);

        if (null != cacheFile && cacheFile.exists()){

            try {
                if (cacheFile.isFile()) {
                    FileUtils.copyFile(cacheFile, dest);
                } else {
                    FileUtils.copyDirectory(cacheFile, dest);
                }
                logger.log(type + "." + key + " fech  file success  " + dest.getAbsolutePath());
            }catch (Throwable e){
                throw new FileCacheException(e.getMessage(),e);
            }

        }


    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/Cache;cacheFile(String,String,File);;;public void cacheFile(String type, String key, File file) throws FileCacheException;
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/Cache;fetchFile(String,String,File,boolean);;;public boolean fetchFile(String type, String key, File localFile, boolean folder) throws FileCacheException;
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/Cache;getLocalCacheFile(String,String);;;public File getLocalCacheFile(String type, String key);
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCacheException;FileCacheException(String);;;public FileCacheException(String message) {
        super(message);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCacheException;FileCacheException(String,Throwable);;;public FileCacheException(String message, Throwable cause) {
        super(message, cause);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCacheException;FileCacheException(Throwable);;;public FileCacheException(Throwable cause) {
        super(cause);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCacheException;FileCacheException(String,Throwable,boolean,boolean);;;public FileCacheException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
        super(message, cause, enableSuppression, writableStackTrace);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/log/LogOutputListener;addListener(Project);;;public static void addListener(Project project) {

        FileLogger.project = project.getRootProject();

        project.getGradle().addListener(new BuildListener() {
            @Override
            public void buildStarted(Gradle gradle) {
            }

            @Override
            public void settingsEvaluated(Settings settings) {

            }

            @Override
            public void projectsLoaded(Gradle gradle) {

            }

            @Override
            public void projectsEvaluated(Gradle gradle) {

            }

            @Override
            public void buildFinished(BuildResult buildResult) {
                FileLogger.shutDown(project);
            }
        });

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/multidex/FileComparator;compare(File,File);;;@Override
    public int compare(File o1, File o2) {
        if (o1.getAbsolutePath().contains("fastmaindex")) {
            return 1;
        } else if (o2.getAbsolutePath().contains("fastmaindex")) {
            return -1;
        }
        return (int)(o2.length() - o1.length());
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;KeepOnlyConfigurationParser(String[],Properties);;;public KeepOnlyConfigurationParser(String[] args,
                                       Properties properties) throws IOException {
        this(args, null, properties);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;KeepOnlyConfigurationParser(String[],File,Properties);;;public KeepOnlyConfigurationParser(String[] args,
                                       File baseDir,
                                       Properties properties) throws IOException {
        this(new ArgumentWordReader(args, baseDir), properties);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;KeepOnlyConfigurationParser(String,String,File,Properties);;;public KeepOnlyConfigurationParser(String lines,
                                       String description,
                                       File baseDir,
                                       Properties properties) throws IOException {
        this(new LineWordReader(new LineNumberReader(new StringReader(lines)),
                                description,
                                baseDir),
             properties);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;KeepOnlyConfigurationParser(File);;;public KeepOnlyConfigurationParser(File file) throws IOException {
        this(file, System.getProperties());
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;KeepOnlyConfigurationParser(File,Properties);;;public KeepOnlyConfigurationParser(File file,
                                       Properties properties) throws IOException {
        this(new FileWordReader(file), properties);
        this.filePath = file.getAbsolutePath();
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;KeepOnlyConfigurationParser(URL,Properties);;;public KeepOnlyConfigurationParser(URL url,
                                       Properties properties) throws IOException {
        this(new FileWordReader(url), properties);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;KeepOnlyConfigurationParser(WordReader,Properties);;;public KeepOnlyConfigurationParser(WordReader reader,
                                       Properties properties) throws IOException {
        this.reader = reader;
        this.properties = properties;

        readNextWord();
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parse(Configuration);;;public void parse(Configuration configuration)
        throws ParseException, IOException {
        while (nextWord != null) {
            lastComments = reader.lastComments();

            // First include directives.
            if (AtlasProguardConstants.AT_DIRECTIVE.startsWith(nextWord) ||
                AtlasProguardConstants.INCLUDE_DIRECTIVE.startsWith(nextWord)) {
                configuration.lastModified = parseIncludeArgument(configuration.lastModified);
            } else if (AtlasProguardConstants.BASE_DIRECTORY_DIRECTIVE.startsWith(nextWord)) {
                parseBaseDirectoryArgument();
            }

            // Then configuration options with or without arguments.
            else if (AtlasProguardConstants.INJARS_OPTION.startsWith(nextWord)) {
                configuration.programJars = parseClassPathArgument(configuration.programJars, false);
            } else if (AtlasProguardConstants.OUTJARS_OPTION.startsWith(nextWord)) {
                configuration.programJars = parseClassPathArgument(configuration.programJars, true);
            }
            //else if (AtlasProguardConstants.LIBRARYJARS_OPTION                               .startsWith
            // (nextWord)) configuration.libraryJars                      = parseClassPathArgument(configuration
            // .libraryJars, false);
            //else if (AtlasProguardConstants.RESOURCEJARS_OPTION                              .startsWith
            // (nextWord)) throw new ParseException("The '-resourcejars' option is no longer supported. Please
            // use the '-injars' option for all input");
            //else if (AtlasProguardConstants.SKIP_NON_PUBLIC_LIBRARY_CLASSES_OPTION           .startsWith
            // (nextWord)) configuration.skipNonPublicLibraryClasses      = parseNoArgument(true);
            //else if (AtlasProguardConstants.DONT_SKIP_NON_PUBLIC_LIBRARY_CLASSES_OPTION      .startsWith
            // (nextWord)) configuration.skipNonPublicLibraryClasses      = parseNoArgument(false);
            //else if (AtlasProguardConstants.DONT_SKIP_NON_PUBLIC_LIBRARY_CLASS_MEMBERS_OPTION.startsWith
            // (nextWord)) configuration.skipNonPublicLibraryClassMembers = parseNoArgument(false);
            //else if (AtlasProguardConstants.TARGET_OPTION                                    .startsWith
            // (nextWord)) configuration.targetClassVersion               = parseClassVersion();
            //else if (AtlasProguardConstants.FORCE_PROCESSING_OPTION                          .startsWith
            // (nextWord)) configuration.lastModified                     = parseNoArgument(Long.MAX_VALUE);

            else if (AtlasProguardConstants.KEEP_OPTION.startsWith(nextWord)) {
                configuration.keep = parseKeepClassSpecificationArguments(configuration.keep, true, false, false);
            } else if (AtlasProguardConstants.KEEP_CLASS_MEMBERS_OPTION.startsWith(nextWord)) {
                configuration.keep = parseKeepClassSpecificationArguments(configuration.keep, false, false, false);
            } else if (AtlasProguardConstants.KEEP_CLASSES_WITH_MEMBERS_OPTION.startsWith(nextWord)) {
                configuration.keep = parseKeepClassSpecificationArguments(configuration.keep, false, true, false);
            } else if (AtlasProguardConstants.KEEP_NAMES_OPTION.startsWith(nextWord)) {
                configuration.keep = parseKeepClassSpecificationArguments(configuration.keep, true, false, true);
            } else if (AtlasProguardConstants.KEEP_CLASS_MEMBER_NAMES_OPTION.startsWith(nextWord)) {
                configuration.keep = parseKeepClassSpecificationArguments(configuration.keep, false, false, true);
            } else if (AtlasProguardConstants.KEEP_CLASSES_WITH_MEMBER_NAMES_OPTION.startsWith(nextWord)) {
                configuration.keep = parseKeepClassSpecificationArguments(configuration.keep, false, true, true);
            }
            //else if (AtlasProguardConstants.PRINT_SEEDS_OPTION                               .startsWith
            // (nextWord)) configuration.printSeeds                       = parseOptionalFile();

            // After '-keep'.
            else if (AtlasProguardConstants.KEEP_DIRECTORIES_OPTION.startsWith(nextWord)) {
                configuration.keepDirectories = parseCommaSeparatedList("directory name", true, true, false, true,
                                                                        false, true, false, false,
                                                                        configuration.keepDirectories);
            }

            //else if (AtlasProguardConstants.DONT_SHRINK_OPTION                               .startsWith
            // (nextWord)) configuration.shrink                           = parseNoArgument(false);
            //else if (AtlasProguardConstants.PRINT_USAGE_OPTION                               .startsWith
            // (nextWord)) configuration.printUsage                       = parseOptionalFile();
            //else if (AtlasProguardConstants.WHY_ARE_YOU_KEEPING_OPTION                       .startsWith
            // (nextWord)) configuration.whyAreYouKeeping                 = parseClassSpecificationArguments
            // (configuration.whyAreYouKeeping);

            //else if (AtlasProguardConstants.DONT_OPTIMIZE_OPTION                             .startsWith
            // (nextWord)) configuration.optimize                         = parseNoArgument(false);
            //else if (AtlasProguardConstants.OPTIMIZATION_PASSES                              .startsWith
            // (nextWord)) configuration.optimizationPasses               = parseIntegerArgument();
            //else if (AtlasProguardConstants.OPTIMIZATIONS                                    .startsWith
            // (nextWord)) configuration.optimizations                    = parseCommaSeparatedList("optimization
            // name", true, false, false, false, false, false, false, false, configuration.optimizations);
            //else if (AtlasProguardConstants.ASSUME_NO_SIDE_EFFECTS_OPTION                    .startsWith
            // (nextWord)) configuration.assumeNoSideEffects              = parseClassSpecificationArguments
            // (configuration.assumeNoSideEffects);
            //else if (AtlasProguardConstants.ALLOW_ACCESS_MODIFICATION_OPTION                 .startsWith
            // (nextWord)) configuration.allowAccessModification          = parseNoArgument(true);
            //else if (AtlasProguardConstants.MERGE_INTERFACES_AGGRESSIVELY_OPTION             .startsWith
            // (nextWord)) configuration.mergeInterfacesAggressively      = parseNoArgument(true);

            //else if (AtlasProguardConstants.DONT_OBFUSCATE_OPTION                            .startsWith
            // (nextWord)) configuration.obfuscate                        = parseNoArgument(false);
            //else if (AtlasProguardConstants.PRINT_MAPPING_OPTION                             .startsWith
            // (nextWord)) configuration.printMapping                     = parseOptionalFile();
            //else if (AtlasProguardConstants.APPLY_MAPPING_OPTION                             .startsWith
            // (nextWord)) configuration.applyMapping                     = parseFile();
            //else if (AtlasProguardConstants.OBFUSCATION_DICTIONARY_OPTION                    .startsWith
            // (nextWord)) configuration.obfuscationDictionary            = parseFile();
            //else if (AtlasProguardConstants.CLASS_OBFUSCATION_DICTIONARY_OPTION              .startsWith
            // (nextWord)) configuration.classObfuscationDictionary       = parseFile();
            //else if (AtlasProguardConstants.PACKAGE_OBFUSCATION_DICTIONARY_OPTION            .startsWith
            // (nextWord)) configuration.packageObfuscationDictionary     = parseFile();
            //else if (AtlasProguardConstants.OVERLOAD_AGGRESSIVELY_OPTION                     .startsWith
            // (nextWord)) configuration.overloadAggressively             = parseNoArgument(true);
            //else if (AtlasProguardConstants.USE_UNIQUE_CLASS_MEMBER_NAMES_OPTION             .startsWith
            // (nextWord)) configuration.useUniqueClassMemberNames        = parseNoArgument(true);
            //else if (AtlasProguardConstants.DONT_USE_MIXED_CASE_CLASS_NAMES_OPTION           .startsWith
            // (nextWord)) configuration.useMixedCaseClassNames           = parseNoArgument(false);
            else if (AtlasProguardConstants.KEEP_PACKAGE_NAMES_OPTION.startsWith(nextWord)) {
                configuration.keepPackageNames = parseCommaSeparatedList("package name", true, true, false, false, true,
                                                                         false, true, false,
                                                                         configuration.keepPackageNames);
            }
            //else if (AtlasProguardConstants.FLATTEN_PACKAGE_HIERARCHY_OPTION                 .startsWith
            // (nextWord)) configuration.flattenPackageHierarchy          = ClassUtil.internalClassName
            // (parseOptionalArgument());
            //else if (AtlasProguardConstants.REPACKAGE_CLASSES_OPTION                         .startsWith
            // (nextWord)) configuration.repackageClasses                 = ClassUtil.internalClassName
            // (parseOptionalArgument());
            //else if (AtlasProguardConstants.DEFAULT_PACKAGE_OPTION                           .startsWith
            // (nextWord)) configuration.repackageClasses                 = ClassUtil.internalClassName
            // (parseOptionalArgument());
            else if (AtlasProguardConstants.KEEP_ATTRIBUTES_OPTION.startsWith(nextWord)) {
                configuration.keepAttributes = parseCommaSeparatedList("attribute name", true, true, false, false, true,
                                                                       false, false, false,
                                                                       configuration.keepAttributes);
            } else if (AtlasProguardConstants.KEEP_PARAMETER_NAMES_OPTION.startsWith(nextWord)) {
                configuration.keepParameterNames = parseNoArgument(true);
            }
            //else if (AtlasProguardConstants.RENAME_SOURCE_FILE_ATTRIBUTE_OPTION              .startsWith
            // (nextWord)) configuration.newSourceFileAttribute           = parseOptionalArgument();
            //else if (AtlasProguardConstants.ADAPT_CLASS_STRINGS_OPTION                       .startsWith
            // (nextWord)) configuration.adaptClassStrings                = parseCommaSeparatedList("class name",
            // true, true, false, false, true, false, true, false, configuration.adaptClassStrings);
            //else if (AtlasProguardConstants.ADAPT_RESOURCE_FILE_NAMES_OPTION                 .startsWith
            // (nextWord)) configuration.adaptResourceFileNames           = parseCommaSeparatedList("resource
            // file name", true, true, false, true, false, false, false, false, configuration
            // .adaptResourceFileNames);
            //else if (AtlasProguardConstants.ADAPT_RESOURCE_FILE_CONTENTS_OPTION              .startsWith
            // (nextWord)) configuration.adaptResourceFileContents        = parseCommaSeparatedList("resource
            // file name", true, true, false, true, false, false, false, false, configuration
            // .adaptResourceFileContents);

            //else if (AtlasProguardConstants.DONT_PREVERIFY_OPTION                            .startsWith
            // (nextWord)) configuration.preverify                        = parseNoArgument(false);
            //else if (AtlasProguardConstants.MICRO_EDITION_OPTION                             .startsWith
            // (nextWord)) configuration.microEdition                     = parseNoArgument(true);

            //else if (AtlasProguardConstants.VERBOSE_OPTION                                   .startsWith
            // (nextWord)) configuration.verbose                          = parseNoArgument(true);
            //else if (AtlasProguardConstants.DONT_NOTE_OPTION                                 .startsWith
            // (nextWord)) configuration.note                             = parseCommaSeparatedList("class name",
            // true, true, false, false, true, false, true, false, configuration.note);
            else if (AtlasProguardConstants.DONT_WARN_OPTION.startsWith(nextWord)) {
                configuration.warn = parseCommaSeparatedList("class name", true, true, false, false, true, false, true,
                                                             false, configuration.warn);
            }
            //else if (AtlasProguardConstants.IGNORE_WARNINGS_OPTION                           .startsWith
            // (nextWord)) configuration.ignoreWarnings                   = parseNoArgument(true);
            //else if (AtlasProguardConstants.PRINT_CONFIGURATION_OPTION                       .startsWith
            // (nextWord)) configuration.printConfiguration               = parseOptionalFile();
            //else if (AtlasProguardConstants.DUMP_OPTION                                      .startsWith
            // (nextWord)) configuration.dump                             = parseOptionalFile();
            else {
                //throw new GradleException("Unsupport option in library " + reader.locationDescription());
                sLogger.error("Unsupport option " + reader.locationDescription());
                readNextWord(false);
            }
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;close();;;public void close() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseIncludeArgument(long);;;private long parseIncludeArgument(long lastModified) throws ParseException, IOException {
        // Read the configuration file name.
        readNextWord("configuration file name", true, false);

        File file = file(nextWord);
        reader.includeWordReader(new FileWordReader(file));

        readNextWord();

        return Math.max(lastModified, file.lastModified());
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseBaseDirectoryArgument();;;private void parseBaseDirectoryArgument() throws ParseException, IOException {
        // Read the base directory name.
        readNextWord("base directory name", true, false);

        reader.setBaseDir(file(nextWord));

        readNextWord();
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseClassPathArgument(ClassPath,boolean);;;private ClassPath parseClassPathArgument(ClassPath classPath,
                                             boolean isOutput)
        throws ParseException, IOException {
        // Create a new List if necessary.
        if (classPath == null) {
            classPath = new ClassPath();
        }

        while (true) {
            // Read the next jar name.
            readNextWord("jar or directory name", true, false);

            // Create a new class path entry.
            ClassPathEntry entry = new ClassPathEntry(file(nextWord), isOutput);

            // Read the opening parenthesis or the separator, if any.
            readNextWord();

            // Read the optional filters.
            if (!configurationEnd() &&
                AtlasProguardConstants.OPEN_ARGUMENTS_KEYWORD.equals(nextWord)) {
                // Read all filters in an array.
                List[] filters = new List[7];

                int counter = 0;
                do {
                    // Read the filter.
                    filters[counter++] =
                        parseCommaSeparatedList("filter", true, true, true, true, false, true, false, false, null);
                }
                while (counter < filters.length &&
                    AtlasProguardConstants.SEPARATOR_KEYWORD.equals(nextWord));

                // Make sure there is a closing parenthesis.
                if (!AtlasProguardConstants.CLOSE_ARGUMENTS_KEYWORD.equals(nextWord)) {
                    throw new ParseException(
                        "Expecting separating '" + AtlasProguardConstants.ARGUMENT_SEPARATOR_KEYWORD +
                            "' or '" + AtlasProguardConstants.SEPARATOR_KEYWORD +
                            "', or closing '" + AtlasProguardConstants.CLOSE_ARGUMENTS_KEYWORD +
                            "' before " + reader.locationDescription());
                }

                // Set all filters from the array on the entry.
                entry.setFilter(filters[--counter]);
                if (counter > 0) {
                    entry.setJarFilter(filters[--counter]);
                    if (counter > 0) {
                        entry.setWarFilter(filters[--counter]);
                        if (counter > 0) {
                            entry.setEarFilter(filters[--counter]);
                            if (counter > 0) {
                                entry.setZipFilter(filters[--counter]);
                                if (counter > 0) {
                                    // For backward compatibility, the apk
                                    // filter comes second in the list.
                                    entry.setApkFilter(filters[--counter]);
                                    if (counter > 0) {
                                        // For backward compatibility, the aar
                                        // filter comes first in the list.
                                        entry.setAarFilter(filters[--counter]);
                                    }
                                }
                            }
                        }
                    }
                }

                // Read the separator, if any.
                readNextWord();
            }

            // Add the entry to the list.
            classPath.add(entry);

            if (configurationEnd()) {
                return classPath;
            }

            if (!nextWord.equals(AtlasProguardConstants.JAR_SEPARATOR_KEYWORD)) {
                throw new ParseException(
                    "Expecting class path separator '" + AtlasProguardConstants.JAR_SEPARATOR_KEYWORD +
                        "' before " + reader.locationDescription());
            }
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseClassVersion();;;private int parseClassVersion()
        throws ParseException, IOException {
        // Read the obligatory target.
        readNextWord("java version");

        int classVersion = ClassUtil.internalClassVersion(nextWord);
        if (classVersion == 0) {
            throw new ParseException("Unsupported java version " + reader.locationDescription());
        }

        readNextWord();

        return classVersion;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseIntegerArgument();;;private int parseIntegerArgument()
        throws ParseException, IOException {
        try {
            // Read the obligatory integer.
            readNextWord("integer");

            int integer = Integer.parseInt(nextWord);

            readNextWord();

            return integer;
        } catch (NumberFormatException e) {
            throw new ParseException("Expecting integer argument instead of '" + nextWord +
                                         "' before " + reader.locationDescription());
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseFile();;;private File parseFile()
        throws ParseException, IOException {
        // Read the obligatory file name.
        readNextWord("file name", true, false);

        // Make sure the file is properly resolved.
        File file = file(nextWord);

        readNextWord();

        return file;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseOptionalFile();;;private File parseOptionalFile()
        throws ParseException, IOException {
        // Read the optional file name.
        readNextWord(true);

        // Didn't the user specify a file name?
        if (configurationEnd()) {
            return Configuration.STD_OUT;
        }

        // Make sure the file is properly resolved.
        File file = file(nextWord);

        readNextWord();

        return file;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseOptionalArgument();;;private String parseOptionalArgument() throws IOException {
        // Read the optional argument.
        readNextWord();

        // Didn't the user specify an argument?
        if (configurationEnd()) {
            return "";
        }

        String argument = nextWord;

        readNextWord();

        return argument;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseNoArgument(boolean);;;private boolean parseNoArgument(boolean value) throws IOException {
        readNextWord();

        return value;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseNoArgument(long);;;private long parseNoArgument(long value) throws IOException {
        readNextWord();

        return value;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseKeepClassSpecificationArguments(List,boolean,boolean,boolean);;;private List parseKeepClassSpecificationArguments(List keepClassSpecifications,
                                                      boolean markClasses,
                                                      boolean markConditionally,
                                                      boolean allowShrinking)
        throws ParseException, IOException {
        // Create a new List if necessary.
        if (keepClassSpecifications == null) {
            keepClassSpecifications = new ArrayList();
        }

        boolean markDescriptorClasses = false;
        //boolean allowShrinking        = false;
        boolean allowOptimization = false;
        boolean allowObfuscation = false;

        // Read the keep modifiers.
        while (true) {
            readNextWord("keyword '" + AtlasProguardConstants.CLASS_KEYWORD +
                             "', '" + JavaConstants.ACC_INTERFACE +
                             "', or '" + JavaConstants.ACC_ENUM + "'",
                         false, true);

            if (!AtlasProguardConstants.ARGUMENT_SEPARATOR_KEYWORD.equals(nextWord)) {
                // Not a comma. Stop parsing the keep modifiers.
                break;
            }

            readNextWord("keyword '" + AtlasProguardConstants.ALLOW_SHRINKING_SUBOPTION +
                             "', '" + AtlasProguardConstants.ALLOW_OPTIMIZATION_SUBOPTION +
                             "', or '" + AtlasProguardConstants.ALLOW_OBFUSCATION_SUBOPTION + "'");

            if (AtlasProguardConstants.INCLUDE_DESCRIPTOR_CLASSES_SUBOPTION.startsWith(nextWord)) {
                markDescriptorClasses = true;
            } else if (AtlasProguardConstants.ALLOW_SHRINKING_SUBOPTION.startsWith(nextWord)) {
                allowShrinking = true;
            } else if (AtlasProguardConstants.ALLOW_OPTIMIZATION_SUBOPTION.startsWith(nextWord)) {
                allowOptimization = true;
            } else if (AtlasProguardConstants.ALLOW_OBFUSCATION_SUBOPTION.startsWith(nextWord)) {
                allowObfuscation = true;
            } else {
                throw new ParseException(
                    "Expecting keyword '" + AtlasProguardConstants.INCLUDE_DESCRIPTOR_CLASSES_SUBOPTION +
                        "', '" + AtlasProguardConstants.ALLOW_SHRINKING_SUBOPTION +
                        "', '" + AtlasProguardConstants.ALLOW_OPTIMIZATION_SUBOPTION +
                        "', or '" + AtlasProguardConstants.ALLOW_OBFUSCATION_SUBOPTION +
                        "' before " + reader.locationDescription());
            }
        }

        // Read the class configuration.
        ClassSpecification classSpecification =
            parseClassSpecificationArguments();

        // Create and add the keep configuration.
        keepClassSpecifications.add(new KeepClassSpecification(markClasses,
                                                               markConditionally,
                                                               markDescriptorClasses,
                                                               allowShrinking,
                                                               allowOptimization,
                                                               allowObfuscation,
                                                               classSpecification));
        return keepClassSpecifications;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseClassSpecificationArguments(List);;;private List parseClassSpecificationArguments(List classSpecifications)
        throws ParseException, IOException {
        // Create a new List if necessary.
        if (classSpecifications == null) {
            classSpecifications = new ArrayList();
        }

        // Read and add the class configuration.
        readNextWord("keyword '" + AtlasProguardConstants.CLASS_KEYWORD +
                         "', '" + JavaConstants.ACC_INTERFACE +
                         "', or '" + JavaConstants.ACC_ENUM + "'",
                     false, true);

        classSpecifications.add(parseClassSpecificationArguments());

        return classSpecifications;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseClassSpecificationArguments();;;public ClassSpecification parseClassSpecificationArguments()
        throws ParseException, IOException {
        // Clear the annotation type.
        String annotationType = null;

        // Clear the class access modifiers.
        int requiredSetClassAccessFlags = 0;
        int requiredUnsetClassAccessFlags = 0;

        // Parse the class annotations and access modifiers until the class keyword.
        while (!AtlasProguardConstants.CLASS_KEYWORD.equals(nextWord)) {
            // Strip the negating sign, if any.
            boolean negated =
                nextWord.startsWith(AtlasProguardConstants.NEGATOR_KEYWORD);

            String strippedWord = negated ?
                nextWord.substring(1) :
                nextWord;

            // Parse the class access modifiers.
            int accessFlag =
                strippedWord.equals(JavaConstants.ACC_PUBLIC) ? ClassConstants.ACC_PUBLIC :
                    strippedWord.equals(JavaConstants.ACC_FINAL) ? ClassConstants.ACC_FINAL :
                        strippedWord.equals(JavaConstants.ACC_INTERFACE) ? ClassConstants.ACC_INTERFACE :
                            strippedWord.equals(JavaConstants.ACC_ABSTRACT) ? ClassConstants.ACC_ABSTRACT :
                                strippedWord.equals(JavaConstants.ACC_SYNTHETIC) ? ClassConstants.ACC_SYNTHETIC :
                                    strippedWord.equals(JavaConstants.ACC_ANNOTATION) ? ClassConstants.ACC_ANNOTATTION :
                                        strippedWord.equals(JavaConstants.ACC_ENUM) ? ClassConstants.ACC_ENUM :
                                            unknownAccessFlag();

            // Is it an annotation modifier?
            if (accessFlag == ClassConstants.ACC_ANNOTATTION) {
                // Already read the next word.
                readNextWord("annotation type or keyword '" + JavaConstants.ACC_INTERFACE + "'",
                             false, false);

                // Is the next word actually an annotation type?
                if (!nextWord.equals(JavaConstants.ACC_INTERFACE) &&
                    !nextWord.equals(JavaConstants.ACC_ENUM) &&
                    !nextWord.equals(AtlasProguardConstants.CLASS_KEYWORD)) {
                    // Parse the annotation type.
                    annotationType =
                        ListUtil.commaSeparatedString(
                            parseCommaSeparatedList("annotation type",
                                                    false, false, false, false, true, false, false, true, null), false);

                    // Continue parsing the access modifier that we just read
                    // in the next cycle.
                    continue;
                }

                // Otherwise just handle the annotation modifier.
            }

            if (!negated) {
                requiredSetClassAccessFlags |= accessFlag;
            } else {
                requiredUnsetClassAccessFlags |= accessFlag;
            }

            if ((requiredSetClassAccessFlags &
                requiredUnsetClassAccessFlags) != 0) {
                throw new ParseException("Conflicting class access modifiers for '" + strippedWord +
                                             "' before " + reader.locationDescription());
            }

            if (strippedWord.equals(JavaConstants.ACC_INTERFACE) ||
                strippedWord.equals(JavaConstants.ACC_ENUM) ||
                strippedWord.equals(AtlasProguardConstants.CLASS_KEYWORD)) {
                // The interface or enum keyword. Stop parsing the class flags.
                break;
            }

            // Should we read the next word?
            if (accessFlag != ClassConstants.ACC_ANNOTATTION) {
                readNextWord("keyword '" + AtlasProguardConstants.CLASS_KEYWORD +
                                 "', '" + JavaConstants.ACC_INTERFACE +
                                 "', or '" + JavaConstants.ACC_ENUM + "'",
                             false, true);
            }
        }

        // Parse the class name part.
        String externalClassName =
            ListUtil.commaSeparatedString(
                parseCommaSeparatedList("class name or interface name",
                                        true, false, false, false, true, false, false, false, null), false);

        // For backward compatibility, allow a single "*" wildcard to match any
        // class.
        String className = AtlasProguardConstants.ANY_CLASS_KEYWORD.equals(externalClassName) ?
            null :
            ClassUtil.internalClassName(externalClassName);

        // Clear the annotation type and the class name of the extends part.
        String extendsAnnotationType = null;
        String extendsClassName = null;

        if (!configurationEnd()) {
            // Parse 'implements ...' or 'extends ...' part, if any.
            if (AtlasProguardConstants.IMPLEMENTS_KEYWORD.equals(nextWord) ||
                AtlasProguardConstants.EXTENDS_KEYWORD.equals(nextWord)) {
                readNextWord("class name or interface name", false, true);

                // Parse the annotation type, if any.
                if (AtlasProguardConstants.ANNOTATION_KEYWORD.equals(nextWord)) {
                    extendsAnnotationType =
                        ListUtil.commaSeparatedString(
                            parseCommaSeparatedList("annotation type",
                                                    true, false, false, false, true, false, false, true, null), false);
                }

                String externalExtendsClassName =
                    ListUtil.commaSeparatedString(
                        parseCommaSeparatedList("class name or interface name",
                                                false, false, false, false, true, false, false, false, null), false);

                extendsClassName = AtlasProguardConstants.ANY_CLASS_KEYWORD.equals(externalExtendsClassName) ?
                    null :
                    ClassUtil.internalClassName(externalExtendsClassName);
            }
        }

        // Create the basic class specification.
        ClassSpecification classSpecification =
            new ClassSpecification(lastComments,
                                   requiredSetClassAccessFlags,
                                   requiredUnsetClassAccessFlags,
                                   annotationType,
                                   className,
                                   extendsAnnotationType,
                                   extendsClassName);

        // Now add any class members to this class specification.
        if (!configurationEnd()) {
            // Check the class member opening part.
            if (!AtlasProguardConstants.OPEN_KEYWORD.equals(nextWord)) {
                throw new ParseException("Expecting opening '" + AtlasProguardConstants.OPEN_KEYWORD +
                                             "' at " + reader.locationDescription());
            }

            // Parse all class members.
            while (true) {
                readNextWord("class member description" +
                                 " or closing '" + AtlasProguardConstants.CLOSE_KEYWORD + "'",
                             false, true);

                if (nextWord.equals(AtlasProguardConstants.CLOSE_KEYWORD)) {
                    // The closing brace. Stop parsing the class members.
                    readNextWord();

                    break;
                }

                parseMemberSpecificationArguments(externalClassName,
                                                  classSpecification);
            }
        }

        return classSpecification;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseMemberSpecificationArguments(String,ClassSpecification);;;private void parseMemberSpecificationArguments(String externalClassName,
                                                   ClassSpecification classSpecification)
        throws ParseException, IOException {
        // Clear the annotation name.
        String annotationType = null;

        // Parse the class member access modifiers, if any.
        int requiredSetMemberAccessFlags = 0;
        int requiredUnsetMemberAccessFlags = 0;

        while (!configurationEnd(true)) {
            // Parse the annotation type, if any.
            if (AtlasProguardConstants.ANNOTATION_KEYWORD.equals(nextWord)) {
                annotationType =
                    ListUtil.commaSeparatedString(
                        parseCommaSeparatedList("annotation type",
                                                true, false, false, false, true, false, false, true, null), false);
                continue;
            }

            String strippedWord = nextWord.startsWith("!") ?
                nextWord.substring(1) :
                nextWord;

            // Parse the class member access modifiers.
            int accessFlag =
                strippedWord.equals(JavaConstants.ACC_PUBLIC) ? ClassConstants.ACC_PUBLIC :
                    strippedWord.equals(JavaConstants.ACC_PRIVATE) ? ClassConstants.ACC_PRIVATE :
                        strippedWord.equals(JavaConstants.ACC_PROTECTED) ? ClassConstants.ACC_PROTECTED :
                            strippedWord.equals(JavaConstants.ACC_STATIC) ? ClassConstants.ACC_STATIC :
                                strippedWord.equals(JavaConstants.ACC_FINAL) ? ClassConstants.ACC_FINAL :
                                    strippedWord.equals(JavaConstants.ACC_SYNCHRONIZED)
                                        ? ClassConstants.ACC_SYNCHRONIZED :
                                        strippedWord.equals(JavaConstants.ACC_VOLATILE) ? ClassConstants.ACC_VOLATILE :
                                            strippedWord.equals(JavaConstants.ACC_TRANSIENT)
                                                ? ClassConstants.ACC_TRANSIENT :
                                                strippedWord.equals(JavaConstants.ACC_BRIDGE)
                                                    ? ClassConstants.ACC_BRIDGE :
                                                    strippedWord.equals(JavaConstants.ACC_VARARGS)
                                                        ? ClassConstants.ACC_VARARGS :
                                                        strippedWord.equals(JavaConstants.ACC_NATIVE)
                                                            ? ClassConstants.ACC_NATIVE :
                                                            strippedWord.equals(JavaConstants.ACC_ABSTRACT)
                                                                ? ClassConstants.ACC_ABSTRACT :
                                                                strippedWord.equals(JavaConstants.ACC_STRICT)
                                                                    ? ClassConstants.ACC_STRICT :
                                                                    strippedWord.equals(JavaConstants.ACC_SYNTHETIC)
                                                                        ? ClassConstants.ACC_SYNTHETIC :
                                                                        0;
            if (accessFlag == 0) {
                // Not a class member access modifier. Stop parsing them.
                break;
            }

            if (strippedWord.equals(nextWord)) {
                requiredSetMemberAccessFlags |= accessFlag;
            } else {
                requiredUnsetMemberAccessFlags |= accessFlag;
            }

            // Make sure the user doesn't try to set and unset the same
            // access flags simultaneously.
            if ((requiredSetMemberAccessFlags &
                requiredUnsetMemberAccessFlags) != 0) {
                throw new ParseException("Conflicting class member access modifiers for " +
                                             reader.locationDescription());
            }

            readNextWord("class member description");
        }

        // Parse the class member type and name part.

        // Did we get a special wildcard?
        if (AtlasProguardConstants.ANY_CLASS_MEMBER_KEYWORD.equals(nextWord) ||
            AtlasProguardConstants.ANY_FIELD_KEYWORD.equals(nextWord) ||
            AtlasProguardConstants.ANY_METHOD_KEYWORD.equals(nextWord)) {
            // Act according to the type of wildcard..
            if (AtlasProguardConstants.ANY_CLASS_MEMBER_KEYWORD.equals(nextWord)) {
                checkFieldAccessFlags(requiredSetMemberAccessFlags,
                                      requiredUnsetMemberAccessFlags);
                checkMethodAccessFlags(requiredSetMemberAccessFlags,
                                       requiredUnsetMemberAccessFlags);

                classSpecification.addField(
                    new MemberSpecification(requiredSetMemberAccessFlags,
                                            requiredUnsetMemberAccessFlags,
                                            annotationType,
                                            null,
                                            null));
                classSpecification.addMethod(
                    new MemberSpecification(requiredSetMemberAccessFlags,
                                            requiredUnsetMemberAccessFlags,
                                            annotationType,
                                            null,
                                            null));
            } else if (AtlasProguardConstants.ANY_FIELD_KEYWORD.equals(nextWord)) {
                checkFieldAccessFlags(requiredSetMemberAccessFlags,
                                      requiredUnsetMemberAccessFlags);

                classSpecification.addField(
                    new MemberSpecification(requiredSetMemberAccessFlags,
                                            requiredUnsetMemberAccessFlags,
                                            annotationType,
                                            null,
                                            null));
            } else if (AtlasProguardConstants.ANY_METHOD_KEYWORD.equals(nextWord)) {
                checkMethodAccessFlags(requiredSetMemberAccessFlags,
                                       requiredUnsetMemberAccessFlags);

                classSpecification.addMethod(
                    new MemberSpecification(requiredSetMemberAccessFlags,
                                            requiredUnsetMemberAccessFlags,
                                            annotationType,
                                            null,
                                            null));
            }

            // We still have to read the closing separator.
            readNextWord("separator '" + AtlasProguardConstants.SEPARATOR_KEYWORD + "'");

            if (!AtlasProguardConstants.SEPARATOR_KEYWORD.equals(nextWord)) {
                throw new ParseException("Expecting separator '" + AtlasProguardConstants.SEPARATOR_KEYWORD +
                                             "' before " + reader.locationDescription());
            }
        } else {
            // Make sure we have a proper type.
            checkJavaIdentifier("java type");
            String type = nextWord;

            readNextWord("class member name");
            String name = nextWord;

            // Did we get just one word before the opening parenthesis?
            if (AtlasProguardConstants.OPEN_ARGUMENTS_KEYWORD.equals(name)) {
                // This must be a constructor then.
                // Make sure the type is a proper constructor name.
                if (!(type.equals(ClassConstants.METHOD_NAME_INIT) ||
                    type.equals(externalClassName) ||
                    type.equals(ClassUtil.externalShortClassName(externalClassName)))) {
                    throw new ParseException("Expecting type and name " +
                                                 "instead of just '" + type +
                                                 "' before " + reader.locationDescription());
                }

                // Assign the fixed constructor type and name.
                type = JavaConstants.TYPE_VOID;
                name = ClassConstants.METHOD_NAME_INIT;
            } else {
                // It's not a constructor.
                // Make sure we have a proper name.
                checkJavaIdentifier("class member name");

                // Read the opening parenthesis or the separating
                // semi-colon.
                readNextWord("opening '" + AtlasProguardConstants.OPEN_ARGUMENTS_KEYWORD +
                                 "' or separator '" + AtlasProguardConstants.SEPARATOR_KEYWORD + "'");
            }

            // Are we looking at a field, a method, or something else?
            if (AtlasProguardConstants.SEPARATOR_KEYWORD.equals(nextWord)) {
                // It's a field.
                checkFieldAccessFlags(requiredSetMemberAccessFlags,
                                      requiredUnsetMemberAccessFlags);

                // We already have a field descriptor.
                String descriptor = ClassUtil.internalType(type);

                // Add the field.
                classSpecification.addField(
                    new MemberSpecification(requiredSetMemberAccessFlags,
                                            requiredUnsetMemberAccessFlags,
                                            annotationType,
                                            name,
                                            descriptor));
            } else if (AtlasProguardConstants.OPEN_ARGUMENTS_KEYWORD.equals(nextWord)) {
                // It's a method.
                checkMethodAccessFlags(requiredSetMemberAccessFlags,
                                       requiredUnsetMemberAccessFlags);

                // Parse the method arguments.
                String descriptor =
                    ClassUtil.internalMethodDescriptor(type,
                                                       parseCommaSeparatedList("argument", true, true, true, false,
                                                                               true, false, false, false, null));

                if (!AtlasProguardConstants.CLOSE_ARGUMENTS_KEYWORD.equals(nextWord)) {
                    throw new ParseException(
                        "Expecting separating '" + AtlasProguardConstants.ARGUMENT_SEPARATOR_KEYWORD +
                            "' or closing '" + AtlasProguardConstants.CLOSE_ARGUMENTS_KEYWORD +
                            "' before " + reader.locationDescription());
                }

                // Read the separator after the closing parenthesis.
                readNextWord("separator '" + AtlasProguardConstants.SEPARATOR_KEYWORD + "'");

                if (!AtlasProguardConstants.SEPARATOR_KEYWORD.equals(nextWord)) {
                    throw new ParseException("Expecting separator '" + AtlasProguardConstants.SEPARATOR_KEYWORD +
                                                 "' before " + reader.locationDescription());
                }

                // Add the method.
                classSpecification.addMethod(
                    new MemberSpecification(requiredSetMemberAccessFlags,
                                            requiredUnsetMemberAccessFlags,
                                            annotationType,
                                            name,
                                            descriptor));
            } else {
                // It doesn't look like a field or a method.
                throw new ParseException("Expecting opening '" + AtlasProguardConstants.OPEN_ARGUMENTS_KEYWORD +
                                             "' or separator '" + AtlasProguardConstants.SEPARATOR_KEYWORD +
                                             "' before " + reader.locationDescription());
            }
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;parseCommaSeparatedList(String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,List);;;private List parseCommaSeparatedList(String expectedDescription,
                                         boolean readFirstWord,
                                         boolean allowEmptyList,
                                         boolean expectClosingParenthesis,
                                         boolean isFileName,
                                         boolean checkJavaIdentifiers,
                                         boolean replaceSystemProperties,
                                         boolean replaceExternalClassNames,
                                         boolean replaceExternalTypes,
                                         List list)
        throws ParseException, IOException {
        if (list == null) {
            list = new ArrayList();
        }

        if (readFirstWord) {
            if (!allowEmptyList) {
                // Read the first list entry.
                readNextWord(expectedDescription, isFileName, false);
            } else if (expectClosingParenthesis) {
                // Read the first list entry.
                readNextWord(expectedDescription, isFileName, false);

                // Return if the entry is actually empty (an empty file name or
                // a closing parenthesis).
                if (nextWord.length() == 0) {
                    // Read the closing parenthesis
                    readNextWord("closing '" + AtlasProguardConstants.CLOSE_ARGUMENTS_KEYWORD +
                                     "'");

                    return list;
                } else if (nextWord.equals(AtlasProguardConstants.CLOSE_ARGUMENTS_KEYWORD)) {
                    return list;
                }
            } else {
                // Read the first list entry, if there is any.
                readNextWord(isFileName);

                // Check if the list is empty.
                if (configurationEnd()) {
                    return list;
                }
            }
        }

        while (true) {
            if (checkJavaIdentifiers) {
                checkJavaIdentifier("java type");
            }

            if (replaceSystemProperties) {
                nextWord = replaceSystemProperties(nextWord);
            }

            if (replaceExternalClassNames) {
                nextWord = ClassUtil.internalClassName(nextWord);
            }

            if (replaceExternalTypes) {
                nextWord = ClassUtil.internalType(nextWord);
            }

            list.add(nextWord);

            if (expectClosingParenthesis) {
                // Read a comma (or a closing parenthesis, or a different word).
                readNextWord("separating '" + AtlasProguardConstants.ARGUMENT_SEPARATOR_KEYWORD +
                                 "' or closing '" + AtlasProguardConstants.CLOSE_ARGUMENTS_KEYWORD +
                                 "'");
            } else {
                // Read a comma (or a different word).
                readNextWord();
            }

            if (!AtlasProguardConstants.ARGUMENT_SEPARATOR_KEYWORD.equals(nextWord)) {
                return list;
            }

            // Read the next list entry.
            readNextWord(expectedDescription, isFileName, false);
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;unknownAccessFlag();;;private int unknownAccessFlag() throws ParseException {
        throw new ParseException("Unexpected keyword " + reader.locationDescription());
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;file(String);;;private File file(String word) throws ParseException {
        String fileName = replaceSystemProperties(word);
        File file = new File(fileName);

        // Try to get an absolute file.
        if (!file.isAbsolute()) {
            file = new File(reader.getBaseDir(), fileName);
        }

        return file;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;replaceSystemProperties(String);;;private String replaceSystemProperties(String word) throws ParseException {
        int fromIndex = 0;
        while (true) {
            fromIndex = word.indexOf(AtlasProguardConstants.OPEN_SYSTEM_PROPERTY, fromIndex);
            if (fromIndex < 0) {
                break;
            }

            int toIndex = word.indexOf(AtlasProguardConstants.CLOSE_SYSTEM_PROPERTY, fromIndex + 1);
            if (toIndex < 0) {
                break;
            }

            String propertyName = word.substring(fromIndex + 1, toIndex);
            String propertyValue = properties.getProperty(propertyName);
            if (propertyValue == null) {
                throw new ParseException("Value of system property '" + propertyName +
                                             "' is undefined in " + reader.locationDescription());
            }

            word = word.substring(0, fromIndex) + propertyValue + word.substring(toIndex + 1);

            fromIndex += propertyValue.length();
        }

        return word;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;readNextWord(String);;;private void readNextWord(String expectedDescription)
        throws ParseException, IOException {
        readNextWord(expectedDescription, false, false);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;readNextWord(String,boolean,boolean);;;private void readNextWord(String expectedDescription,
                              boolean isFileName,
                              boolean expectingAtCharacter)
        throws ParseException, IOException {
        readNextWord(isFileName);
        if (configurationEnd(expectingAtCharacter)) {
            throw new ParseException("Expecting " + expectedDescription +
                                         " before " + reader.locationDescription());
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;readNextWord();;;private void readNextWord() throws IOException {
        readNextWord(false);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;readNextWord(boolean);;;private void readNextWord(boolean isFileName) throws IOException {
        nextWord = reader.nextWord(isFileName);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;configurationEnd();;;private boolean configurationEnd() {
        return configurationEnd(false);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;configurationEnd(boolean);;;private boolean configurationEnd(boolean expectingAtCharacter) {
        return nextWord == null ||
            nextWord.startsWith(AtlasProguardConstants.OPTION_PREFIX) ||
            (!expectingAtCharacter &&
                nextWord.equals(AtlasProguardConstants.AT_DIRECTIVE));
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;checkJavaIdentifier(String);;;private void checkJavaIdentifier(String expectedDescription)
        throws ParseException {
        if (!isJavaIdentifier(nextWord)) {
            throw new ParseException("Expecting " + expectedDescription +
                                         " before " + reader.locationDescription());
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;isJavaIdentifier(String);;;private boolean isJavaIdentifier(String aWord) {
        if (aWord.length() == 0) {
            return false;
        }

        for (int index = 0; index < aWord.length(); index++) {
            char c = aWord.charAt(index);
            if (!(Character.isJavaIdentifierPart(c) ||
                c == '.' ||
                c == '[' ||
                c == ']' ||
                c == '<' ||
                c == '>' ||
                c == '-' ||
                c == '!' ||
                c == '*' ||
                c == '?' ||
                c == '%')) {
                return false;
            }
        }

        return true;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;checkFieldAccessFlags(int,int);;;private void checkFieldAccessFlags(int requiredSetMemberAccessFlags,
                                       int requiredUnsetMemberAccessFlags)
        throws ParseException {
        if (((requiredSetMemberAccessFlags |
            requiredUnsetMemberAccessFlags) &
            ~ClassConstants.VALID_ACC_FIELD) != 0) {
            throw new ParseException("Invalid method access modifier for field before " +
                                         reader.locationDescription());
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;checkMethodAccessFlags(int,int);;;private void checkMethodAccessFlags(int requiredSetMemberAccessFlags,
                                        int requiredUnsetMemberAccessFlags)
        throws ParseException {
        if (((requiredSetMemberAccessFlags |
            requiredUnsetMemberAccessFlags) &
            ~ClassConstants.VALID_ACC_METHOD) != 0) {
            throw new ParseException("Invalid field access modifier for method before " +
                                         reader.locationDescription());
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/KeepOnlyConfigurationParser;main(String[]);;;public static void main(String[] args) {
        try {
            ConfigurationParser parser =
                new ConfigurationParser(args, System.getProperties());

            try {
                parser.parse(new Configuration());
            } catch (ParseException ex) {
                ex.printStackTrace();
            } finally {
                parser.close();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitProgramClass(ProgramClass);;;@Override
    public void visitProgramClass(ProgramClass programClass) {
        programClass.constantPoolEntriesAccept(this);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitLibraryClass(LibraryClass);;;@Override
    public void visitLibraryClass(LibraryClass libraryClass) {
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitIntegerConstant(Clazz,IntegerConstant);;;@Override
    public void visitIntegerConstant(Clazz clazz, IntegerConstant integerConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitLongConstant(Clazz,LongConstant);;;@Override
    public void visitLongConstant(Clazz clazz, LongConstant longConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitFloatConstant(Clazz,FloatConstant);;;@Override
    public void visitFloatConstant(Clazz clazz, FloatConstant floatConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitDoubleConstant(Clazz,DoubleConstant);;;@Override
    public void visitDoubleConstant(Clazz clazz, DoubleConstant doubleConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitStringConstant(Clazz,StringConstant);;;@Override
    public void visitStringConstant(Clazz clazz, StringConstant stringConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitUtf8Constant(Clazz,Utf8Constant);;;@Override
    public void visitUtf8Constant(Clazz clazz, Utf8Constant utf8Constant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitInvokeDynamicConstant(Clazz,InvokeDynamicConstant);;;@Override
    public void visitInvokeDynamicConstant(Clazz clazz, InvokeDynamicConstant invokeDynamicConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitMethodHandleConstant(Clazz,MethodHandleConstant);;;@Override
    public void visitMethodHandleConstant(Clazz clazz, MethodHandleConstant methodHandleConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitFieldrefConstant(Clazz,FieldrefConstant);;;@Override
    public void visitFieldrefConstant(Clazz clazz, FieldrefConstant fieldrefConstant) {
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitInterfaceMethodrefConstant(Clazz,InterfaceMethodrefConstant);;;@Override
    public void visitInterfaceMethodrefConstant(Clazz clazz, InterfaceMethodrefConstant interfaceMethodrefConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitMethodrefConstant(Clazz,MethodrefConstant);;;@Override
    public void visitMethodrefConstant(Clazz clazz, MethodrefConstant methodrefConstant) {
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitClassConstant(Clazz,ClassConstant);;;@Override
    public void visitClassConstant(Clazz clazz, ClassConstant classConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitMethodTypeConstant(Clazz,MethodTypeConstant);;;@Override
    public void visitMethodTypeConstant(Clazz clazz, MethodTypeConstant methodTypeConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitNameAndTypeConstant(Clazz,NameAndTypeConstant);;;@Override
    public void visitNameAndTypeConstant(Clazz clazz, NameAndTypeConstant nameAndTypeConstant) {

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitProgramField(ProgramClass,ProgramField);;;@Override
    public void visitProgramField(ProgramClass programClass, ProgramField programField) {
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitProgramMethod(ProgramClass,ProgramMethod);;;@Override
    public void visitProgramMethod(ProgramClass programClass, ProgramMethod programMethod) {
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitLibraryField(LibraryClass,LibraryField);;;@Override
    public void visitLibraryField(LibraryClass libraryClass, LibraryField libraryField) {
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;visitLibraryMethod(LibraryClass,LibraryMethod);;;@Override
    public void visitLibraryMethod(LibraryClass libraryClass, LibraryMethod libraryMethod) {
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/AbstractClasslVisitor;println(String);;;public void println(String message) {
        System.out.println(message);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/BundleProguardDumper;dump(ProGuard,Set<String>);;;public static Map<String, ClazzRefInfo> dump(ProGuard proGuard, Set<String> defaultClasses) throws Exception {

        ClassPool classPool = (ClassPool)ReflectUtils.getField(proGuard, "programClassPool");
        ClassPool libClassPool = (ClassPool)ReflectUtils.getField(proGuard, "libraryClassPool");

        VisitorDTO visitorDTO = new VisitorDTO(defaultClasses, classPool, libClassPool);

        classPool.classesAccept(new ClassStructVisitor(visitorDTO));
        classPool.classesAccept(new ClassDetailVisitor(visitorDTO));
        visitorDTO.addSuperRefInfo();

        return visitorDTO.clazzRefInfoMap;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;ClassDetailVisitor(VisitorDTO);;;public ClassDetailVisitor(VisitorDTO visitorDTO) {
        this.visitorDTO = visitorDTO;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitProgramClass(ProgramClass);;;@Override
    public void visitProgramClass(ProgramClass programClass) {
        programClass.constantPoolEntriesAccept(this);

        programClass.methodsAccept(this);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitProgramMethod(ProgramClass,ProgramMethod);;;@Override
    public void visitProgramMethod(ProgramClass programClass, ProgramMethod programMethod) {
        visitMember(programClass, programMethod);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitMember(ProgramClass,ProgramMember);;;private void visitMember(ProgramClass programClass, ProgramMember programMember) {
        if (programMember.u2attributesCount > 0) {
            //println("Class member attributes (count = " + programMember.u2attributesCount + "):");
            programMember.attributesAccept(programClass, this);
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitAnyInstruction(Clazz,Method,CodeAttribute,int,Instruction);;;@Override
    public void visitAnyInstruction(Clazz clazz, Method method, CodeAttribute codeAttribute, int offset,
                                    Instruction instruction) {
        //println(instruction.toString(offset));
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitAnyAttribute(Clazz,Attribute);;;@Override
    public void visitAnyAttribute(Clazz clazz, Attribute attribute) {
        //super.visitAnyAttribute(clazz, attribute);

        //System.out.println(">>>>>>");

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitCodeAttribute(Clazz,Method,CodeAttribute);;;@Override
    public void visitCodeAttribute(Clazz clazz, Method method, CodeAttribute codeAttribute) {

        //println("visitCodeAttribute >>>>>");

        codeAttribute.instructionsAccept(clazz, method, this);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitConstantInstruction(Clazz,Method,CodeAttribute,int,ConstantInstruction);;;@Override
    public void visitConstantInstruction(Clazz clazz, Method method, CodeAttribute codeAttribute, int offset,
                                         ConstantInstruction constantInstruction) {
        //println("visitConstantInstruction >>>" + constantInstruction.toString(offset));

        //indent();
        clazz.constantPoolEntryAccept(constantInstruction.constantIndex, this);
        //outdent();
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitMethodrefConstant(Clazz,MethodrefConstant);;;@Override
    public void visitMethodrefConstant(Clazz clazz, MethodrefConstant methodrefConstant) {

        //println("visitMethodrefConstant Methodref [" +
        //            clazz.getClassName(methodrefConstant.u2classIndex) + "." +
        //            clazz.getName(methodrefConstant.u2nameAndTypeIndex) + " " +
        //            clazz.getType(methodrefConstant.u2nameAndTypeIndex) + "]");

        addMethod(clazz.getClassName(methodrefConstant.u2classIndex),
                  clazz.getName(methodrefConstant.u2nameAndTypeIndex),
                  clazz.getType(methodrefConstant.u2nameAndTypeIndex), false);

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitInterfaceMethodrefConstant(Clazz,InterfaceMethodrefConstant);;;@Override
    public void visitInterfaceMethodrefConstant(Clazz clazz, InterfaceMethodrefConstant interfaceMethodrefConstant) {
        //println("visitInterfaceMethodrefConstant InterfaceMethodref [" +
        //            clazz.getClassName(interfaceMethodrefConstant.u2classIndex) + "." +
        //            clazz.getName(interfaceMethodrefConstant.u2nameAndTypeIndex) + " " +
        //            clazz.getType(interfaceMethodrefConstant.u2nameAndTypeIndex) + "]");

        addMethod(clazz.getClassName(interfaceMethodrefConstant.u2classIndex),
                  clazz.getName(interfaceMethodrefConstant.u2nameAndTypeIndex),
                  clazz.getType(interfaceMethodrefConstant.u2nameAndTypeIndex), true);

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;visitFieldrefConstant(Clazz,FieldrefConstant);;;@Override
    public void visitFieldrefConstant(Clazz clazz, FieldrefConstant fieldrefConstant) {

        //println("visitFieldrefConstant Methodref [" +
        //            clazz.getClassName(fieldrefConstant.u2classIndex) + "." +
        //            clazz.getName(fieldrefConstant.u2nameAndTypeIndex) + " " +
        //            clazz.getType(fieldrefConstant.u2nameAndTypeIndex) + "]");

        addField(clazz.getClassName(fieldrefConstant.u2classIndex),
                 clazz.getName(fieldrefConstant.u2nameAndTypeIndex));

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;addMethod(String,String,String,boolean);;;private void addMethod(String name, String method, String args, boolean interfaceClazz) {
        //println("addMethod " + name + "." + method);

        ClazzRefInfo clazzRefInfo = visitorDTO.getClazzRefInfo(name);
        if (null != clazzRefInfo) {

            if (interfaceClazz) {
                clazzRefInfo.setNeedExtend(true);
            }

            //keep it interface
            LibraryClass libraryClass = (LibraryClass)visitorDTO.libraryClassPool.getClass(clazzRefInfo.getClazzName());
            //判断是否能命中super类
            if (null != libraryClass) {

                ClazzRefInfo superRefInfo = getSuperClazzRef(libraryClass, method, args);
                if (null != superRefInfo){
                    superRefInfo.getMethods().add(method);
                }

            }

            //clazzRefInfo.getMethods().add(method);

        }

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;getSuperClazzRef(LibraryClass,String,String);;;private ClazzRefInfo getSuperClazzRef(LibraryClass libraryClass, String methodName, String args) {
        if (null == libraryClass || !visitorDTO.isLibClazz(libraryClass.getName())) {
            return null;
        }
        for (LibraryMethod method : libraryClass.methods) {
            if (method.name.equals(methodName) && method.descriptor.equals(args)) {
                ClazzRefInfo clazzRefInfo = visitorDTO.getClazzRefInfoByName(libraryClass.getName());
                return clazzRefInfo;
            }
        }

        Clazz clazz = libraryClass.getSuperClass();
        ClazzRefInfo clazzRefInfo = getClazzRefInfoBySuper(methodName, args, clazz);
        if (clazzRefInfo != null) {
            return clazzRefInfo;
        }
        for (int i = 0; i < libraryClass.getInterfaceCount(); i++) {
            ClazzRefInfo clazzRefInfo1 = getClazzRefInfoBySuper(methodName, args, libraryClass.getInterface(i));
            if (clazzRefInfo1 != null) {
                return clazzRefInfo1;
            }
        }
        return null;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;getClazzRefInfoBySuper(String,String,Clazz);;;private ClazzRefInfo getClazzRefInfoBySuper(String methodName, String args, Clazz clazz) {
        if (null != clazz && visitorDTO.isLibClazz(clazz.getName())) {
            return getSuperClazzRef((LibraryClass)clazz, methodName, args);
        }
        return null;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassDetailVisitor;addField(String,String);;;private void addField(String name, String field) {

        //println("addField " + name + "." + field);

        ClazzRefInfo clazzRefInfo = visitorDTO.getClazzRefInfo(name);
        if (null != clazzRefInfo) {
            clazzRefInfo.getFields().add(field);
        }

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;ClassStructVisitor(VisitorDTO);;;public ClassStructVisitor(VisitorDTO visitorDTO) {
        this.visitorDTO = visitorDTO;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;visitProgramClass(ProgramClass);;;@Override
    public void visitProgramClass(ProgramClass programClass) {

        addSuperClass(programClass);

        for (int i = 0; i < programClass.getInterfaceCount(); i++) {
            addInterface(programClass, i);
        }

        programClass.methodsAccept(this);

        programClass.fieldsAccept(this);

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;addInterface(ProgramClass,int);;;private void addInterface(ProgramClass programClass, int i) {
        String interfaceClazz = programClass.getInterfaceName(i);
        //简化处理
        if (visitorDTO.isLibClazz(interfaceClazz)) {
            ClassStruct classStruct = getOrCreateClassStruct(programClass);
            classStruct.libInterfaces.add(interfaceClazz);

            //add super interface to keep
            addSuperInterfaces(interfaceClazz, classStruct);

        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;addSuperInterfaces(String,ClassStruct);;;private void addSuperInterfaces(String interfaceClazz, ClassStruct classStruct) {
        LibraryClass libraryClass = (LibraryClass)visitorDTO.libraryClassPool.getClass(interfaceClazz);
        if (null == libraryClass){
            return;
        }
        for (int index = 0; index < libraryClass.getInterfaceCount(); index++) {
            Clazz superInter = libraryClass.getInterface(index);
            if (null != superInter && visitorDTO.isLibClazz(superInter.getName())) {
                classStruct.libInterfaces.add(superInter.getName());

                //再迭代
                addSuperInterfaces(superInter.getName(), classStruct);

            }
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;getOrCreateClassStruct(ProgramClass);;;private ClassStruct getOrCreateClassStruct(ProgramClass programClass) {
        ClassStruct classStruct = visitorDTO.classStructMap.get(programClass.getName());
        if (null == classStruct) {
            classStruct = new ClassStruct();
            visitorDTO.classStructMap.put(programClass.getName(), classStruct);
        }
        return classStruct;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;addSuperClass(ProgramClass);;;private void addSuperClass(ProgramClass programClass) {
        String superName = visitorDTO.findRootLibClazz(programClass);
        if (StringUtils.isEmpty(superName)) {
            return;
        }
        ClassStruct classStruct = getOrCreateClassStruct(programClass);
        classStruct.superClazzName = superName;
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;visitProgramField(ProgramClass,ProgramField);;;@Override
    public void visitProgramField(ProgramClass programClass, ProgramField programField) {
        LibraryClazzInfo libraryClazzInfo = getOrCreateLibraryClazzInfo(programClass);
        if (null != libraryClazzInfo) {
            libraryClazzInfo.appFields.add(programField.getName(programClass));
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;visitProgramMethod(ProgramClass,ProgramMethod);;;@Override
    public void visitProgramMethod(ProgramClass programClass, ProgramMethod programMethod) {
        LibraryClazzInfo libraryClazzInfo = getOrCreateLibraryClazzInfo(programClass);
        if (null != libraryClazzInfo) {
            libraryClazzInfo.appMethods.add(programMethod.getName(programClass));
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/ClassStructVisitor;getOrCreateLibraryClazzInfo(ProgramClass);;;private LibraryClazzInfo getOrCreateLibraryClazzInfo(ProgramClass programClass) {

        return visitorDTO.getLibraryClazzInfo(programClass.getName());

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dump/utils/ReflectUtils;getField(Object,String);;;public static Object getField(Object obj, String fieldName) throws Exception {
        Field t = obj.getClass().getDeclaredField(fieldName);
        t.setAccessible(true);
        return t.get(obj);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/test/java/com/taobao/atlas/LogTest;test();;;@Test
    public void test() throws InterruptedException {

        //debugLog.log(Level., "hello");
        //PropertyConfigurator.configure("log4j.properties");

        System.out.println(123);

        for (int i = 0 ; i < 1000; i++){
            sLogger.info(i);
        }

        sLogger.info("123");

        sLogger.error("12312");

        Thread.sleep(1000);
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/test/java/com/taobao/atlas/cache/FileLockTest;test();;;@Test
    public void test(){

        File dir = new File("build/test/lock");
        System.out.println(dir.getAbsolutePath());

        dir.mkdirs();

        FileLockUtils.lock(dir, new Runnable() {
            @Override
            public void run() {
                System.out.println("1111");

                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
        });

        FileLockUtils.lock(dir, new Runnable() {
            @Override
            public void run() {
                System.out.println("2222");

                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
        });


    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/test/java/com/taobao/atlas/dex/FastDexMergeTest;test();;;@Test
    public void test() throws IOException {

        //String dir
        //    = "/Users/wuzhong/workspace/ali_android/cainiao/guoguo_android/guoguo_app/build/intermediates/transforms"
        //    + "/dex/debug/folders/1000/1f/main";

        String dir = "/Users/wuzhong/Downloads/alipay";

        //String dir = "/Users/wuzhong/Downloads/guoguo";
        Collection<File> files = FileUtils.listFiles(new File(dir), new String[] {"dex"}, true);

        //testA(files);
        //
        //testB(files);

        testC(files);

    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/test/java/com/taobao/atlas/dex/FastDexMergeTest;testA(Collection<File>);;;private void testA(Collection<File> files) throws IOException {
        MultiDexConfig multiDexConfig = new MultiDexConfig("debug");
        DexMerger dexMerger = new DexMerger(multiDexConfig, files);
        List<DexGroup> dexDtos = dexMerger.group();
        //System.out.println(JSON.toJSONString(dexDtos,true));
        System.out.println(dexDtos.size());
        System.out.println(dexMerger.dexList.size());
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/test/java/com/taobao/atlas/dex/FastDexMergeTest;testB(Collection<File>);;;private void testB(Collection<File> files) throws IOException {
        MultiDexConfig multiDexConfig = new MultiDexConfig("debug");
        multiDexConfig.setDexCount(3);
        DexMerger dexMerger = new DexMerger(multiDexConfig, files);
        List<DexGroup> dexDtos = dexMerger.group();
        //System.out.println(JSON.toJSONString(dexDtos,true));
        System.out.println(dexDtos.size());
        System.out.println(dexMerger.dexList.size());
    }
/home/taes/taes//projects/atlas/revisions/rev_8d5a4e8_cc2b800/rev_8d5a4e8-cc2b800;/atlas-gradle-plugin/atlas-plugin/src/test/java/com/taobao/atlas/dex/FastDexMergeTest;testC(Collection<File>);;;private void testC(Collection<File> files) throws IOException {
        MultiDexConfig multiDexConfig = new MultiDexConfig("debug");
        //multiDexConfig.setDexSplitRules("a12312,123213;c123123,d123123;ee123123");
        //multiDexConfig.setDexCount(3);
        DexMerger dexMerger = new DexMerger(multiDexConfig, files);
        List<DexGroup> dexDtos = dexMerger.group();
        System.out.println(dexDtos.size());
        System.out.println(dexMerger.dexList.size());
        FileUtils.deleteDirectory(new File("/Users/wuzhong/Downloads/dex"));
        new File("/Users/wuzhong/Downloads/dex").mkdirs();
        dexMerger.executeMerge(new File("/Users/wuzhong/Downloads/dex"),dexDtos);
    }
/home/taes/taes//projects/archaius/revisions/rev_f720103_8e7f408/rev_f720103-8e7f408;/archaius-core/src/main/java/com/netflix/config/DerivedStringProperty;DerivedStringProperty(String,String);;;public DerivedStringProperty(String name, String defaultValue) {
        delegate = DynamicPropertyFactory.getInstance().getStringProperty(name, defaultValue);
        deriveAndSet();
        delegate.addCallback(new Runnable() {
            public void run() {
                propertyChangedInternal();
            }
        });
    }
/home/taes/taes//projects/archaius/revisions/rev_f720103_8e7f408/rev_f720103-8e7f408;/archaius-core/src/main/java/com/netflix/config/DerivedStringProperty;get();;;public D get() {
        return derived.get();
    }
/home/taes/taes//projects/archaius/revisions/rev_f720103_8e7f408/rev_f720103-8e7f408;/archaius-core/src/main/java/com/netflix/config/DerivedStringProperty;derive(String);;;protected abstract D derive(String value);
/home/taes/taes//projects/archaius/revisions/rev_f720103_8e7f408/rev_f720103-8e7f408;/archaius-core/src/main/java/com/netflix/config/DerivedStringProperty;propertyChanged();;;protected void propertyChanged() {}
/home/taes/taes//projects/archaius/revisions/rev_f720103_8e7f408/rev_f720103-8e7f408;/archaius-core/src/main/java/com/netflix/config/DerivedStringProperty;propertyChangedInternal();;;void propertyChangedInternal() {
        deriveAndSet();
        propertyChanged();
    }
/home/taes/taes//projects/archaius/revisions/rev_f720103_8e7f408/rev_f720103-8e7f408;/archaius-core/src/main/java/com/netflix/config/DerivedStringProperty;deriveAndSet();;;private void deriveAndSet() {
         try {
            derived.set(derive(this.delegate.get()));
        } catch (Exception e) {
            log.error("error when deriving initial value", e);
        }
    }
/home/taes/taes//projects/archaius/revisions/rev_f720103_8e7f408/rev_f720103-8e7f408;/archaius-core/src/test/java/com/netflix/config/DerivedStringPropertyTest;testPropertyChanged();;;@Test
    public void testPropertyChanged() {
        final AtomicBoolean derived = new AtomicBoolean(false);

        final String defaultVal = "hi";
        DerivedStringProperty p = new DerivedStringProperty("com.netflix.hello", defaultVal) {
            @Override
            protected Object derive(String value) {
                derived.set(true);
                return String.format("%s/derived", value);
            }
        };

//        p.propertyChanged();
        p.propertyChangedInternal();
        assertTrue("derive() was not called", derived.get());
        assertEquals(String.format("%s/derived", defaultVal), p.get());
    }
/home/taes/taes//projects/archaius/revisions/rev_f720103_8e7f408/rev_f720103-8e7f408;/archaius-core/src/test/java/com/netflix/config/DerivedStringPropertyTest;testPropertyChangedWhenDeriveThrowsException();;;@Test
    public void testPropertyChangedWhenDeriveThrowsException() {
        final String defaultVal = "hi";
        DerivedStringProperty p = new DerivedStringProperty("com.netflix.hello", defaultVal) {
            @Override
            protected Object derive(String value) {
                throw new RuntimeException("oops");
            }
        };

        p.propertyChangedInternal();
        assertEquals(null, p.get());
    }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext;computeFinalUriWithLoadBalancer(T);;;            if (isURIEncoded(theUrl)) {
                StringBuilder sb = new StringBuilder();
                sb.append(newURI.getScheme())
                  .append("://")
                  .append(newURI.getRawAuthority())
                  .append(theUrl.getRawPath());
                if (!Strings.isNullOrEmpty(theUrl.getRawQuery())) {
                    sb.append("?").append(theUrl.getRawQuery());
                }
                if (!Strings.isNullOrEmpty(theUrl.getRawFragment())) {
                    sb.append("#").append(theUrl.getRawFragment());
                }
                newURI = new URI(sb.toString());
            }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext;isURIEncoded(URI);;;private boolean isURIEncoded(URI uri) {
        String original = uri.toString();
        try {
            return !URLEncoder.encode(original, "UTF-8").equals(original);
        } catch (Exception e) {
            return false;
        }
    }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-core/src/test/java/com/netflix/client/LoadBalancerContextTest;LoadBalancerContextTest();;;public LoadBalancerContextTest() {
        context = new MyLoadBalancerContext();
        context.setLoadBalancer(lb);
    }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-core/src/test/java/com/netflix/client/LoadBalancerContextTest;testComputeFinalUriWithLoadBalancer();;;@Test
    public void testComputeFinalUriWithLoadBalancer() throws ClientException {
        HttpRequest request = HttpRequest.newBuilder().uri("/test?abc=xyz").build();
        HttpRequest newRequest = context.computeFinalUriWithLoadBalancer(request);
        assertEquals("http://www.example.com:8080/test?abc=xyz", newRequest.getUri().toString());
    }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-core/src/test/java/com/netflix/client/LoadBalancerContextTest;testEncodedPath();;;@Test
    public void testEncodedPath() throws ClientException {
        String uri = "http://localhost:8080/resources/abc%2Fxyz";
        HttpRequest request = HttpRequest.newBuilder().uri(uri).build();
        HttpRequest newRequest = context.computeFinalUriWithLoadBalancer(request);
        assertEquals(uri, newRequest.getUri().toString());
    }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-core/src/test/java/com/netflix/client/LoadBalancerContextTest;testEncodedPathAndHostChange();;;@Test
    public void testEncodedPathAndHostChange() throws ClientException {
        String uri = "/abc%2Fxyz";
        HttpRequest request = HttpRequest.newBuilder().uri(uri).build();
        HttpRequest newRequest = context.computeFinalUriWithLoadBalancer(request);
        assertEquals("http://www.example.com:8080" + uri, newRequest.getUri().toString());
    }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-core/src/test/java/com/netflix/client/LoadBalancerContextTest;testEncodedQuery();;;@Test
    public void testEncodedQuery() throws Exception {
        String uri = "http://localhost:8080/resources/abc?";
        String queryString = "name=" + URLEncoder.encode("éƎ&=*%!@#$%^&*()", "UTF-8");   
        HttpRequest request = HttpRequest.newBuilder().uri(uri + queryString).build();
        HttpRequest newRequest = context.computeFinalUriWithLoadBalancer(request);
        assertEquals(uri + queryString, newRequest.getUri().toString());        
    }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-httpclient/src/main/java/com/netflix/http4/NFHttpClient;NFHttpClient(String,IClientConfig,boolean);;;protected NFHttpClient(String name, IClientConfig config, boolean registerMonitor) {
        super(new MonitoredConnectionManager(name));
        this.name = name;
        init(config, registerMonitor);
    }
/home/taes/taes//projects/ribbon/revisions/rev_1c246b4_f841ad0/rev_1c246b4-f841ad0;/ribbon-httpclient/src/main/java/com/netflix/http4/NFHttpClient;init(IClientConfig,boolean);;;void init(IClientConfig config, boolean registerMonitor) {
		HttpParams params = getParams();

		HttpProtocolParams.setContentCharset(params, "UTF-8");  
		params.setParameter(ClientPNames.CONNECTION_MANAGER_FACTORY_CLASS_NAME, 
				ThreadSafeClientConnManager.class.getName());
		HttpClientParams.setRedirecting(params, config.getPropertyAsBoolean(CommonClientConfigKey.FollowRedirects, true));
		// set up default headers
		List<Header> defaultHeaders = new ArrayList<Header>();
		defaultHeaders.add(new BasicHeader("Netflix.NFHttpClient.Version", "1.0"));
		defaultHeaders.add(new BasicHeader("X-netflix-httpclientname", name));
		params.setParameter(ClientPNames.DEFAULT_HEADERS, defaultHeaders);

		connPoolCleaner = new ConnectionPoolCleaner(name, this.getConnectionManager());

		this.retriesProperty = DynamicPropertyFactory.getInstance().getIntProperty(this.name + ".nfhttpclient" + ".retries", 3);
		this.sleepTimeFactorMsProperty = DynamicPropertyFactory.getInstance().getIntProperty(this.name + ".nfhttpclient"+ ".sleepTimeFactorMs", 10);
		setHttpRequestRetryHandler(
				new NFHttpMethodRetryHandler(this.name, this.retriesProperty.get(), false,
						this.sleepTimeFactorMsProperty.get()));
	    tracer = Monitors.newTimer(EXECUTE_TRACER + "-" + name, TimeUnit.MILLISECONDS);
	    if (registerMonitor) {
            Monitors.registerObject(name, this);
	    }
	}
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/store/LzoPigStorage;LzoPigStorage();;;public LzoPigStorage() {
    super();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/store/LzoPigStorage;LzoPigStorage(String);;;public LzoPigStorage(String delimiter) {
    super(delimiter);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/store/LzoPigStorage;getInputFormat();;;@Override
  public InputFormat<LongWritable, Text> getInputFormat() {
    // PigStorage can handle lzo files, but cannot split them.
    return new LzoTextInputFormat();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/store/Bz2PigStorage;Bz2PigStorage();;;public Bz2PigStorage() {
    super();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/store/Bz2PigStorage;Bz2PigStorage(String);;;public Bz2PigStorage(String delimiter) {
    super(delimiter);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/store/Bz2PigStorage;setStoreLocation(String,Job);;;@Override
  public void setStoreLocation(String location, Job job) throws IOException {
    job.getConfiguration().set("output.compression.enabled", "true");
    job.getConfiguration().set("output.compression.codec", BZip2Codec.class.getName());
    super.setStoreLocation(location, job);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/store/LzoTokenizedStorage;LzoTokenizedStorage();;;public LzoTokenizedStorage() {
    super();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/load/LzoTokenizedLoader;LzoTokenizedLoader();;;public LzoTokenizedLoader() {
    super();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_ad562ae_130cfc6/rev_ad562ae-130cfc6;/src/java/com/twitter/elephantbird/pig/load/LzoTextLoader;LzoTextLoader();;;    super("\n");
/home/taes/taes//projects/archaius/revisions/rev_61eb7f8_8b0dddc/rev_61eb7f8-8b0dddc;/archaius-core/src/main/java/com/netflix/config/ConfigurationBasedDeploymentContext;getValue(ContextKey);;;@Override
    public String getValue(ContextKey key) {   
        String value = getValueFromConfig("archaius.deployment." + key.toString());
        if (value != null) {
            return value;
        } else {
            return super.getValue(key);
        }
    }
/home/taes/taes//projects/atlas/revisions/rev_98ae4ea_9a79e22/rev_98ae4ea-9a79e22;/atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle;checkLoadKernalDebugPatch(Application);;;                    File internalDebugBundleDir = new File(new File(application.getFilesDir(), "debug_storage"), KERNAL_BUNDLE_NAME);
                    internalDebugBundleDir.mkdirs();
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;doAction();        AaptPackageProcessBuilder aaptPackageCommandBuilder = new AaptPackageProcessBuilder(
            miniManifest,
            aaptOptions).setAssetsFolder(assetsFolder);;        AaptPackageProcessBuilder aaptPackageCommandBuilder = new AaptPackageProcessBuilder(miniManifest,
                                                                                            aaptOptions).setAssetsFolder(
            assetsFolder)
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;doAction();        ProcessOutputHandler processOutputHandler = new ParsingProcessOutputHandler(new ToolOutputParser(
            new AaptOutputParser(),
            getILogger()), new MergingLogRewriter(mergingLog, builder.getErrorReporter()));;;        ProcessOutputHandler processOutputHandler
            = new ParsingProcessOutputHandler(new ToolOutputParser(new AaptOutputParser(), getILogger()),
                                              new MergingLogRewriter(mergingLog, builder.getErrorReporter()));
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;ConfigAction(AppVariantContext,BaseVariantOutputData);public ConfigAction(AppVariantContext appVariantContext,
                            BaseVariantOutputData baseVariantOutputData) {;;public ConfigAction(AppVariantContext appVariantContext, BaseVariantOutputData baseVariantOutputData) {
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);            if (variantData.getSplitHandlingPolicy() ==
                SplitHandlingPolicy.RELEASE_21_AND_AFTER_POLICY) {;;            if (variantData.getSplitHandlingPolicy() == SplitHandlingPolicy.RELEASE_21_AND_AFTER_POLICY) {
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);            processDiffResources.mergeBlameLogFolder = scope.getVariantScope()
                .getResourceBlameLogDir();
            processDiffResources.pseudoLocalesEnabled = config.getBuildType()
                .isPseudoLocalesEnabled();;;            processDiffResources.mergeBlameLogFolder = scope.getVariantScope().getResourceBlameLogDir();
            processDiffResources.pseudoLocalesEnabled = config.getBuildType().isPseudoLocalesEnabled();
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);                    return new File(appVariantContext.apContext.getApExploredFolder(),  "AndroidManifest.xml");;;                    return new File(appVariantContext.apContext.getApExploredFolder(), "AndroidManifest.xml");
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);            ConventionMappingHelper.map(processDiffResources,
                                        "aaptOptions",
                                        new Callable<AaptOptions>() {
                                            @Override
                                            public AaptOptions call() throws Exception {
                                                //设置aapt参数
                                                AaptOptions aaptOptions = scope.getGlobalScope()
                                                    .getExtension()
                                                    .getAaptOptions();
                                                if (null == aaptOptions.getAdditionalParameters() ||
                                                    !aaptOptions.getAdditionalParameters()
                                                        .contains("-B")) {

                                                    PatchConfig patchConfig = appVariantContext.getBuildType()
                                                        .getPatchConfig();
                                                    if (patchConfig == null ||
                                                        !(patchConfig.isCreateAPatch() ||
                                                            patchConfig.isCreateTPatch())) {
                                                        return aaptOptions;
                                                    }

                                                    AaptOptions cloneAaptOptions = new AaptOptions();
                                                    try {
                                                        BeanUtils.copyProperties(cloneAaptOptions,
                                                                                 aaptOptions);
                                                    } catch (Throwable e) {
                                                        throw new StopExecutionException(e.getMessage());
                                                    }
                                                    aaptOptions = cloneAaptOptions;

                                                    List<String> additionParameters = aaptOptions
                                                        .getAdditionalParameters();
                                                    if (null == additionParameters) {
                                                        additionParameters = new ArrayList<String>();
                                                    }
                                                    additionParameters.add("-B");
                                                    additionParameters.add(appVariantContext.apContext
                                                                               .getBaseApk()
                                                                               .getAbsolutePath());
                                                }
                                                return aaptOptions;
                                            }
                                        });

            ConventionMappingHelper.map(processDiffResources,
                                        "resourceConfigs",
                                        new Callable<Collection<String>>() {
                                            @Override
                                            public Collection<String> call() throws Exception {
                                                Collection<String> resConfigs = config.getMergedFlavor()
                                                    .getResourceConfigurations();
                                                if (resConfigs.size() == 1 &&
                                                    Iterators.getOnlyElement(resConfigs.iterator())
                                                        .equals("auto")) {
                                                    if (scope.getGlobalScope()
                                                        .getAndroidBuilder()
                                                        .getTargetInfo()
                                                        .getBuildTools()
                                                        .getRevision()
                                                        .getMajor() >= 21) {
                                                        return variantData.discoverListOfResourceConfigsNotDensities();
                                                    } else {
                                                        return variantData.discoverListOfResourceConfigs();
                                                    }
                                                }
                                                return config.getMergedFlavor()
                                                    .getResourceConfigurations();
                                            }
                                        });

            ConventionMappingHelper.map(processDiffResources,
                                        "preferredDensity",
                                        new Callable<String>() {
                                            @Override
                                            @Nullable
                                            public String call() throws Exception {
                                                String variantFilter = variantOutputData.getMainOutputFile()
                                                    .getFilter(com.android.build.OutputFile.DENSITY);
                                                if (variantFilter != null) {
                                                    return variantFilter;
                                                }
                                                return AndroidGradleOptions.getBuildTargetDensity(
                                                    scope.getGlobalScope().getProject());
                                            }
                                        });;;            ConventionMappingHelper.map(processDiffResources, "aaptOptions", new Callable<AaptOptions>() {
                @Override
                public AaptOptions call() throws Exception {
                    //设置aapt参数
                    AaptOptions aaptOptions = scope.getGlobalScope().getExtension().getAaptOptions();
                    if (null == aaptOptions.getAdditionalParameters() || !aaptOptions.getAdditionalParameters()
                        .contains("-B")) {

                        PatchConfig patchConfig = appVariantContext.getBuildType().getPatchConfig();
                        if (patchConfig == null || !(patchConfig.isCreateAPatch() || patchConfig.isCreateTPatch())) {
                            return aaptOptions;
                        }

                        AaptOptions cloneAaptOptions = new AaptOptions();
                        try {
                            BeanUtils.copyProperties(cloneAaptOptions, aaptOptions);
                        } catch (Throwable e) {
                            throw new StopExecutionException(e.getMessage());
                        }
                        aaptOptions = cloneAaptOptions;

                        List<String> additionParameters = aaptOptions.getAdditionalParameters();
                        if (null == additionParameters) {
                            additionParameters = new ArrayList<String>();
                        }
                        additionParameters.add("-B");
                        additionParameters.add(appVariantContext.apContext.getBaseApk().getAbsolutePath());
                    }
                    return aaptOptions;
                }
            });

            ConventionMappingHelper.map(processDiffResources, "resourceConfigs", new Callable<Collection<String>>() {
                @Override
                public Collection<String> call() throws Exception {
                    Collection<String> resConfigs = config.getMergedFlavor().getResourceConfigurations();
                    if (resConfigs.size() == 1 && Iterators.getOnlyElement(resConfigs.iterator()).equals("auto")) {
                        if (scope.getGlobalScope()
                            .getAndroidBuilder()
                            .getTargetInfo()
                            .getBuildTools()
                            .getRevision()
                            .getMajor() >= 21) {
                            return variantData.discoverListOfResourceConfigsNotDensities();
                        } else {
                            return variantData.discoverListOfResourceConfigs();
                        }
                    }
                    return config.getMergedFlavor().getResourceConfigurations();
                }
            });

            ConventionMappingHelper.map(processDiffResources, "preferredDensity", new Callable<String>() {
                @Override
                @Nullable
                public String call() throws Exception {
                    String variantFilter = variantOutputData.getMainOutputFile()
                        .getFilter(com.android.build.OutputFile.DENSITY);
                    if (variantFilter != null) {
                        return variantFilter;
                    }
                    return AndroidGradleOptions.getBuildTargetDensity(scope.getGlobalScope().getProject());
                }
            });
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);                    File baseApkFileList = new File(appVariantContext.apContext.getApExploredFolder(),
                                                    APK_FILE_LIST);;;                    File baseApkFileList = new File(appVariantContext.apContext.getApExploredFolder(), APK_FILE_LIST);
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);                                              "tpatch" +
                                                  File.separator +
                                                  config.getFullName() +
                                                  File.separator +
                                                  "raw-res");;;                                              "tpatch"
                                                  + File.separator
                                                  + config.getFullName()
                                                  + File.separator
                                                  + "raw-res");
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);                                            "tpatch" +
                                                File.separator +
                                                config.getFullName() +
                                                File.separator +
                                                "diff-res");;;                                            "tpatch"
                                                + File.separator
                                                + config.getFullName()
                                                + File.separator
                                                + "diff-res");
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);                    ApkFileList baseApkFiles = JSON.parseObject(FileUtils.readFileToString(
                        baseApkFileList), ApkFileList.class);;;                    ApkFileList baseApkFiles = JSON.parseObject(FileUtils.readFileToString(baseApkFileList),
                                                                ApkFileList.class);
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask;execute(TPatchDiffResAPBuildTask);                    FileUtils.copyDirectory(scope.getVariantScope().getFinalResourcesDir(),
                                            new File(rawResDir, "res"));
                    FileUtils.copyDirectory(variantData.mergeAssetsTask.getOutputDir(),
                                            new File(rawResDir, "assets"));;;                    FileUtils.copyDirectory(scope.getVariantScope().getFinalResourcesDir(), new File(rawResDir, "res"));
                    FileUtils.copyDirectory(variantData.mergeAssetsTask.getOutputDir(), new File(rawResDir, "assets"));
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/xml/XmlHelper;saveFile(Document,OutputFormat,File);public static void saveFile(Document document,
                                OutputFormat format,
                                File file) throws IOException {;;public static void saveFile(Document document, OutputFormat format, File file) throws IOException {
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/xml/XmlHelper;removeStringValue(File,String);;;public static void removeStringValue(File file, String key) throws IOException, DocumentException {

        if (!file.exists()) {
            return;
        }

        Document document = XmlHelper.readXml(file);// 读取XML文件
        Element root = document.getRootElement();// 得到根节点
        List<? extends Node> nodes = root.selectNodes("//string");
        for (Node node : nodes) {
            Element element = (Element)node;
            String name = element.attributeValue("name");
            if (key.equals(name)) {
                element.getParent().remove(element);
                break;
            }
        }
        // sLogger.warn("[resxmlediter] add " + key + " to " + file.getAbsolutePath());
        XmlHelper.saveDocument(document, file);
    }
/home/taes/taes//projects/atlas/revisions/rev_4e151bd_ffb0907/rev_4e151bd-ffb0907;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/sign/AndroidSigner;signFile(File,File,DefaultSigningConfig,Map);;;public boolean signFile(File inFile, File outFile, DefaultSigningConfig signingConfig, Map params) throws IOException,
                                                                                                       SigningException {
        return signFile(inFile,outFile,signingConfig);
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/SerializationFactory;getDeserializer(K);;;public Optional<Deserializer> getDeserializer(K key);
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/SerializationFactory;getSerializer(K);;;public Optional<Serializer> getSerializer(K key);
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/ContentTypeBasedSerializerKey;ContentTypeBasedSerializerKey(String,Class<?>);;;public ContentTypeBasedSerializerKey(String contentType, Class<?> classType) {
        super();
        this.contentType = contentType;
        this.typeToken = TypeToken.of(classType);
        this.classType = classType;
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/ContentTypeBasedSerializerKey;ContentTypeBasedSerializerKey(String,TypeToken<?>);;;public ContentTypeBasedSerializerKey(String contentType, TypeToken<?> typeToken) {
        super();
        this.contentType = contentType;
        this.typeToken = typeToken;
        this.classType = typeToken.getClass();
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/ContentTypeBasedSerializerKey;getContentType();;;public final String getContentType() {
        return contentType;
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/ContentTypeBasedSerializerKey;getClassType();;;public final Class<?> getClassType() {
        return classType;
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/ContentTypeBasedSerializerKey;getTypeToken();;;public final TypeToken<?> getTypeToken() {
        return typeToken;
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/ContentTypeBasedSerializerKey;hashCode();;;@Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((classType == null) ? 0 : classType.hashCode());
        result = prime * result
                + ((contentType == null) ? 0 : contentType.hashCode());
        return result;
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/ContentTypeBasedSerializerKey;equals(Object);;;@Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ContentTypeBasedSerializerKey other = (ContentTypeBasedSerializerKey) obj;
        if (classType == null) {
            if (other.classType != null)
                return false;
        } else if (!classType.equals(other.classType))
            return false;
        if (contentType == null) {
            if (other.contentType != null)
                return false;
        } else if (!contentType.equals(other.contentType))
            return false;
        return true;
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/ContentTypeBasedSerializerKey;toString();;;@Override
    public String toString() {
        return "DefaultSerializerKey [contentType=" + contentType
                + ", classType=" + classType + "]";
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/JacksonSerializationFactory;getDeserializer(ContentTypeBasedSerializerKey);;;@Override
    public Optional<Deserializer> getDeserializer(ContentTypeBasedSerializerKey key) {
        if (key.getContentType().equalsIgnoreCase("application/json")) {
            return Optional.<Deserializer>of(instance);
        }
        return Optional.absent();
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/JacksonSerializationFactory;getSerializer(ContentTypeBasedSerializerKey);;;@Override
    public Optional<Serializer> getSerializer(ContentTypeBasedSerializerKey key) {
        if (key.getContentType().equalsIgnoreCase("application/json")) {
            return Optional.<Serializer>of(instance);
        }
        return Optional.absent();
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/JacksonSerializationFactory;deserialize(InputStream,TypeToken<T>);;;@Override
    public <T> T deserialize(InputStream in, TypeToken<T> type)
            throws IOException {
        return mapper.readValue(in, new TypeTokenBasedReference<T>(type));
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/JacksonSerializationFactory;serialize(OutputStream,Object);;;@Override
    public void serialize(OutputStream out, Object object) throws IOException {
        mapper.writeValue(out, object);
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/JacksonSerializationFactory;TypeTokenBasedReference(TypeToken<T>);;;public TypeTokenBasedReference(TypeToken<T> typeToken) {
        type = typeToken.getType();    
        
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/JacksonSerializationFactory;getType();;;@Override
    public Type getType() {
        return type;
    }
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/Deserializer;deserialize(InputStream,TypeToken<T>);;;public <T> T deserialize(InputStream in, TypeToken<T> type) throws IOException;
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/serialization/Serializer;serialize(OutputStream,Object);;;public void serialize(OutputStream out, Object object) throws IOException;
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient;isCircuitBreakerException(Throwable);;;protected abstract boolean isCircuitBreakerException(Throwable e);
/home/taes/taes//projects/ribbon/revisions/rev_b33a5ed_42c3e4c/rev_b33a5ed-42c3e4c;/ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient;isRetriableException(Throwable);;;protected abstract boolean isRetriableException(Throwable e);
/home/taes/taes//projects/elephant-bird/revisions/rev_d005ea3_539efc9/rev_d005ea3-539efc9;/src/java/com/twitter/elephantbird/util/Protobufs;getMessageFieldNames(Descriptor,Map<String,String>);;;public static List<String> getMessageFieldNames(Descriptor descriptor, Map<String, String> fieldNameTranslations) {
     Function<FieldDescriptor, String> fieldTransformer = getFieldTransformerFor(fieldNameTranslations);
     return ListHelper.filter(Lists.transform(descriptor.getFields(), fieldTransformer), Predicates.<String>notNull());
   }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/util/ThriftToPig;getTStructDescriptor();;;public TStructDescriptor getTStructDescriptor() {
    return structDesc;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/util/ThriftToPig;toPigObject(Field,Object,boolean);;;@SuppressWarnings("unchecked")
  static Object toPigObject(Field field, Object value, boolean lazy) {
    if (value == null) {
      return null;
    }

    switch (field.getType()) {
    case TType.BOOL:
      return Integer.valueOf((Boolean)value ? 1 : 0);
    case TType.BYTE :
      return Integer.valueOf((Byte)value);
    case TType.I16 :
      return Integer.valueOf((Short)value);
    case TType.STRING:
      return stringTypeToPig(value);
    case TType.STRUCT:
      if (lazy) {
        return new LazyTuple(field.gettStructDescriptor(), (TBase<?, ?>)value);
      } else {
        return toTuple(field.gettStructDescriptor(), (TBase<?, ?>)value);
      }
    case TType.MAP:
      return toPigMap(field, (Map<Object, Object>)value, lazy);
    case TType.SET:
      return toPigBag(field.getSetElemField(), (Collection<Object>)value, lazy);
    case TType.LIST:
      return toPigBag(field.getListElemField(), (Collection<Object>)value, lazy);
    case TType.ENUM:
      return value.toString();
    default:
      // standard types : I32, I64, DOUBLE, etc.
      return value;
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/util/ThriftToPig;toPigMap(Field,Map<Object,Object>,boolean);;;private static Map<String, Object> toPigMap(Field field,
                                              Map<Object, Object> map,
                                              boolean lazy) {
    // PIG map's key always a String. just use toString() and hope
    // things would work out ok.
    HashMap<String, Object> out = new HashMap<String, Object>(map.size());
    Field valueField = field.getMapValueField();
    for(Entry<Object, Object> e : map.entrySet()) {
      Object prev = out.put(e.getKey().toString(),
                            toPigObject(valueField, e.getValue(), lazy));
      if (prev != null) {
        String msg = "Duplicate keys while converting to String while "
          + " processing map " + field.getName() + " (key type : "
          + field.getMapKeyField().getType() + " value type : "
          + field.getMapValueField().getType() + ")";
        LOG.warn(msg);
        throw new RuntimeException(msg);
      }
    }
    return out;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/util/ThriftToPig;toPigBag(Field,Collection<Object>,boolean);;;private static DataBag toPigBag(Field field,
                                  Collection<Object> values,
                                  boolean lazy) {
    List<Tuple> tuples = Lists.newArrayListWithExpectedSize(values.size());
    for(Object value : values) {
      Object pValue = toPigObject(field, value, lazy);
      if (pValue instanceof Tuple) { // DataBag should contain Tuples
        tuples.add((Tuple)pValue);
      } else {
        tuples.add(tupleFactory.newTuple(pValue));
      }
    }
    return bagFactory.newDefaultBag(tuples);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/util/ThriftToPig;LazyTuple(TStructDescriptor,TBase<?,?>);;;LazyTuple(TStructDescriptor desc, TBase<?, ?> tObject) {
      initRealTuple(desc.getFields().size());
      this.tObject = tObject;
      this.desc = desc;
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/util/AbstractLazyTuple;toString();;;@Override
  public String toString() {
    convertAll();
    return realTuple.toString();
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/util/ProtobufToPig;fieldToPig(FieldDescriptor,Object);;;protected Object fieldToPig(FieldDescriptor fieldDescriptor, Object fieldValue) {
    if (fieldDescriptor.getType() == FieldDescriptor.Type.MESSAGE) {
      return messageToTuple(fieldDescriptor, fieldValue);
    } else {
      return singleFieldToTuple(fieldDescriptor, fieldValue);
    }
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/load/LzoThriftB64LinePigLoader;pushProjection(RequiredFieldList);;;@Override
  public RequiredFieldResponse pushProjection(RequiredFieldList requiredFieldList)
                                              throws FrontendException {
    return pushProjectionHelper(requiredFieldList);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/load/LzoBaseLoadFunc;getUDFProperties();;;protected Properties getUDFProperties() {
    return UDFContext.getUDFContext()
        .getUDFProperties(this.getClass(), new String[] {contextSignature});
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/load/LzoBaseLoadFunc;setUDFContextSignature(String);;;@Override
  public void setUDFContextSignature(String signature) {
    this.contextSignature = signature;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/load/LzoBaseLoadFunc;getFeatures();;;@Override
  public List<OperatorSet> getFeatures() {
    return Arrays.asList(LoadPushDown.OperatorSet.PROJECTION);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/load/LzoBaseLoadFunc;pushProjection(RequiredFieldList);;;@Override
  public RequiredFieldResponse pushProjection(
      RequiredFieldList requiredFieldList) throws FrontendException {
    // the default implementation disables the feature.
    // a projection needs to be explicitly supported by sub classes.
    return null;
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufB64LinePigLoader;pushProjection(RequiredFieldList);;;@Override
  public RequiredFieldResponse pushProjection(RequiredFieldList requiredFieldList)
                                              throws FrontendException {
    return pushProjectionHelper(requiredFieldList);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/test/com/twitter/elephantbird/pig/piggybank/TestProtoToPig;testLazyProtoToPig();;;      if (idx%2 == 0) {
        assertEquals(projectedTuple.get(fd.getIndex()/2), normalTuple.get(fd.getIndex()));
      }
      idx++;
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/test/com/twitter/elephantbird/pig/piggybank/TestProtoToPig;evenFields(List<FieldDescriptor>);;;private static RequiredFieldList evenFields(List<FieldDescriptor> protoFields) {
    RequiredFieldList reqList = new RequiredFieldList();

    int i = 0;
    for(FieldDescriptor fd : protoFields) {
      if (i%2 == 0) {
        RequiredField field = new RequiredField();
        field.setAlias(fd.getName());
        field.setIndex(i);
        // field.setType() type is not used
        reqList.add(field);
      }
      i++;
    }
    return reqList;
  }
/home/taes/taes//projects/curator/revisions/rev_d4c0be0_ff4ec29/rev_d4c0be0-ff4ec29;/curator-framework/src/main/java/com/netflix/curator/framework/imps/CreateBuilderImpl;backgroundCreateParentsThenNode(OperationAndData<PathAndBytes>);;;private void backgroundCreateParentsThenNode(final OperationAndData<PathAndBytes> mainOperationAndData)
    {
        BackgroundOperation<PathAndBytes>     operation = new BackgroundOperation<PathAndBytes>()
        {
            @Override
            public void performBackgroundOperation(OperationAndData<PathAndBytes> dummy) throws Exception
            {
                try
                {
                    ZKPaths.mkdirs(client.getZooKeeper(), mainOperationAndData.getData().getPath(), false);
                }
                catch ( KeeperException e )
                {
                    // ignore
                }
                client.queueOperation(mainOperationAndData);
            }
        };
        OperationAndData<PathAndBytes>        parentOperation = new OperationAndData<PathAndBytes>(operation, mainOperationAndData.getData(), null, null);
        client.queueOperation(parentOperation);
    }
/home/taes/taes//projects/curator/revisions/rev_d4c0be0_ff4ec29/rev_d4c0be0-ff4ec29;/curator-framework/src/main/java/com/netflix/curator/framework/imps/CuratorFrameworkImpl;queueOperation(OperationAndData<DATA_TYPE>);;;<DATA_TYPE> void queueOperation(OperationAndData<DATA_TYPE> operationAndData)
    {
        backgroundOperations.offer(operationAndData);
    }
/home/taes/taes//projects/elephant-bird/revisions/rev_a7db88d_d84d866/rev_a7db88d-d84d866;/src/java/com/twitter/elephantbird/mapred/input/DeprecatedInputFormatWrapper;setInputFormat(Class<?>,JobConf);public static void setInputFormat(Class<?> realInputFormatClass,
                                    JobConf jobConf) {
    jobConf.setInputFormat(DeprecatedInputFormatWrapper.class);
    HadoopUtils.setInputFormatClass(jobConf, CLASS_CONF_KEY, realInputFormatClass);
  };;public static void setInputFormat(Class<?> realInputFormatClass, JobConf jobConf) {
    jobConf.setInputFormat(DeprecatedInputFormatWrapper.class);
    HadoopUtils.setInputFormatClass(jobConf, CLASS_CONF_KEY, realInputFormatClass);
  }
/home/taes/taes//projects/elephant-bird/revisions/rev_56e97f9_c1ca987/rev_56e97f9-c1ca987;/rcfile/src/main/java/com/twitter/elephantbird/mapreduce/output/RCFileProtobufOutputFormat;write(NullWritable,Writable);;;            // match protobuf's serialization (write only if hasField() is true)
/home/taes/taes//projects/elephant-bird/revisions/rev_56e97f9_c1ca987/rev_56e97f9-c1ca987;/rcfile/src/main/java/com/twitter/elephantbird/mapreduce/input/RCFileThriftInputFormat;getCurrentThriftValue();;;        // else no need to set default value since any default value
        // would have been serialized when this record was written.
/home/taes/taes//projects/elephant-bird/revisions/rev_56e97f9_c1ca987/rev_56e97f9-c1ca987;/rcfile/src/main/java/com/twitter/elephantbird/mapreduce/input/RCFileProtobufInputFormat;getCurrentTupleValue();;;        FieldDescriptor fd = knownRequiredFields.get(i);
        Object value = null;
/home/taes/taes//projects/elephant-bird/revisions/rev_56e97f9_c1ca987/rev_56e97f9-c1ca987;/rcfile/src/main/java/com/twitter/elephantbird/mapreduce/input/RCFileProtobufInputFormat;getCurrentTupleValue();;;        tuple.set(i, protoToPig.fieldToPig(fd, value));
/home/taes/taes//projects/retrofit/revisions/rev_adb8851_9097b29/rev_adb8851-9097b29;/retrofit/src/test/java/retrofit/RestAdapterTest;logRequestResponseBasic();        .thenReturn(
            new Response("http://example.com/", 200, "OK", TWO_HEADERS, new TypedString("{}")));;        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS, new TypedString("{}")));;        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS, new TypedString("Hi")));
/home/taes/taes//projects/elephant-bird/revisions/rev_9f1257c_88aca05/rev_9f1257c-88aca05;/core/src/main/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockReader;getConverter();;;public BinaryConverter<M> getConverter() {
    return protoConverter_;
  }
