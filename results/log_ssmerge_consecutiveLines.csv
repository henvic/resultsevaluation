revision;file;methodsignature;leftbody;basebody;rightbody
/home/taes/taes//projects/atlas/revisions/rev_c2e9822_9b24b0d/rev_c2e9822-9b24b0d;/atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/manifest/PostProcessManifestTask;execute(PostProcessManifestTask);            postProcessManifestsTask.bunldeBaseInfoFile = new File(variantContext.getScope()
                                                                       .getGlobalScope()
                                                                       .getProject()
                                                                       .getProjectDir(),;            postProcessManifestsTask.bunldeBaseInfoFile = new File(variantContext.getScope()
                                                                           .getGlobalScope()
                                                                           .getProject()
                                                                           .getProjectDir(),;            postProcessManifestsTask.bundleBaseInfoFile = new File(variantContext.getScope()
                                                                           .getGlobalScope()
                                                                           .getProject()
                                                                           .getProjectDir(),
/home/taes/taes//projects/elephant-bird/revisions/rev_c01b27b_cebd3d0/rev_c01b27b-cebd3d0;/src/java/com/twitter/elephantbird/mapreduce/output/LzoProtobufB64LineOutputFormat;getRecordWriter(TaskAttemptContext);    Configuration conf = job.getConfiguration();
    LzoCodec codec = new LzopCodec();
		codec.setConf(conf);

    Path file = getDefaultWorkFile(job, codec.getDefaultExtension());
    FileSystem fs = file.getFileSystem(conf);
    FSDataOutputStream fileOut = fs.create(file, false);

    return new LzoProtobufB64LineRecordWriter<M, W>(typeRef_,
        new DataOutputStream(codec.createOutputStream(fileOut)));;    Configuration conf = job.getConfiguration();
    LzopCodec codec = new LzopCodec();
    codec.setConf(conf);

    Path file = getDefaultWorkFile(job, codec.getDefaultExtension());
    FileSystem fs = file.getFileSystem(conf);
    FSDataOutputStream fileOut = fs.create(file, false);

    return new LzoProtobufB64LineRecordWriter<M, W>(typeRef_,
        new DataOutputStream(codec.createOutputStream(fileOut)));;    return new LzoBinaryB64LineRecordWriter<M, W>(new ProtobufConverter<M>(typeRef_), getOutputStream(job));
/home/taes/taes//projects/atlas/revisions/rev_229ef67_32e19be/rev_229ef67-32e19be;/atlas-core/src/main/java/android/taobao/atlas/framework/BundleInstaller;findBundleSource(String);        BundleListing.BundleInfo info = AtlasBundleInfoManager.instance().getBundleInfo(location);
        if(bundleFile.exists() && info.isInternal()){;        if(bundleFile.exists() && AtlasBundleInfoManager.instance().isInternalBundle(location)){;

        if(!bundleFile.exists()){
            bundleFile = new File(RuntimeVariables.androidApplication.getApplicationInfo().nativeLibraryDir,bundleFileName);
        }
        if(bundleFile.exists() && AtlasBundleInfoManager.instance().isInternalBundle(location)){
/home/taes/taes//projects/elephant-bird/revisions/rev_27ceb0c_4353485/rev_27ceb0c-4353485;/src/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter;BinaryBlockWriter(OutputStream,Class<M>,BinaryConverter<M>,int);    innerClass_ = protoClass;
    binaryConverter_ = binaryConverter;;    protobufClass_ = protoClass;
    protoConverter_ = protoConverter;
    ;    protobufClass_ = protoClass;
    protoConverter_ = protoConverter;
/home/taes/taes//projects/atlas/revisions/rev_cd15c8a_59be063/rev_cd15c8a-59be063;/atlas-demo/AtlasDemo/app/src/main/java/com/taobao/update/Updater;update(Context);            if (!updateInfo.exists()) {
                Log.e("update", "更新信息不存在，请先 执行 buildTpatch.sh");
                toast("更新信息不存在，请先 执行 buildTpatch.sh", context);
                return;
            }

            String jsonStr = new String(FileUtils.readFile(updateInfo));
            UpdateInfo info = JSON.parseObject(jsonStr, UpdateInfo.class);;        String jsonStr = new String(FileUtils.readFile(updateInfo));
        UpdateInfo info = JSON.parseObject(jsonStr, UpdateInfo.class);

        File patchFile = new File(context.getExternalCacheDir(), "patch-" + info.updateVersion + "@" + info.baseVersion + ".tpatch");;        String jsonStr = new String(FileUtils.readFile(updateInfo));
        UpdateInfo info = JSON.parseObject(jsonStr, UpdateInfo.class);
        info.lowDisk = false;
        File patchFile = new File(context.getExternalCacheDir(), "patch-" + info.updateVersion + "@" + info.baseVersion + ".tpatch");
/home/taes/taes//projects/elephant-bird/revisions/rev_f06548b_513c57a/rev_f06548b-513c57a;/src/java/com/twitter/elephantbird/pig/load/LzoJsonLoader;LzoJsonLoader();public LzoJsonLoader() {
    LOG.debug("LzoJsonLoader creation");
  };public LzoJsonLoader() {
    LOG.info("LzoJsonLoader creation");
  };public LzoJsonLoader() {}
/home/taes/taes//projects/atlas/revisions/rev_799f8e4_9f4a697/rev_799f8e4-9f4a697;/atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/apatch/ApkPatch;doPatch();            File smaliDir2 = new File(aptchFolder, "smali2");
            if (!smaliDir2.exists()) {
                smaliDir2.mkdirs();
            }
            try {
                FileUtils.cleanDirectory(smaliDir2);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            prepareClasses = buildPrepareClass(smaliDir2, newFiles, info);;            List filterClasses = null;
            if (dexDiffer.getFilter()!= null){
                filterClasses = dexDiffer.getFilter().getFilteredClasses();
            }

            List finalFilterClasses = filterClasses;
            Collections.sort(classes, new Comparator<String>() {
                @Override
                public int compare(String o1, String o2) {
                    if (dexDiffer.getFilter() == null){
                        return 0;
                    }else {
                        return finalFilterClasses.indexOf(o1) - finalFilterClasses.indexOf(o2);
                    }
                }
            });



//            //是否修改dex
//            if (APatchTool.debug) {
//                PatchMethodTool.modifyMethod(dexFile.getAbsolutePath(), dexFile.getAbsolutePath(), true);
//            }
//
//            File smaliDir2 = new File(aptchFolder, "smali2");
//            if (!smaliDir2.exists()) {
//                smaliDir2.mkdirs();
//            }
//            try {
//                FileUtils.cleanDirectory(smaliDir2);
//            } catch (IOException e) {
//                throw new RuntimeException(e);
//            }
//            prepareClasses = buildPrepareClass(smaliDir2, newFiles, info);;            List filterClasses = null;
            if (dexDiffer.getFilter()!= null){
                filterClasses = dexDiffer.getFilter().getFilteredClasses();
            }

            List finalFilterClasses = filterClasses;
            Collections.sort(classes, new Comparator<String>() {
                @Override
                public int compare(String o1, String o2) {
                    if (dexDiffer.getFilter() == null){
                        return 0;
                    }else {
                        return finalFilterClasses.indexOf(o1) - finalFilterClasses.indexOf(o2);
                    }
                }
            });



//            //是否修改dex
//            if (APatchTool.debug) {
//                PatchMethodTool.modifyMethod(dexFile.getAbsolutePath(), dexFile.getAbsolutePath(), true);
//            }
//
            File smaliDir2 = new File(aptchFolder, "smali2");
            if (!smaliDir2.exists()) {
                smaliDir2.mkdirs();
            }
            try {
                FileUtils.cleanDirectory(smaliDir2);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
           prepareClasses = buildPrepareClass(smaliDir2, newFiles, info);
/home/taes/taes//projects/atlas/revisions/rev_799f8e4_9f4a697/rev_799f8e4-9f4a697;/atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/apatch/ApkPatch;getMeta();        main.putValue(name + "-Prepare-Classes", Formater.dotStringList(prepareClasses));
        main.putValue(name + "-Used-Methods", Formater.dotStringList(usedMethods));
        main.putValue(name + "-Modified-Classes", Formater.dotStringList(modifiedClasses));
        main.putValue(name + "-Used-Classes", Formater.dotStringList(usedClasses));
        main.putValue(name + "-add-classes", Formater.dotStringList(addClasses));;        main.putValue(name + "-add-classes", Formater.dotStringSet(addClasses));;        main.putValue(name + "-add-classes", Formater.dotStringSet(addClasses));
        main.putValue(name + "-Prepare-Classes",Formater.dotStringSet(prepareClasses));
/home/taes/taes//projects/elephant-bird/revisions/rev_b784885_342f336/rev_b784885-342f336;/src/java/com/twitter/elephantbird/pig/load/LzoProtobufB64LinePigLoader;getNext();    if (tupleTemplate == null) {
      tupleTemplate = new ProjectedProtoTuple<M>(typeRef_, requiredFieldList);
    }

    M value = getNextBinaryValue(typeRef_);;    M value = getNextBinaryValue(typeRef_);;    if (tupleTemplate == null) {
      tupleTemplate = new ProjectedProtobufTupleFactory<M>(typeRef, requiredFieldList);
    }

    M value = getNextBinaryValue(typeRef);
/home/taes/taes//projects/ribbon/revisions/rev_d5ab163_c82d1ae/rev_d5ab163-c82d1ae;/ribbon-transport/src/main/java/com/netflix/client/netty/http/NettyHttpClient;cacheLoadRxClient(Server);        HttpClientBuilder<I, O> clientBuilder;
        if (requestIdProvider != null) {
            clientBuilder = RxContexts.<I, O>newHttpClientBuilder(server.getHost(), server.getPort(), 
                    requestIdProvider, RxContexts.DEFAULT_CORRELATOR, pipelineConfigurator);
        } else {
            clientBuilder = RxContexts.<I, O>newHttpClientBuilder(server.getHost(), server.getPort(), 
                    RxContexts.DEFAULT_CORRELATOR, pipelineConfigurator);
        }
        Integer connectTimeout = getProperty(IClientConfigKey.CommonKeys.ConnectTimeout, null, DefaultClientConfigImpl.DEFAULT_CONNECT_TIMEOUT);
        Integer readTimeout = getProperty(IClientConfigKey.CommonKeys.ReadTimeout, null, DefaultClientConfigImpl.DEFAULT_READ_TIMEOUT);
        Boolean followRedirect = getProperty(IClientConfigKey.CommonKeys.FollowRedirects, null, null);;        HttpClientBuilder<I, O> clientBuilder = RxContexts.<I, O>newHttpClientBuilder(server.getHost(), server.getPort(), 
                requestIdHeaderName, RxContexts.DEFAULT_CORRELATOR)
                .pipelineConfigurator(ContextPipelineConfigurators.httpClientConfigurator(requestIdProvider,
                        RxContexts.DEFAULT_CORRELATOR,
                        pipelineConfigurator));
        Integer connectTimeout = getProperty(IClientConfigKey.CommonKeys.ConnectTimeout, null, DefaultClientConfigImpl.DEFAULT_CONNECT_TIMEOUT);
        Integer readTimeout = getProperty(IClientConfigKey.CommonKeys.ReadTimeout, null, DefaultClientConfigImpl.DEFAULT_READ_TIMEOUT);
        Boolean followRedirect = getProperty(IClientConfigKey.CommonKeys.FollowRedirects, null, null);;        HttpClientBuilder<I, O> clientBuilder = RxContexts.<I, O>newHttpClientBuilder(server.getHost(), server.getPort(), 
                requestIdHeaderName, RxContexts.DEFAULT_CORRELATOR)
                .pipelineConfigurator(ContextPipelineConfigurators.httpClientConfigurator(requestIdProvider,
                        RxContexts.DEFAULT_CORRELATOR,
                        pipelineConfigurator));
        Integer connectTimeout = getProperty(IClientConfigKey.Keys.ConnectTimeout, null, DefaultClientConfigImpl.DEFAULT_CONNECT_TIMEOUT);
        Integer readTimeout = getProperty(IClientConfigKey.Keys.ReadTimeout, null, DefaultClientConfigImpl.DEFAULT_READ_TIMEOUT);
        Boolean followRedirect = getProperty(IClientConfigKey.Keys.FollowRedirects, null, null);
/home/taes/taes//projects/curator/revisions/rev_74434b8_8cd8347/rev_74434b8-8cd8347;/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache;start(boolean);        executorService.submit
        (
            new Callable<Void>()
            {
                @Override
                public Void call() throws Exception;        mainLoopTask = executorService.submit
        (
            new Callable<Void>()
            {
                @Override
                public Void call() throws Exception;        mainLoopTask = executorService.submit
            (
                new Callable<Void>()
/home/taes/taes//projects/retrofit/revisions/rev_2ef7ca0_941ae85/rev_2ef7ca0-941ae85;/retrofit/src/main/java/retrofit/http/RestMethodInfo;parseMethodAnnotations();          throw new RuntimeException("Failed to extract path from "
              + annotationType.getSimpleName()
              + " annotation on "
              + method.getName()
              + ".", e);
        }
        parsePath(path);
        requestMethod = methodInfo.value();
        requestHasBody = methodInfo.hasBody();;          throw new RuntimeException("Failed to extract URI path.", e);
        }
        if (!path.startsWith("/")) {
          throw new IllegalArgumentException("URL path must be prefixed with '/'.");
        }
        pathParams = parsePathParameters(path);
        restMethod = methodInfo;
      } else if (annotationType == QueryParams.class) {
        if (pathQueryParams != null) {
          throw new IllegalStateException(
              "QueryParam and QueryParams annotations are mutually exclusive.");
        }
        pathQueryParams = ((QueryParams) methodAnnotation).value();
        if (pathQueryParams.length == 0) {
          throw new IllegalStateException("QueryParams annotation was empty.");
        }
      } else if (annotationType == QueryParam.class) {
        if (pathQueryParams != null) {
          throw new IllegalStateException(
              "QueryParam and QueryParams annotations are mutually exclusive.");
        }
        pathQueryParams = new QueryParam[] { (QueryParam) methodAnnotation };;          throw new RuntimeException("Failed to extract URI path.", e);
        }
        if (!path.startsWith("/")) {
          throw new IllegalArgumentException("URL path must be prefixed with '/'.");
        }
        pathParams = parsePathParameters(path);
        restMethod = methodInfo;
      } else if (annotationType == Headers.class) {
        String[] headersToParse = ((Headers) methodAnnotation).value();
        if (headersToParse.length == 0) {
          throw new IllegalStateException("Headers annotation was empty.");
        }
        headers = parseHeaders(headersToParse);
      } else if (annotationType == QueryParams.class) {
        if (pathQueryParams != null) {
          throw new IllegalStateException(
              "QueryParam and QueryParams annotations are mutually exclusive.");
        }
        pathQueryParams = ((QueryParams) methodAnnotation).value();
        if (pathQueryParams.length == 0) {
          throw new IllegalStateException("QueryParams annotation was empty.");
        }
      } else if (annotationType == QueryParam.class) {
        if (pathQueryParams != null) {
          throw new IllegalStateException(
              "QueryParam and QueryParams annotations are mutually exclusive.");
        }
        pathQueryParams = new QueryParam[] { (QueryParam) methodAnnotation };
/home/taes/taes//projects/retrofit/revisions/rev_2ef7ca0_941ae85/rev_2ef7ca0-941ae85;/retrofit/src/main/java/retrofit/http/RestMethodInfo;parseParameters();    String[] urlParam = new String[count];
    String[] queryName = new String[count];
    String[] formValue = new String[count];
    String[] multipartPart = new String[count];
    boolean gotPair = false;
    boolean gotPart = false;;    String[] namedParams = new String[count];;    String[] namedParams = new String[count];
    String[] headerParams = new String[count];
/home/taes/taes//projects/retrofit/revisions/rev_2ef7ca0_941ae85/rev_2ef7ca0-941ae85;/retrofit/src/main/java/retrofit/http/RestMethodInfo;parseParameters();
    requestUrlParam = urlParam;
    requestQueryName = queryName;
    requestFormPair = formValue;
    requestMultipartPart = multipartPart;;    this.namedParams = namedParams;;    this.namedParams = namedParams;
    this.headerParams = headerParams;
